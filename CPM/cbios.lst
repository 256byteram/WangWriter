   1:				; CBIOS for WangWriter
   2:				;
   3:				; Portions by Digital Research
   4:				;
   5:					maclib Z80
**** Z80.lib ****
   1:				;	@CHK MACRO USED FOR CHECKING 8 BIT DISPLACMENTS
   2:				;
   3:				@CHK	MACRO	?DD	;; USED FOR CHECKING RANGE OF 8-BIT DISP.S
   4:					IF (?DD GT 7FH) AND (?DD LT 0FF80H)
   5:				 'DISPLACEMENT RANGE ERROR - Z80 LIB'
   6:					ENDIF
   7:					ENDM
   8:				LDX	MACRO	?R,?D	
   9:					@CHK	?D
  10:					DB	0DDH,?R*8+46H,?D
  11:					ENDM
  12:				LDY	MACRO	?R,?D	
  13:					@CHK	?D
  14:					DB	0FDH,?R*8+46H,?D
  15:					ENDM
  16:				STX	MACRO	?R,?D	
  17:					@CHK	?D
  18:					DB	0DDH,70H+?R,?D
  19:					ENDM
  20:				STY	MACRO	?R,?D	
  21:					@CHK	?D
  22:					DB	0FDH,70H+?R,?D
  23:					ENDM
  24:				MVIX	MACRO	?N,?D	
  25:					@CHK	?D
  26:					DB	0DDH,36H,?D,?N
  27:					ENDM
  28:				MVIY	MACRO	?N,?D	
  29:					@CHK	?D
  30:					DB	0FDH,36H,?D,?N
  31:					ENDM
  32:				LDAI	MACRO		
  33:					DB	0EDH,57H
  34:					ENDM
  35:				LDAR	MACRO		
  36:					DB	0EDH,5FH
  37:					ENDM
  38:				STAI	MACRO		
  39:					DB	0EDH,47H
  40:					ENDM
  41:				STAR	MACRO		
  42:					DB	0EDH,4FH
  43:					ENDM
  44:				
  45:				LXIX	MACRO	?NNNN	
  46:					DB	0DDH,21H
  47:					DW	?NNNN
  48:					ENDM
  49:				LXIY	MACRO	?NNNN	
  50:					DB	0FDH,21H
  51:					DW	?NNNN
  52:					ENDM
  53:				LDED	MACRO	?NNNN	
  54:					DB	0EDH,5BH
  55:					DW	?NNNN
  56:					ENDM
  57:				LBCD	MACRO	?NNNN	
  58:					DB	0EDH,4BH
  59:					DW	?NNNN
  60:					ENDM
  61:				LSPD	MACRO	?NNNN	
  62:					DB	0EDH,07BH
  63:					DW	?NNNN
  64:					ENDM
  65:				LIXD	MACRO	?NNNN	
  66:					DB	0DDH,2AH
  67:					DW	?NNNN
  68:					ENDM
  69:				LIYD	MACRO	?NNNN	
  70:					DB	0FDH,2AH
  71:					DW	?NNNN
  72:					ENDM
  73:				SBCD	MACRO	?NNNN	
  74:					DB	0EDH,43H
  75:					DW	?NNNN
  76:					ENDM
  77:				SDED	MACRO	?NNNN	
  78:					DB	0EDH,53H
  79:					DW	?NNNN
  80:					ENDM
  81:				SSPD	MACRO	?NNNN	
  82:					DB	0EDH,73H
  83:					DW	?NNNN
  84:					ENDM
  85:				SIXD	MACRO	?NNNN	
  86:					DB	0DDH,22H
  87:					DW	?NNNN
  88:					ENDM
  89:				SIYD	MACRO	?NNNN	
  90:					DB	0FDH,22H
  91:					DW	?NNNN
  92:					ENDM
  93:				SPIX	MACRO		
  94:					DB	0DDH,0F9H
  95:					ENDM
  96:				SPIY	MACRO		
  97:					DB	0FDH,0F9H
  98:					ENDM
  99:				PUSHIX	MACRO		
 100:					DB	0DDH,0E5H
 101:					ENDM
 102:				PUSHIY	MACRO		
 103:					DB	0FDH,0E5H
 104:					ENDM
 105:				POPIX	MACRO		
 106:					DB	0DDH,0E1H
 107:					ENDM
 108:				POPIY	MACRO		
 109:					DB	0FDH,0E1H
 110:					ENDM
 111:				EXAF	MACRO		
 112:					DB	08H
 113:					ENDM
 114:				EXX	MACRO		
 115:					DB	0D9H
 116:					ENDM
 117:				XTIX	MACRO		
 118:					DB	0DDH,0E3H
 119:					ENDM
 120:				XTIY	MACRO		
 121:					DB	0FDH,0E3H
 122:					ENDM
 123:				
 124:				LDI	MACRO		
 125:					DB	0EDH,0A0H
 126:					ENDM
 127:				LDIR	MACRO		
 128:					DB	0EDH,0B0H
 129:					ENDM
 130:				LDD	MACRO		
 131:					DB	0EDH,0A8H
 132:					ENDM
 133:				LDDR	MACRO		
 134:					DB	0EDH,0B8H
 135:					ENDM
 136:				CCI	MACRO		
 137:					DB	0EDH,0A1H
 138:					ENDM
 139:				CCIR	MACRO		
 140:					DB	0EDH,0B1H
 141:					ENDM
 142:				CCD	MACRO		
 143:					DB	0EDH,0A9H
 144:					ENDM
 145:				CCDR	MACRO		
 146:					DB	0EDH,0B9H
 147:					ENDM
 148:				
 149:				ADDX	MACRO	?D	
 150:					@CHK	?D
 151:					DB	0DDH,86H,?D
 152:					ENDM
 153:				ADDY	MACRO	?D	
 154:					@CHK	?D
 155:					DB	0FDH,86H,?D
 156:					ENDM
 157:				ADCX	MACRO	?D	
 158:					@CHK	?D
 159:					DB	0DDH,8EH,?D
 160:					ENDM
 161:				ADCY	MACRO	?D	
 162:					@CHK	?D
 163:					DB	0FDH,8EH,?D
 164:					ENDM
 165:				SUBX	MACRO	?D	
 166:					@CHK	?D
 167:					DB	0DDH,96H,?D
 168:					ENDM
 169:				SUBY	MACRO	?D	
 170:					@CHK	?D
 171:					DB	0FDH,96H,?D
 172:					ENDM
 173:				SBCX	MACRO	?D	
 174:					@CHK	?D
 175:					DB	0DDH,9EH,?D
 176:					ENDM
 177:				SBCY	MACRO	?D	
 178:					@CHK	?D
 179:					DB	0FDH,9EH,?D
 180:					ENDM
 181:				ANDX	MACRO	?D	
 182:					@CHK	?D
 183:					DB	0DDH,0A6H,?D
 184:					ENDM
 185:				ANDY	MACRO	?D	
 186:					@CHK	?D
 187:					DB	0FDH,0A6H,?D
 188:					ENDM
 189:				XORX	MACRO	?D	
 190:					@CHK	?D
 191:					DB	0DDH,0AEH,?D
 192:					ENDM
 193:				XORY	MACRO	?D	
 194:					@CHK	?D
 195:					DB	0FDH,0AEH,?D
 196:					ENDM
 197:				ORX	MACRO	?D	
 198:					@CHK	?D
 199:					DB	0DDH,0B6H,?D
 200:					ENDM
 201:				ORY	MACRO	?D	
 202:					@CHK	?D
 203:					DB	0FDH,0B6H,?D
 204:					ENDM
 205:				CMPX	MACRO	?D	
 206:					@CHK	?D
 207:					DB	0DDH,0BEH,?D
 208:					ENDM
 209:				CMPY	MACRO	?D	
 210:					@CHK	?D
 211:					DB	0FDH,0BEH,?D
 212:					ENDM
 213:				INRX	MACRO	?D	
 214:					@CHK	?D
 215:					DB	0DDH,34H,?D
 216:					ENDM
 217:				INRY	MACRO	?D	
 218:					@CHK	?D
 219:					DB	0FDH,34H,?D
 220:					ENDM
 221:				DCRX	MACRO	?D	
 222:					@CHK	?D
 223:					DB	0DDH,035H,?D
 224:					ENDM
 225:				DCRY	MACRO	?D	
 226:					@CHK	?D
 227:					DB	0FDH,35H,?D
 228:					ENDM
 229:				
 230:				NEG	MACRO		
 231:					DB	0EDH,44H
 232:					ENDM
 233:				IM0	MACRO		
 234:					DB	0EDH,46H
 235:					ENDM
 236:				IM1	MACRO		
 237:					DB	0EDH,56H
 238:					ENDM
 239:				IM2	MACRO		
 240:					DB	0EDH,5EH
 241:					ENDM
 242:				
 243:				
 244:     -	0000          	BC	EQU	0
 245:     -	0002          	DE	EQU	2
 246:     -	0004          	HL	EQU	4
 247:     -	0004          	IX	EQU	4	
 248:     -	0004          	IY	EQU	4	
 249:				DADC	MACRO	?R	
 250:					DB	0EDH,?R*8+4AH
 251:					ENDM
 252:				DSBC	MACRO	?R	
 253:					DB	0EDH,?R*8+42H
 254:					ENDM
 255:				DADX	MACRO	?R	
 256:					DB	0DDH,?R*8+09H
 257:					ENDM
 258:				DADY	MACRO	?R	
 259:					DB	0FDH,?R*8+09H
 260:					ENDM
 261:				INXIX	MACRO		
 262:					DB	0DDH,23H
 263:					ENDM
 264:				INXIY	MACRO		
 265:					DB	0FDH,23H
 266:					ENDM
 267:				DCXIX	MACRO		
 268:					DB	0DDH,2BH
 269:					ENDM
 270:				DCXIY	MACRO		
 271:					DB	0FDH,2BH
 272:					ENDM
 273:				
 274:				BIT	MACRO	?N,?R	
 275:					DB	0CBH,?N*8+?R+40H
 276:					ENDM
 277:				SETB	MACRO	?N,?R
 278:					DB	0CBH,?N*8+?R+0C0H
 279:					ENDM
 280:				RES	MACRO	?N,?R
 281:					DB	0CBH,?N*8+?R+80H
 282:					ENDM
 283:				
 284:				BITX	MACRO	?N,?D	
 285:					@CHK	?D
 286:					DB	0DDH,0CBH,?D,?N*8+46H
 287:					ENDM
 288:				BITY	MACRO	?N,?D	
 289:					@CHK	?D
 290:					DB	0FDH,0CBH,?D,?N*8+46H
 291:					ENDM
 292:				SETX	MACRO	?N,?D	
 293:					@CHK	?D
 294:					DB	0DDH,0CBH,?D,?N*8+0C6H
 295:					ENDM
 296:				SETY	MACRO	?N,?D	
 297:					@CHK	?D
 298:					DB	0FDH,0CBH,?D,?N*8+0C6H
 299:					ENDM
 300:				RESX	MACRO	?N,?D	
 301:					@CHK	?D
 302:					DB	0DDH,0CBH,?D,?N*8+86H
 303:					ENDM
 304:				RESY	MACRO	?N,?D	
 305:					@CHK	?D
 306:					DB	0FDH,0CBH,?D,?N*8+86H
 307:					ENDM
 308:				
 309:				JR	MACRO	?N
 310:					DB	18H,?N-$-1
 311:					ENDM
 312:				JRC	MACRO	?N
 313:					DB	38H,?N-$-1
 314:					ENDM
 315:				JRNC	MACRO	?N
 316:					DB	30H,?N-$-1
 317:					ENDM
 318:				JRZ	MACRO	?N
 319:					DB	28H,?N-$-1
 320:					ENDM
 321:				JRNZ	MACRO	?N
 322:					DB	20H,?N-$-1
 323:					ENDM
 324:				DJNZ	MACRO	?N
 325:					DB	10H,?N-$-1
 326:					ENDM
 327:				
 328:				PCIX	MACRO		
 329:					DB	0DDH,0E9H
 330:					ENDM
 331:				PCIY	MACRO		
 332:					DB	0FDH,0E9H
 333:					ENDM
 334:				
 335:				RETI	MACRO		
 336:					DB	0EDH,4DH
 337:					ENDM
 338:				RETN	MACRO		
 339:					DB	0EDH,45H
 340:					ENDM
 341:				
 342:				INP	MACRO	?R	
 343:					DB	0EDH,?R*8+40H
 344:					ENDM
 345:				OUTP	MACRO	?R	
 346:					DB	0EDH,?R*8+41H
 347:					ENDM
 348:				INI	MACRO		
 349:					DB	0EDH,0A2H
 350:					ENDM
 351:				INIR	MACRO		
 352:					DB	0EDH,0B2H
 353:					ENDM
 354:				IND	MACRO		
 355:					DB	0EDH,0AAH
 356:					ENDM
 357:				INDR	MACRO		
 358:					DB	0EDH,0BAH
 359:					ENDM
 360:				OUTI	MACRO		
 361:					DB	0EDH,0A3H
 362:					ENDM
 363:				OUTIR	MACRO		
 364:					DB	0EDH,0B3H
 365:					ENDM
 366:				OUTD	MACRO		
 367:					DB	0EDH,0ABH
 368:					ENDM
 369:				OUTDR	MACRO		
 370:					DB	0EDH,0BBH
 371:					ENDM
 372:				
 373:				
 374:				RLCR	MACRO	?R	
 375:					DB	0CBH, 00H + ?R
 376:					ENDM
 377:				RLCX	MACRO	?D	
 378:					@CHK	?D
 379:					DB	0DDH, 0CBH, ?D, 06H
 380:					ENDM
 381:				RLCY	MACRO	?D	
 382:					@CHK	?D
 383:					DB	0FDH, 0CBH, ?D, 06H
 384:					ENDM
 385:				RALR	MACRO	?R	
 386:					DB	0CBH, 10H+?R
 387:					ENDM
 388:				RALX	MACRO	?D	
 389:					@CHK	?D
 390:					DB	0DDH, 0CBH, ?D, 16H
 391:					ENDM
 392:				RALY	MACRO	?D	
 393:					@CHK	?D
 394:					DB	0FDH, 0CBH, ?D, 16H
 395:					ENDM
 396:				RRCR	MACRO	?R	
 397:					DB	0CBH, 08H + ?R
 398:					ENDM
 399:				RRCX	MACRO	?D	
 400:					@CHK	?D
 401:					DB	0DDH, 0CBH, ?D, 0EH
 402:					ENDM
 403:				RRCY	MACRO	?D	
 404:					@CHK	?D
 405:					DB	0FDH, 0CBH, ?D, 0EH
 406:					ENDM
 407:				RARR	MACRO	?R	
 408:					DB	0CBH, 18H + ?R
 409:					ENDM
 410:				RARX	MACRO	?D	
 411:					@CHK	?D
 412:					DB	0DDH, 0CBH, ?D, 1EH
 413:					ENDM
 414:				RARY	MACRO	?D	
 415:					@CHK	?D
 416:					DB	0FDH, 0CBH, ?D, 1EH
 417:					ENDM
 418:				SLAR	MACRO	?R	
 419:					DB	0CBH, 20H + ?R
 420:					ENDM
 421:				SLAX	MACRO	?D	
 422:					@CHK	?D
 423:					DB	0DDH, 0CBH, ?D, 26H
 424:					ENDM
 425:				SLAY	MACRO	?D	
 426:					@CHK	?D
 427:					DB	0FDH, 0CBH, ?D, 26H
 428:					ENDM
 429:				SRAR	MACRO	?R	
 430:					DB	0CBH, 28H+?R
 431:					ENDM
 432:				SRAX	MACRO	?D	
 433:					@CHK	?D
 434:					DB	0DDH, 0CBH, ?D, 2EH
 435:					ENDM
 436:				SRAY	MACRO	?D	
 437:					@CHK	?D
 438:					DB	0FDH, 0CBH, ?D, 2EH
 439:					ENDM
 440:				SRLR	MACRO	?R	
 441:					DB	0CBH, 38H + ?R
 442:					ENDM
 443:				SRLX	MACRO	?D	
 444:					@CHK	?D
 445:					DB	0DDH, 0CBH, ?D, 3EH
 446:					ENDM
 447:				SRLY	MACRO	?D	
 448:					@CHK	?D
 449:					DB	0FDH, 0CBH, ?D, 3EH
 450:					ENDM
 451:				RLD	MACRO		
 452:					DB	0EDH, 6FH
 453:					ENDM
 454:				RRD	MACRO		
 455:					DB	0EDH, 67H
 456:					ENDM
**** cbios.asm ****
   6:					maclib DISKDEF
**** DISKDEF.lib ****
   1:				;	CP/M 2.0 disk re-definition library
   2:				;
   3:				;	Copyright (c) 1979
   4:				;	Digital Research
   5:				;	Box 579
   6:				;	Pacific Grove, CA
   7:				;	93950
   8:				;
   9:				;	BUGS fixed 07/07/82	JDW Software Source.
  10:				;
  11:				;	Unterminated IF in 'diskdef' macro itself
  12:				;
  13:				;	Unecessary complexity of 'lds' & 'defds' macros
  14:				;	'lds' now does both jobs, 'defds' removed (not needed).
  15:				;
  16:				;
  17:				;	'comment' dummy in 'ddw' & 'ddb' altered to 'messag'
  18:				;	because of apparent BUG in Macro-80 ver 3.44
  19:				;
  20:				;	'eq' 'gt' 'ge' etc replace '=' '>' '>=' in conditionals
  21:				;
  22:				;
  23:				;
  24:				;	Now will work with Macro-80 ver 3.44 as well as MAC.
  25:				;	if using M80, may need to alter 'set' psuedo-op
  26:				;	to aset equivalent if inside a .z80.
  27:				;
  28:				;
  29:				;
  30:				;	CP/M logical disk drives are defined using the
  31:				;	macros given below, where the sequence of calls
  32:				;	is:
  33:				;
  34:				;	disks	n
  35:				;	diskdef parameter-list-0
  36:				;	diskdef parameter-list-1
  37:				;	...
  38:				;	diskdef parameter-list-n
  39:				;	endef
  40:				;
  41:				;	where n is the number of logical disk drives attached
  42:				;	to the CP/M system, and parameter-list-i defines the
  43:				;	characteristics of the ith drive (i=0,1,...,n-1)
  44:				;
  45:				;	each parameter-list-i takes the form
  46:				;		dn,fsc,lsc,[skf],bls,dks,dir,cks,ofs,[0]
  47:				;	where
  48:				;	dn	is the disk number 0,1,...,n-1
  49:				;	fsc	is the first sector number (usually 0 or 1)
  50:				;	lsc	is the last sector number on a track
  51:				;	skf	is optional "skew factor" for sector translate
  52:				;	bls	is the data block size (1024,2048,...,16384)
  53:				;	dks	is the disk size in bls increments (word)
  54:				;	dir	is the number of directory elements (word)
  55:				;	cks	is the number of dir elements to checksum
  56:				;	ofs	is the number of tracks to skip (word)
  57:				;	[0]	is an optional 0 which forces 16K/directory entry
  58:				;
  59:				;	for convenience, the form
  60:				;		dn,dm
  61:				;	defines disk dn as having the same characteristics as
  62:				;	a previously defined disk dm.
  63:				;
  64:				;	a standard four drive CP/M system is defined by
  65:				;		disks	4
  66:				;		diskdef 0,1,26,6,1024,243,64,64,2
  67:				;	dsk	set	0
  68:				;		rept	3
  69:				;	dsk	set	dsk+1
  70:				;		diskdef %dsk,0
  71:				;		endm
  72:				;		endef
  73:				;
  74:				;	the value of "begdat" at the end of assembly defines the
  75:				;	beginning of the uninitialize ram area above the bios,
  76:				;	while the value of "enddat" defines the next location
  77:				;	following the end of the data area.  the size of this
  78:				;	area is given by the value of "datsiz" at the end of the
  79:				;	assembly.  note that the allocation vector will be quite
  80:				;	large if a large disk size is defined with a small block
  81:				;	size.
  82:				;
  83:				dskhdr	macro	dn
  84:				;;	define a single disk header list
  85:				dpe&dn: dw	xlt&dn,0000h	;translate table
  86:					dw	0000h,0000h	;scratch area
  87:					dw	dirbuf,dpb&dn	;dir buff,parm block
  88:					dw	csv&dn,alv&dn	;check, alloc vectors
  89:					endm
  90:				;
  91:				disks	macro	nd
  92:				;;	define nd disks
  93:				ndisks	set	nd	;;for later reference
  94:				dpbase	equ	$	;base of disk parameter blocks
  95:				;;	generate the nd elements
  96:				dsknxt	set	0
  97:					rept	nd
  98:					dskhdr	%dsknxt
  99:				dsknxt	set	dsknxt+1
 100:					endm
 101:					endm
 102:				;
 103:				dpbhdr	macro	dn
 104:				dpb&dn	equ	$		;disk parm block
 105:					endm
 106:				;
 107:				ddb	macro	data,messag
 108:				;;	define a db statement
 109:					db	data		messag
 110:					endm
 111:				;
 112:				ddw	macro	data,messag
 113:				;;	define a dw statement
 114:					dw	data		messag
 115:					endm
 116:				;
 117:				gcd	macro	m,n
 118:				;;	greatest common divisor of m,n
 119:				;;	produces value gcdn as result
 120:				;;	(used in sector translate table generation)
 121:				gcdm	set	m	;;variable for m
 122:				gcdn	set	n	;;variable for n
 123:				gcdr	set	0	;;variable for r
 124:					rept	65535
 125:				gcdx	set	gcdm/gcdn
 126:				gcdr	set	gcdm - gcdx*gcdn
 127:					if	gcdr eq 0
 128:					exitm
 129:					endif
 130:				gcdm	set	gcdn
 131:				gcdn	set	gcdr
 132:					endm
 133:					endm
 134:				;
 135:				diskdef macro	dn,fsc,lsc,skf,bls,dks,dir,cks,ofs,k16
 136:				;;	generate the set statements for later tables
 137:					if	nul lsc
 138:				;;	current disk dn same as previous fsc
 139:				dpb&dn	equ	dpb&fsc ;equivalent parameters
 140:				als&dn	equ	als&fsc ;same allocation vector size
 141:				css&dn	equ	css&fsc ;same checksum vector size
 142:				xlt&dn	equ	xlt&fsc ;same translate table
 143:					else
 144:				secmax	set	lsc-(fsc)	;;sectors 0...secmax
 145:				sectors set	secmax+1;;number of sectors
 146:				als&dn	set	(dks)/8 ;;size of allocation vector
 147:					if	((dks) mod 8) ne 0
 148:				als&dn	set	als&dn+1
 149:					endif
 150:				css&dn	set	(cks)/4 ;;number of checksum elements
 151:				;;	generate the block shift value
 152:				blkval	set	bls/128 ;;number of sectors/block
 153:				blkshf	set	0	;;counts right 0's in blkval
 154:				blkmsk	set	0	;;fills with 1's from right
 155:					rept	16	;;once for each bit position
 156:					if	blkval eq 1
 157:					exitm
 158:					endif
 159:				;;	otherwise, high order 1 not found yet
 160:				blkshf	set	blkshf+1
 161:				blkmsk	set	(blkmsk shl 1) or 1
 162:				blkval	set	blkval/2
 163:					endm
 164:				;;	generate the extent mask byte
 165:				blkval	set	bls/1024	;;number of kilobytes/block
 166:				extmsk	set	0	;;fill from right with 1's
 167:					rept	16
 168:					if	blkval eq 1
 169:					exitm
 170:					endif
 171:				;;	otherwise more to shift
 172:				extmsk	set	(extmsk shl 1) or 1
 173:				blkval	set	blkval/2
 174:					endm
 175:				;;	may be double byte allocation
 176:					if	(dks) gt 256
 177:				extmsk	set	(extmsk shr 1)
 178:					endif
 179:				;;	may be optional [0] in last position
 180:					if	not nul k16
 181:				extmsk	set	k16
 182:					endif
 183:				;;	now generate directory reservation bit vector
 184:				dirrem	set	dir	;;# remaining to process
 185:				dirbks	set	bls/32	;;number of entries per block
 186:				dirblk	set	0	;;fill with 1's on each loop
 187:					rept	16
 188:					if	dirrem eq 0
 189:					exitm
 190:					endif
 191:				;;	not complete, iterate once again
 192:				;;	shift right and add 1 high order bit
 193:				dirblk	set	(dirblk shr 1) or 8000h
 194:					if	dirrem gt dirbks
 195:				dirrem	set	dirrem-dirbks
 196:					else
 197:				dirrem	set	0
 198:					endif
 199:					endm
 200:					dpbhdr	dn	;;generate equ $
 201:					ddw	%sectors,<;sec per track>
 202:					ddb	%blkshf,<;block shift>
 203:					ddb	%blkmsk,<;block mask>
 204:					ddb	%extmsk,<;extnt mask>
 205:					ddw	%(dks)-1,<;disk size-1>
 206:					ddw	%(dir)-1,<;directory max>
 207:					ddb	%dirblk shr 8,<;alloc0>
 208:					ddb	%dirblk and 0ffh,<;alloc1>
 209:					ddw	%(cks)/4,<;check size>
 210:					ddw	%ofs,<;offset>
 211:				;;	generate the translate table, if requested
 212:					if	nul skf
 213:				xlt&dn	equ	0		;no xlate table
 214:					else
 215:					if	skf eq 0
 216:				xlt&dn	equ	0		;no xlate table
 217:					else
 218:				;;	generate the translate table
 219:				nxtsec	set	0	;;next sector to fill
 220:				nxtbas	set	0	;;moves by one on overflow
 221:					gcd	%sectors,skf
 222:				;;	gcdn = gcd(sectors,skew)
 223:				neltst	set	sectors/gcdn
 224:				;;	neltst is number of elements to generate
 225:				;;	before we overlap previous elements
 226:				nelts	set	neltst	;;counter
 227:				xlt&dn	equ	$		;translate table
 228:					rept	sectors ;;once for each sector
 229:					if	sectors lt 256
 230:					ddb	%nxtsec+(fsc)
 231:					else
 232:					ddw	%nxtsec+(fsc)
 233:					endif
 234:				nxtsec	set	nxtsec+(skf)
 235:					if	nxtsec ge sectors
 236:				nxtsec	set	nxtsec-sectors
 237:					endif
 238:				nelts	set	nelts-1
 239:					if	nelts eq 0
 240:				nxtbas	set	nxtbas+1
 241:				nxtsec	set	nxtbas
 242:				nelts	set	neltst
 243:					endif
 244:					endm
 245:					endif	;;end of nul fac test
 246:					endif	;;end of nul bls test
 247:					endif	;; BUG for end of repeat last defn.
 248:					endm
 249:				;
 250:				lds	macro	lb,dn,val
 251:				lb&dn:	ds	val&dn
 252:					endm
 253:				;
 254:				endef	macro
 255:				;;	generate the necessary ram data areas
 256:				begdat	equ	$
 257:				dirbuf: ds	128	;directory access buffer
 258:				dsknxt	set	0
 259:					rept	ndisks	;;once for each disk
 260:					lds	alv,%dsknxt,als
 261:					lds	csv,%dsknxt,css
 262:				dsknxt	set	dsknxt+1
 263:					endm
 264:				enddat	equ	$
 265:				datsiz	equ	$-begdat
 266:				;;	db 0 at this point forces hex record
 267:					endm
 268:				;
**** cbios.asm ****
   7:				
   8:				;	utility macro to compute sector mask
   9:				smask	macro	hblk
  10:				;;	compute log2(hblk), return @x as result
  11:				;;	(2 ** @x = hblk on return)
  12:				@y	set	hblk
  13:				@x	set	0
  14:				;;	count right shifts of @y until = 1
  15:					rept	8
  16:					if	@y = 1
  17:					exitm
  18:					endif
  19:				;;	@y is not 1, shift right one position
  20:				@y	set	@y shr 1
  21:				@x	set	@x + 1
  22:					endm
  23:					endm
  24:				
  25:     -	002F          	msize	equ	47		;cp/m version memory size in kilobytes
  26:				;
  27:				;	"bias" is address offset from 3400h for memory systems
  28:				;	than 16k (referred to as"b" throughout the text)
  29:				;
  30:     -	6C00          	bias	equ	(msize-20)*1024
  31:     -	A000          	ccp	equ	3400h+bias	;base of ccp
  32:     -	A806          	bdos	equ	ccp+806h	;base of bdos
  33:     -	B600          	bios	equ	ccp+1600h	;base of bios
  34:     -	0004          	cdisk	equ	0004h		;current disk number 0=a,... l5=p
  35:     -	0003          	iobyte	equ	0003h		;intel i/o byte
  36:				;
  37:     -	B600          		org	bios		;origin of this program
  38:     -	002C          	nsects	equ	($-ccp)/128	;warm start sector count
  39:				
  40:     -	0008          	bs	equ	8
  41:     -	000D          	cr	equ	13
  42:     -	000A          	lf	equ	10
  43:				
  44:     -	000A          	fdcctrl	equ	0Ah	; Control port (TC)
  45:     -	000B          	fdcdata	equ	0Bh	; Data port
  46:     -	000C          	fdcstat	equ	0Ch	; Status port
  47:     -	0031          	irqstat	equ	031h	; IRQ status fro FDC
  48:				
  49:     -	0030          	porta	equ	030h	; PORTA for keyboard
  50:     -	0031          	portb	equ	031h	; PORTB for disk and keyboard control
  51:     -	0032          	cmda	equ	032h	; Command for PORTA
  52:     -	0033          	cmdb	equ	033h	; Command for PORTB
  53:				
  54:     -	0800          	blksiz	equ	2048		;CP/M allocation size
  55:     -	0100          	hstsiz	equ	256		;host disk sector size
  56:     -	0010          	hstsph	equ	16		;sectors per head
  57:     -	0002          	hsthpc	equ	2		;heads per cylinder
  58:     -	0020          	hstspt	equ	hstsph*hsthpc	;host disk sectors/trk
  59:     -	0002          	hstblk	equ	hstsiz/128	;CP/M sects/host buff
  60:     -	0040          	cpmspt	equ	hstblk*hstspt	;CP/M sectors/track
  61:     -	0001          	secmsk	equ	hstblk-1	;sector mask
  62:     -	        		smask	hstblk		;compute sector mask
  63:     -	0001          	secshf	equ	@x		;log2(hstblk)
  64:				;
  65:     -	0000          	wrall:	equ	0		;write to allocated
  66:     -	0001          	wrdir:	equ	1		;write to directory
  67:     -	0002          	wrual:	equ	2		;write to unallocated
  68:				
  69:				
  70:				;
  71:				;	jump vector for individual subroutines
  72:				;
  73:    0+10	B600  C333B6  		jmp	boot	;cold start
  74:   10+10	B603  C352B6  	wboote:	jmp	wboot	;warm start
  75:   20+10	B606  C3BBB6  		jmp	const	;console status
  76:   30+10	B609  C3C9B6  		jmp	conin	;console character in
  77:   40+10	B60C  C3E0B6  		jmp	conout	;console character out
  78:   50+10	B60F  C34BB7  		jmp	list	;list character out
  79:   60+10	B612  C34EB7  		jmp	punch	;punch character out
  80:   70+10	B615  C34FB7  		jmp	reader	;reader character out
  81:   80+10	B618  C354B7  		jmp	home	;move head to home position
  82:   90+10	B61B  C371B7  		jmp	seldsk	;select disk
  83:  100+10	B61E  C381B7  		jmp	settrk	;set track number
  84:  110+10	B621  C388B7  		jmp	setsec	;set sector number
  85:  120+10	B624  C38DB7  		jmp	setdma	;set dma address
  86:  130+10	B627  C396B7  		jmp	read	;read disk
  87:  140+10	B62A  C3AAB7  		jmp	write	;write disk
  88:  150+10	B62D  C34CB7  		jmp	listst	;return list status
  89:  160+10	B630  C393B7  		jmp	sectran	;sector translate
  90:				
  91:				
  92:				;
  93:				;	end of fixed tables
  94:				;
  95:				;	individual subroutines to perform each function
  96:  170+4	B633  F3      	boot:	di
  97:  174+10	B634  317FBA  		lxi	sp, stack
  98:  184+7	B637  3E01    		mvi	a, 01h		;CRT is the default device
  99:  191+13	B639  320300  		sta	iobyte		;clear the iobyte
 100:  204+4	B63C  AF      		xra	a		;zero in the accum
 101:  208+13	B63D  320400  		sta	cdisk		;select disk zero
 102:  221+13	B640  329ABB  		sta	hstact		;host buffer inactive
 103:  234+13	B643  329CBB  		sta	unacnt		;clear unalloc count
 104:  247+10	B646  1148BA  		lxi	d,mesg		; Signon message
 105:  257+17	B649  CDEDB9  		call	print
 106:  274+17	B64C  CD7BB9  		call	fdcrst		;Initialise FDC
 107:  291+10	B64F  C396B6  		jmp	gocpm		;initialize and go to cp/m
 108:				;
 109:     -	B652          	wboot:	;simplest case is to read the disk until all sectors loaded
 110:  301+4	B652  F3      		di
 111:  305+10	B653  318000  		lxi	sp, 80h		;use space below buffer for stack
 112:  315+17	B656  CD7BB9  		call	fdcrst		;Initialise FDC
 113:  332+7	B659  0E00    		mvi	c, 0		;select disk 0
 114:  339+17	B65B  CD71B7  		call	seldsk
 115:  356+17	B65E  CD54B7  		call	home		;go to track 00
 116:				;
 117:  373+7	B661  062C    		mvi	b, nsects	;b counts * of sectors to load
 118:  380+7	B663  0E00    		mvi	c, 0		;c has the current track number
 119:  387+7	B665  1602    		mvi	d, 2		;d has the next sector to read
 120:				;	note that we begin by reading track 0, sector 2 since sector 1
 121:				;	contains the cold start loader, which is skipped in a warm start
 122:  394+10	B667  2100A0  		lxi	h, ccp		;base of cp/m (initial load point)
 123:  404+7	B66A  0E00    		mvi	c, 0	; start at sector 1, head 0, track 0
 124:  411+10	B66C  110100  		lxi	d, 1
 125:  421+7	B66F  065F    		mvi	b, (0FFFFh-ccp)/hstsiz
 126:  428+5	B671  7B      	rdloop	mov	a, e
 127:  433+13	B672  3298BB  		sta	hstsec
 128:  446+5	B675  7A      		mov	a, d
 129:  451+13	B676  3296BB  		sta	hsttrk
 130:  464+7	B679  3E00    		mvi	a, 0
 131:  471+13	B67B  3297BB  		sta	hsttrk+1
 132:  484+11	B67E  C5      		push	bc
 133:  495+11	B67F  D5      		push	de
 134:  506+17	B680  CDC2B8  		call	readhst
 135:  523+10	B683  D1      		pop	de
 136:  533+10	B684  C1      		pop	bc
 137:  543+5	B685  05      		dcr	b
 138:  548+10	B686  CA96B6  		jz	gocpm	; Go to CP/M when done
 139:  558+5	B689  1C      		inr	e
 140:  563+7	B68A  3E20    		mvi	a, hstspt
 141:  570+4	B68C  BB      		cmp	e
 142:  574+10	B68D  C271B6  		jnz	rdloop
 143:  584+7	B690  1E00    		mvi	e, 0
 144:  591+5	B692  14      		inr	d
 145:  596+10	B693  F271B6  		jp	rdloop
 146:				;
 147:				;	end of	load operation, set parameters and go to cp/m
 148:  606+17	B696  CDF8B9  	gocpm:	call	kbinit
 149:  623+7	B699  3EC3    		mvi	a, 0c3h		;c3 is a jmp instruction
 150:  630+13	B69B  320000  		sta	0		;for jmp to wboot
 151:  643+10	B69E  2103B6  		lxi	h, wboote	;wboot entry point
 152:  653+16	B6A1  220100  		shld	1		;set address field for jmp at 0
 153:				;
 154:  669+13	B6A4  320500  		sta	5		;for jmp to bdos
 155:  682+10	B6A7  2106A8  		lxi	h, bdos		;bdos entry point
 156:  692+16	B6AA  220600  		shld	6		;address field of Jump at 5 to bdos
 157:				;
 158:  708+10	B6AD  018000  		lxi	b, 80h		;default dma address is 80h
 159:  718+17	B6B0  CD8DB7  		call	setdma
 160:				;
 161:  735+4	B6B3  FB      		ei			;enable the interrupt system
 162:  739+13	B6B4  3A0400  		lda	cdisk		;get current disk number
 163:  752+5	B6B7  4F      		mov	c, a		;send to the ccp
 164:  757+10	B6B8  C300A0  		jmp	ccp		;go to cp/m for further processing
 165:				;
 166:				;
 167:				; I/O handlers
 168:				; 
 169:				
 170:				; Console status
 171:  767+13	B6BB  3A30BB  	const:	lda	inptr		; If inptr and outptr are the same
 172:  780+5	B6BE  47      		mov	b, a
 173:  785+13	B6BF  3A31BB  		lda	outptr
 174:  798+4	B6C2  B8      		cmp	b
 175:  802+7	B6C3  3E00    		mvi	a, 0
 176:  809+5+6	B6C5  C8      		rz			; Return with no characters ready
 177:  814+7	B6C6  3EFF    		mvi	a, 0FFh
 178:  821+10	B6C8  C9      		ret
 179:				
 180:				; Console in
 181:  831+17	B6C9  CDBBB6  	conin	call	const		; Wait for availability
 182:     -	B6CC  28FB    		jrz	conin
 183:  848+13	B6CE  3A31BB  		lda	outptr
 184:  861+5	B6D1  5F      		mov	e, a		; Offset within buffer
 185:  866+7	B6D2  1600    		mvi	d, 0
 186:  873+10	B6D4  2110BB  		lxi	h, buffer	; Buffer origin
 187:  883+10	B6D7  19      		dad	d
 188:  893+5	B6D8  3C      		inr	a
 189:  898+7	B6D9  E61F    		ani	31		; Modulo 32
 190:  905+13	B6DB  3231BB  		sta	outptr
 191:					;mov	e, a
 192:					;mvi	d, 0
 193:					;lxi	h, keytab	; Get scancode translation from keytab
 194:					;dad	d
 195:  918+7	B6DE  7E      		mov	a, m
 196:  925+10	B6DF  C9      		ret
 197:				
 198:				; Console out
 199:  935+7	B6E0  3E0D    	conout	mvi	a, cr
 200:  942+4	B6E2  B9      		cmp	c
 201:     -	B6E3  2831    		jrz	concr
 202:  946+7	B6E5  3E0A    		mvi	a, lf
 203:  953+4	B6E7  B9      		cmp	c
 204:     -	B6E8  2838    		jrz	conlf
 205:  957+7	B6EA  3E08    		mvi	a, bs
 206:  964+4	B6EC  B9      		cmp	c
 207:     -	B6ED  282C    		jrz	conbs
 208:  968+7	B6EF  3E20    		mvi	a, ' '
 209:  975+4	B6F1  B9      		cmp	c
 210:     -	B6F2  2002    		jrnz	conout1
 211:  979+7	B6F4  0E00    		mvi	c, 0		; Blank for space
 212:  986+11	B6F6  D5      	conout1	push	d
 213:  997+16	B6F7  2A52B7  		lhld	cursor
 214: 1013+11	B6FA  E5      		push	h
 215: 1024+10	B6FB  1100E0  		lxi	d, 0E000h	; CRT base address
 216: 1034+10	B6FE  19      		dad	d
 217: 1044+7	B6FF  71      		mov	m, c
 218: 1051+10	B700  E1      		pop	h
 219: 1061+10	B701  D1      		pop	d
 220: 1071+5	B702  23      		inx	h
 221: 1076+16	B703  2252B7  		shld	cursor
 222: 1092+7	B706  3E50    		mvi	a, 80		; 80 columns
 223: 1099+4	B708  BD      		cmp	l
 224: 1103+5+6	B709  C0      		rnz
 225: 1108+7	B70A  2E00    		mvi	l, 0		; Newline
 226: 1115+5	B70C  24      		inr	h
 227: 1120+16	B70D  2252B7  		shld	cursor
 228: 1136+10	B710  2153B7  		lxi	h, cursor+1
 229: 1146+7	B713  7E      		mov	a, m
 230:     -	B714  1811    		jr	scroll
 231:				
 232: 1153+4	B716  AF      	concr:	xra	a		; Low byte is column
 233: 1157+13	B717  3252B7  		sta	cursor
 234: 1170+10	B71A  C9      		ret
 235:					
 236: 1180+10	B71B  2152B7  	conbs:	lxi	h, cursor	; Point at cursor column
 237: 1190+10	B71E  35      		dcr	m		; Backspace it
 238: 1200+5+6	B71F  D0      		rnc			; Too far?
 239: 1205+10	B720  34      		inr	m		; Undo
 240: 1215+10	B721  C9      		ret
 241:					
 242: 1225+10	B722  2153B7  	conlf:	lxi	h, cursor+1	; Newline and scroll
 243: 1235+10	B725  34      		inr	m		; High byte is line
 244: 1245+7	B726  7E      		mov	a, m
 245:				
 246: 1252+7	B727  FE18    	scroll:	cpi	24
 247: 1259+5+6	B729  D8      		rc
 248: 1264+10	B72A  35      		dcr	m
 249:				
 250: 1274+7	B72B  3EE0    		mvi	a, 0E0h
 251: 1281+11	B72D  F5      	scrll:	push	a
 252: 1292+5	B72E  57      		mov	d, a
 253: 1297+7	B72F  1E00    		mvi	e, 0
 254: 1304+5	B731  3C      		inr	a
 255: 1309+5	B732  67      		mov	h, a
 256: 1314+7	B733  2E00    		mvi	l, 0
 257: 1321+10	B735  015000  		lxi	b, 80
 258:     -	B738  EDB0    		ldir
 259: 1331+10	B73A  F1      		pop	a
 260: 1341+5	B73B  3C      		inr	a
 261: 1346+7	B73C  FEF7    		cpi	0F7h
 262:     -	B73E  20ED    		jrnz	scrll
 263:					
 264: 1353+4	B740  AF      		xra	a		; Last line blanked
 265: 1357+10	B741  2100F7  		lxi	h, 0F700h
 266: 1367+7	B744  0650    		mvi	b, 80
 267: 1374+7	B746  77      	endlin:	mov	m, a
 268: 1381+5	B747  23      		inx	h
 269:     -	B748  10FC    		djnz	endlin
 270: 1386+10	B74A  C9      		ret
 271:					
 272:				
 273:				
 274:				; List out
 275: 1396+10	B74B  C9      	list:	ret
 276:				
 277:				; List status
 278: 1406+4	B74C  AF      	listst	xra	a
 279: 1410+10	B74D  C9      		ret
 280:				
 281:				; Punch out
 282: 1420+10	B74E  C9      	punch	ret
 283:				
 284:				; Reader in
 285: 1430+7	B74F  3E1A    	reader	mvi	a, 01Ah		; Return EOF for reader device
 286: 1437+10	B751  C9      		ret
 287:				
 288:				
 289:     -	B752  0000    	cursor	dw	0		; Cursor position
 290:				;
 291:				;
 292:				;	i/o drivers for the disk follow
 293:				;	for now, we will simply store the parameters away for use
 294:				;	in the read and write	subroutines
 295:				;
 296:					;home the selected disk
 297: 1447+13	B754  3A9BBB  	home:	lda	hstwrt	;check for pending write
 298: 1460+4	B757  B7      		ora	a
 299: 1464+10	B758  C25EB7  		jnz	homed
 300: 1474+13	B75B  329ABB  		sta	hstact	;clear host active flag
 301: 1487+10	B75E  010000  	homed:	lxi	b, 0
 302: 1497+17	B761  CD81B7  		call	settrk
 303:					
 304: 1514+7	B764  3E07    		mvi	a, 007h		; Recalibrate
 305: 1521+17	B766  CDCFB9  		call	fdcio
 306: 1538+7	B769  3E01    		mvi	a, 1		; Permanently on drive 1 for now
 307: 1545+17	B76B  CDCFB9  		call	fdcio
 308:					
 309: 1562+10	B76E  C335B9  		jmp	waitirq
 310:					
 311:					;ret
 312:				;
 313:     -	B771          	seldsk:
 314:					;select disk
 315: 1572+5	B771  79      		mov	a,c		;selected disk number
 316: 1577+13	B772  3291BB  		sta	sekdsk		;seek disk number
 317: 1590+5	B775  6F      		mov	l,a		;disk number to HL
 318: 1595+7	B776  2600    		mvi	h,0
 319: 1602+40	B778  29292929		rept	4		;multiply by 16
 322: 1642+10	B77C  1132BB  		lxi	d,dpbase	;base of parm block
 323: 1652+10	B77F  19      		dad	d		;hl=.dpb(curdsk)
 324: 1662+10	B780  C9      		ret
 325:					;
 326:     -	B781          	settrk:	;set track given by register bc
 327:					;mov	h,b
 328: 1672+7	B781  2600    		mvi	h,0
 329: 1679+5	B783  69      		mov	l,c
 330: 1684+16	B784  2292BB  		shld	sektrk
 331: 1700+10	B787  C9      		ret
 332:				;
 333:     -	B788          	setsec:
 334:					;set sector given by register c 
 335: 1710+5	B788  79      		mov	a,c
 336: 1715+13	B789  3294BB  		sta	seksec		;sector to seek
 337:					;jmp	phex
 338: 1728+10	B78C  C9      		ret
 339:				
 340:     -	B78D          	setdma:
 341:					;set dma address given by BC
 342: 1738+5	B78D  60      		mov	h,b
 343: 1743+5	B78E  69      		mov	l,c
 344: 1748+16	B78F  22A5BB  		shld	dmaadr
 345: 1764+10	B792  C9      		ret
 346:				;
 347:     -	B793          	sectran:
 348:					;translate sector number BC
 349: 1774+5	B793  60      		mov	h,b
 350: 1779+5	B794  69      		mov	l,c
 351: 1784+10	B795  C9      		ret
 352:				;
 353:				;*****************************************************
 354:				;*                                                   *
 355:				;*	The READ entry point takes the place of      *
 356:				;*	the previous BIOS defintion for READ.        *
 357:				;*                                                   *
 358:				;*****************************************************
 359:     -	B796          	read:
 360:					;read the selected CP/M sector
 361: 1794+4	B796  AF      		xra	a
 362: 1798+13	B797  329CBB  		sta	unacnt
 363: 1811+7	B79A  3E01    		mvi	a,1
 364: 1818+13	B79C  32A3BB  		sta	readop		;read operation
 365: 1831+13	B79F  32A2BB  		sta	rsflag		;must read data
 366: 1844+7	B7A2  3E02    		mvi	a,wrual
 367: 1851+13	B7A4  32A4BB  		sta	wrtype		;treat as unalloc
 368: 1864+10	B7A7  C315B8  		jmp	rwoper		;to perform the read
 369:				;
 370:				;*****************************************************
 371:				;*                                                   *
 372:				;*	The WRITE entry point takes the place of     *
 373:				;*	the previous BIOS defintion for WRITE.       *
 374:				;*                                                   *
 375:				;*****************************************************
 376:     -	B7AA          	write:
 377:					;write the selected CP/M sector
 378: 1874+4	B7AA  AF      		xra	a		;0 to accumulator
 379: 1878+13	B7AB  32A3BB  		sta	readop		;not a read operation
 380: 1891+5	B7AE  79      		mov	a,c		;write type in c
 381: 1896+13	B7AF  32A4BB  		sta	wrtype
 382: 1909+7	B7B2  FE02    		cpi	wrual		;write unallocated?
 383: 1916+10	B7B4  C2CEB7  		jnz	chkuna		;check for unalloc
 384:				;
 385:				;	write to unallocated, set parameters
 386: 1926+7	B7B7  3E10    		mvi	a,blksiz/128	;next unalloc recs
 387: 1933+13	B7B9  329CBB  		sta	unacnt
 388: 1946+13	B7BC  3A91BB  		lda	sekdsk		;disk to seek
 389: 1959+13	B7BF  329DBB  		sta	unadsk		;unadsk = sekdsk
 390: 1972+16	B7C2  2A92BB  		lhld	sektrk
 391: 1988+16	B7C5  229EBB  		shld	unatrk		;unatrk = sectrk
 392: 2004+13	B7C8  3A94BB  		lda	seksec
 393: 2017+13	B7CB  32A0BB  		sta	unasec		;unasec = seksec
 394:				;
 395:     -	B7CE          	chkuna:
 396:					;check for write to unallocated sector
 397: 2030+13	B7CE  3A9CBB  		lda	unacnt		;any unalloc remain?
 398: 2043+4	B7D1  B7      		ora	a
 399: 2047+10	B7D2  CA0DB8  		jz	alloc		;skip if not
 400:				;
 401:				;	more unallocated records remain
 402: 2057+5	B7D5  3D      		dcr	a		;unacnt = unacnt-1
 403: 2062+13	B7D6  329CBB  		sta	unacnt
 404: 2075+13	B7D9  3A91BB  		lda	sekdsk		;same disk?
 405: 2088+10	B7DC  219DBB  		lxi	h,unadsk
 406: 2098+7	B7DF  BE      		cmp	m		;sekdsk = unadsk?
 407: 2105+10	B7E0  C20DB8  		jnz	alloc		;skip if not
 408:				;
 409:				;	disks are the same
 410: 2115+10	B7E3  219EBB  		lxi	h,unatrk
 411: 2125+17	B7E6  CDB0B8  		call	sektrkcmp	;sektrk = unatrk?
 412: 2142+10	B7E9  C20DB8  		jnz	alloc		;skip if not
 413:				;
 414:				;	tracks are the same
 415: 2152+13	B7EC  3A94BB  		lda	seksec		;same sector?
 416: 2165+10	B7EF  21A0BB  		lxi	h,unasec
 417: 2175+7	B7F2  BE      		cmp	m		;seksec = unasec?
 418: 2182+10	B7F3  C20DB8  		jnz	alloc		;skip if not
 419:				;
 420:				;	match, move to next sector for future ref
 421: 2192+10	B7F6  34      		inr	m		;unasec = unasec+1
 422: 2202+7	B7F7  7E      		mov	a,m		;end of track?
 423: 2209+7	B7F8  FE40    		cmp	cpmspt		;count CP/M sectors
 424: 2216+10	B7FA  DA06B8  		jc	noovf		;skip if no overflow
 425:				;
 426:				;	overflow to next track
 427: 2226+10	B7FD  3600    		mvi	m,0		;unasec = 0
 428: 2236+16	B7FF  2A9EBB  		lhld	unatrk
 429: 2252+5	B802  23      		inx	h
 430: 2257+16	B803  229EBB  		shld	unatrk		;unatrk = unatrk+1
 431:				;
 432:     -	B806          	noovf:
 433:					;match found, mark as unnecessary read
 434: 2273+4	B806  AF      		xra	a		;0 to accumulator
 435: 2277+13	B807  32A2BB  		sta	rsflag		;rsflag = 0
 436: 2290+10	B80A  C315B8  		jmp	rwoper		;to perform the write
 437:				;
 438:     -	B80D          	alloc:
 439:					;not an unallocated record, requires pre-read
 440: 2300+4	B80D  AF      		xra	a		;0 to accum
 441: 2304+13	B80E  329CBB  		sta	unacnt		;unacnt = 0
 442: 2317+5	B811  3C      		inr	a		;1 to accum
 443: 2322+13	B812  32A2BB  		sta	rsflag		;rsflag = 1
 444:				;
 445:				;*****************************************************
 446:				;*                                                   *
 447:				;*	Common code for READ and WRITE follows       *
 448:				;*                                                   *
 449:				;*****************************************************
 450:     -	B815          	rwoper:
 451:					;enter here to perform the read/write
 452: 2335+4	B815  AF      		xra	a		;zero to accum
 453: 2339+13	B816  32A1BB  		sta	erflag		;no errors (yet)
 454: 2352+13	B819  3A94BB  		lda	seksec		;compute host sector
 455: 2365+8	B81C  B71F    		rept	secshf
 459: 2373+13	B81E  3299BB  		sta	sekhst		;host sector to seek
 460:				;
 461:				;	active host sector?
 462: 2386+10	B821  219ABB  		lxi	h,hstact	;host active flag
 463: 2396+7	B824  7E      		mov	a,m
 464: 2403+10	B825  3601    		mvi	m,1		;always becomes 1
 465: 2413+4	B827  B7      		ora	a		;was it already?
 466: 2417+10	B828  CA4FB8  		jz	filhst		;fill host if not
 467:				;
 468:				;	host buffer active, same as seek buffer?
 469: 2427+13	B82B  3A91BB  		lda	sekdsk
 470: 2440+10	B82E  2195BB  		lxi	h,hstdsk	;same disk?
 471: 2450+7	B831  BE      		cmp	m		;sekdsk = hstdsk?
 472: 2457+10	B832  C248B8  		jnz	nomatch
 473:				;
 474:				;	same disk, same track?
 475: 2467+10	B835  2196BB  		lxi	h,hsttrk
 476: 2477+17	B838  CDB0B8  		call	sektrkcmp	;sektrk = hsttrk?
 477: 2494+10	B83B  C248B8  		jnz	nomatch
 478:				;
 479:				;	same disk, same track, same buffer?
 480: 2504+13	B83E  3A99BB  		lda	sekhst
 481: 2517+10	B841  2198BB  		lxi	h,hstsec	;sekhst = hstsec?
 482: 2527+7	B844  BE      		cmp	m
 483: 2534+10	B845  CA6CB8  		jz	match		;skip if match
 484:				;
 485:     -	B848          	nomatch:
 486:					;proper disk, but not correct sector
 487: 2544+13	B848  3A9BBB  		lda	hstwrt		;host written?
 488: 2557+4	B84B  B7      		ora	a
 489: 2561+11+6	B84C  C4BCB8  		cnz	writehst	;clear host buff
 490:				;
 491:     -	B84F          	filhst:
 492:					;may have to fill the host buffer
 493: 2572+13	B84F  3A91BB  		lda	sekdsk
 494: 2585+13	B852  3295BB  		sta	hstdsk
 495: 2598+16	B855  2A92BB  		lhld	sektrk
 496: 2614+16	B858  2296BB  		shld	hsttrk
 497: 2630+13	B85B  3A99BB  		lda	sekhst
 498: 2643+13	B85E  3298BB  		sta	hstsec
 499: 2656+13	B861  3AA2BB  		lda	rsflag		;need to read?
 500: 2669+4	B864  B7      		ora	a
 501: 2673+11+6	B865  C4C2B8  		cnz	readhst		;yes, if 1
 502: 2684+4	B868  AF      		xra	a		;0 to accum
 503: 2688+13	B869  329BBB  		sta	hstwrt		;no pending write
 504:				;
 505:     -	B86C          	match:
 506:					;copy data to or from buffer
 507: 2701+13	B86C  3A94BB  		lda	seksec		;mask buffer number
 508: 2714+7	B86F  E601    		ani	secmsk		;least signif bits
 509: 2721+5	B871  6F      		mov	l,a		;ready to shift
 510: 2726+7	B872  2600    		mvi	h,0		;double count
 511: 2733+70	B874  29292929		rept	7		;shift left 7
	              292929
 514:				;	hl has relative host buffer address
 515: 2803+10	B87B  11A7BB  		lxi	d,hstbuf
 516: 2813+10	B87E  19      		dad	d		;hl = host address
 517: 2823+4	B87F  EB      		xchg			;now in DE
 518: 2827+16	B880  2AA5BB  		lhld	dmaadr		;get/put CP/M data
 519: 2843+7	B883  0E80    		mvi	c,128		;length of move
 520: 2850+13	B885  3AA3BB  		lda	readop		;which way?
 521: 2863+4	B888  B7      		ora	a
 522: 2867+10	B889  C292B8  		jnz	rwmove		;skip if read
 523:				;
 524:				;	write operation, mark and switch direction
 525: 2877+7	B88C  3E01    		mvi	a,1
 526: 2884+13	B88E  329BBB  		sta	hstwrt		;hstwrt = 1
 527: 2897+4	B891  EB      		xchg			;source/dest swap
 528:				;
 529:     -	B892          	rwmove:
 530:					;C initially 128, DE is source, HL is dest
 531: 2901+7	B892  1A      		ldax	d		;source character
 532: 2908+5	B893  13      		inx	d
 533: 2913+7	B894  77      		mov	m,a		;to dest
 534: 2920+5	B895  23      		inx	h
 535: 2925+5	B896  0D      		dcr	c		;loop 128 times
 536: 2930+10	B897  C292B8  		jnz	rwmove
 537:				;
 538:				;	data has been moved to/from host buffer
 539: 2940+13	B89A  3AA4BB  		lda	wrtype		;write type
 540: 2953+7	B89D  FE01    		cpi	wrdir		;to directory?
 541: 2960+13	B89F  3AA1BB  		lda	erflag		;in case of errors
 542: 2973+5+6	B8A2  C0      		rnz			;no further processing
 543:				;
 544:				;	clear host buffer for directory write
 545: 2978+4	B8A3  B7      		ora	a		;errors?
 546: 2982+5+6	B8A4  C0      		rnz			;skip if so
 547: 2987+4	B8A5  AF      		xra	a		;0 to accum
 548: 2991+13	B8A6  329BBB  		sta	hstwrt		;buffer written
 549: 3004+17	B8A9  CDBCB8  		call	writehst
 550: 3021+13	B8AC  3AA1BB  		lda	erflag
 551: 3034+10	B8AF  C9      		ret
 552:				;
 553:				;*****************************************************
 554:				;*                                                   *
 555:				;*	Utility subroutine for 16-bit compare        *
 556:				;*                                                   *
 557:				;*****************************************************
 558:     -	B8B0          	sektrkcmp:
 559:					;HL = .unatrk or .hsttrk, compare with sektrk
 560: 3044+4	B8B0  EB      		xchg
 561: 3048+10	B8B1  2192BB  		lxi	h,sektrk
 562: 3058+7	B8B4  1A      		ldax	d		;low byte compare
 563: 3065+7	B8B5  BE      		cmp	m		;same?
 564: 3072+5+6	B8B6  C0      		rnz			;return if not
 565:				;	low bytes equal, test high 1s
 566: 3077+5	B8B7  13      		inx	d
 567: 3082+5	B8B8  23      		inx	h
 568: 3087+7	B8B9  1A      		ldax	d
 569: 3094+7	B8BA  BE      		cmp	m	;sets flags
 570: 3101+10	B8BB  C9      		ret
 571:				;
 572:				;*****************************************************
 573:				;*                                                   *
 574:				;*	WRITEHST performs the physical write to      *
 575:				;*	the host disk, READHST reads the physical    *
 576:				;*	disk.					     *
 577:				;*                                                   *
 578:				;*****************************************************
 579:     -	B8BC          	writehst:
 580:					;hstdsk = host disk #, hsttrk = host track #,
 581:					;hstsec = host sect #. write "hstsiz" bytes
 582:					;from hstbuf and return error flag in erflag.
 583:					;return erflag non-zero if error
 584: 3111+7	B8BC  F6FF    		ora	0FFh
 585: 3118+13	B8BE  32A1BB  		sta	erflag
 586: 3131+10	B8C1  C9      		ret
 587:				
 588:				;
 589:     -	B8C2          	readhst:
 590:					;hstdsk = host disk #, hsttrk = host track #,
 591:					;hstsec = host sect #. read "hstsiz" bytes
 592:					;into hstbuf and return error flag in erflag.
 593:				;	lxi	d, crlf
 594:				;	call	print
 595:					
 596: 3141+10	B8C2  DB0A    		in	fdcctrl		; Motor 1 on
 597:     -	B8C4  CBD7    		setb	2, a
 598: 3151+10	B8C6  D30A    		out	fdcctrl
 599:				
 600: 3161+17	B8C8  CD16B9  		call	seektrk
 601:					
 602: 3178+17	B8CB  CDA2B9  		call	fdcwait
 603: 3195+7	B8CE  3E46    		mvi	a, 046h		; Read sector MFM
 604: 3202+17	B8D0  CDCFB9  		call	fdcio
 605: 3219+17	B8D3  CD3CB9  		call	dchrn		; Drive C H R N
 606:					
 607: 3236+4	B8D6  F3      		di
 608:				
 609:					; Main read loop
 610: 3240+10	B8D7  010B00  		lxi	b, fdcdata	; B = 0 C = port
 611: 3250+10	B8DA  21A7BB  		lxi	h, hstbuf
 612: 3260+10	B8DD  DB31    	readl:	in	irqstat
 613: 3270+4	B8DF  87      		add	a
 614:     -	B8E0  380A    		jrc	fdcret
 615: 3274+10	B8E2  F2DDB8  		jp	p,readl
 616:     -	B8E5  EDA2    		ini
 617:     -	B8E7  20F4    		jrnz	readl
 618: 3284+17	B8E9  CDE2B9  		call	fdctc		; Send TC
 619:				
 620: 3301+4	B8EC  FB      	fdcret	ei
 621: 3305+17	B8ED  CDCFB9  		call	fdcio
 622:					;push	psw
 623:					;call	phex
 624:					;pop	psw
 625: 3322+7	B8F0  E6D8    		ani	0D8h		; Interested in bits 7,6,4,3
 626: 3329+5	B8F2  47      		mov	b, a
 627: 3334+17	B8F3  CDCFB9  		call	fdcio		; ST1
 628:					;push	psw
 629:					;call	phex
 630:					;pop	psw
 631: 3351+4	B8F6  B0      		ora	b
 632: 3355+5	B8F7  47      		mov	b, a
 633: 3360+17	B8F8  CDCFB9  		call	fdcio		; ST2
 634:					;push	psw
 635:					;call	phex
 636:					;pop	psw
 637: 3377+7	B8FB  E63F    		ani	03Fh		; Interested in bits 5..0
 638: 3384+4	B8FD  B0      		ora	b
 639: 3388+5	B8FE  47      		mov	b, a
 640:					
 641: 3393+17	B8FF  CDCFB9  		call	fdcio		; C
 642: 3410+17	B902  CDCFB9  		call	fdcio		; H
 643: 3427+17	B905  CDCFB9  		call	fdcio		; R
 644: 3444+17	B908  CDCFB9  		call	fdcio		; N
 645:					
 646: 3461+10	B90B  DB0A    		in	fdcctrl		; Motor 1 off
 647:     -	B90D  CB97    		res	2, a
 648: 3471+10	B90F  D30A    		out	fdcctrl
 649:					
 650: 3481+5	B911  78      		mov	a, b
 651: 3486+13	B912  32A1BB  		sta	erflag
 652: 3499+10	B915  C9      		ret	
 653:				
 654:				
 655:     -	B916          	seektrk:
 656: 3509+17	B916  CDA2B9  		call	fdcwait
 657: 3526+7	B919  3E0F    		mvi	a, 00Fh		; SEEK
 658: 3533+17	B91B  CDCFB9  		call	fdcio
 659: 3550+13	B91E  3A95BB  		lda	hstdsk		; Current disk
 660: 3563+5	B921  3C      		inr	a
 661: 3568+5	B922  47      		mov	b, a
 662: 3573+13	B923  3A96BB  		lda	hsttrk
 663: 3586+7	B926  E620    		ani	020h		; high byte of 0..31 is side
 664: 3593+4	B928  1F      		rar			; Move bit D4 to D2
 665: 3597+4	B929  1F      		rar
 666: 3601+4	B92A  1F      		rar
 667: 3605+4	B92B  B0      		ora	a, b
 668: 3609+17	B92C  CDCFB9  		call	fdcio
 669: 3626+13	B92F  3A96BB  		lda	hsttrk		; Current track
 670: 3639+17	B932  CDCFB9  		call	fdcio
 671:				
 672: 3656+10	B935  DB31    	waitirq	in	portb
 673:     -	B937  CB7F    		bit	7, a
 674:     -	B939  28FA    		jrz	waitirq
 675:				
 676: 3666+10	B93B  C9      		ret
 677:				
 678: 3676+13	B93C  3A95BB  	dchrn:	lda	hstdsk		; Disk 1..2
 679: 3689+5	B93F  3C      		inr	a		; 1..2 thank you!
 680: 3694+5	B940  47      		mov	b, a
 681: 3699+13	B941  3A98BB  		lda	hstsec
 682: 3712+4	B944  1F      		rar			; Move bit D4 to D2
 683: 3716+4	B945  1F      		rar
 684: 3720+7	B946  E604    		ani	004h
 685: 3727+4	B948  B0      		ora	a, b
 686: 3731+17	B949  CDCFB9  		call	fdcio
 687:					
 688: 3748+13	B94C  3A96BB  		lda	hsttrk		; Cylinder
 689: 3761+17	B94F  CDCFB9  		call	fdcio
 690:					
 691: 3778+13	B952  3A98BB  		lda	hstsec
 692: 3791+4	B955  1F      		rar			; D4 to D0
 693: 3795+4	B956  1F      		rar
 694: 3799+4	B957  1F      		rar
 695: 3803+4	B958  1F      		rar
 696: 3807+7	B959  E601    		ani	1
 697: 3814+17	B95B  CDCFB9  		call	fdcio
 698:					
 699: 3831+13	B95E  3A98BB  		lda	hstsec		; Record
 700: 3844+7	B961  E60F    		ani	00Fh		; 
 701: 3851+5	B963  3C      		inr	a		; 1..16
 702: 3856+17	B964  CDCFB9  		call	fdcio
 703:					
 704: 3873+7	B967  3E01    		mvi	a, 1		; 256 bytes per sector
 705: 3880+17	B969  CDCFB9  		call	fdcio
 706:					
 707: 3897+7	B96C  3E10    		mvi	a, 16		; EOT
 708: 3904+17	B96E  CDCFB9  		call	fdcio
 709:					
 710: 3921+7	B971  3E18    		mvi	a, 018h		; Gap Length
 711: 3928+17	B973  CDCFB9  		call	fdcio
 712:					
 713: 3945+4	B976  AF      		xra	a		; DTL
 714: 3949+17	B977  CDCFB9  		call	fdcio
 715: 3966+10	B97A  C9      		ret
 716:				
 717: 3976+7	B97B  3EFF    	fdcrst:	mvi	a, 0FFh		; Mode 3
 718: 3983+10	B97D  D333    		out	cmdb
 719: 3993+7	B97F  3EC1    		ld	a, 0C1h		; Specify input bits
 720: 4000+10	B981  D333    		out	cmdb
 721:					
 722: 4010+10	B983  DB0A    		in	fdcctrl
 723:     -	B985  CBEF    		setb	5,a		; Reset pin
 724: 4020+10	B987  D30A    		out	fdcctrl
 725: 4030+7	B989  0600    		mvi	b, 0
 726:     -	B98B  10FE    	_fdr1:	djnz	_fdr1
 727:     -	B98D  CBAF    		res	5,a
 728: 4037+10	B98F  D30A    		out	fdcctrl
 729:     -	B991  10FE    	_fdr2:	djnz	_fdr2
 730:				
 731: 4047+7	B993  3E03    		mvi	a, 03h		; Specify
 732: 4054+17	B995  CDCFB9  		call	fdcio
 733: 4071+7	B998  3EBF    		mvi	a, 0BFh		; Step rate, head unload time
 734: 4078+17	B99A  CDCFB9  		call	fdcio
 735: 4095+7	B99D  3E10    		mvi	a, 010h		; Head load time
 736: 4102+10	B99F  C3CFB9  		jmp	fdcio
 737:				
 738:     -	B9A2          	fdcwait:
 739: 4112+10	B9A2  010000  		lxi	b, 0
 740:					
 741: 4122+10	B9A5  DB0C    	fdcwl	in	fdcstat
 742:					;push	psw
 743:					;call	phex
 744:					;lxi	d, bsbsbs
 745:					;call	print
 746:					;pop	psw
 747: 4132+7	B9A7  E6C0    		and	0C0h		; RQM, DIO and seek status
 748: 4139+7	B9A9  FE80    		cpi	080h
 749: 4146+5+6	B9AB  C8      		rz
 750:					
 751: 4151+5	B9AC  0B      		dcx	b
 752: 4156+5	B9AD  78      		mov	a, b
 753: 4161+4	B9AE  B1      		ora	c
 754:     -	B9AF  20F4    		jrnz	fdcwl
 755:					
 756: 4165+10	B9B1  DB0A    		in	fdcctrl
 757:     -	B9B3  CBEF    		setb	5, a
 758: 4175+10	B9B5  D30A    		out	fdcctrl
 759: 4185+17	B9B7  CDC8B9  		call	wait
 760:     -	B9BA  CBAF    		res	5, a
 761: 4202+10	B9BC  D30A    		out	fdcctrl
 762: 4212+17	B9BE  CDC8B9  		call	wait
 763:				
 764: 4229+7	B9C1  0E2E    		mvi	c, '.'
 765: 4236+17	B9C3  CDE0B6  		call	conout
 766:     -	B9C6  18DD    		jr	fdcwl
 767:				
 768: 4253+5	B9C8  0B      	wait	dcx	b
 769: 4258+5	B9C9  78      		mov	a, b
 770: 4263+4	B9CA  B1      		ora	c
 771: 4267+10	B9CB  C2C8B9  		jnz	wait
 772: 4277+10	B9CE  C9      		ret
 773:				
 774:     -	B9CF          	fdcio:
 775: 4287+11	B9CF  F5      		push	psw
 776: 4298+10	B9D0  DB0C    	fdcwl1:	in	fdcstat
 777:     -	B9D2  CB7F    		bit	7,a
 778:     -	B9D4  28FA    		jrz	fdcwl1
 779:     -	B9D6  CB77    		bit	6,a
 780:     -	B9D8  2004    		jrnz	fdcio1
 781: 4308+10	B9DA  F1      		pop	psw
 782: 4318+10	B9DB  D30B    		out	fdcdata
 783:					;jmp	phex
 784: 4328+10	B9DD  C9      		ret
 785:					
 786: 4338+10	B9DE  F1      	fdcio1:	pop	psw
 787: 4348+10	B9DF  DB0B    		in	fdcdata
 788:					;push	psw
 789:					;call	phex
 790:					;pop	psw
 791: 4358+10	B9E1  C9      		ret
 792:					
 793: 4368+10	B9E2  DB0A    	fdctc:	in	fdcctrl		; Pulse TC bit
 794:     -	B9E4  CBE7    		setb	4, a
 795: 4378+10	B9E6  D30A    		out	fdcctrl
 796:     -	B9E8  CBA7    		res	4, a
 797: 4388+10	B9EA  D30A    		out	fdcctrl
 798: 4398+10	B9EC  C9      		ret
 799:				
 800:					; Print the message at HL
 801: 4408+7	B9ED  1A      	print	ldax	d
 802: 4415+5	B9EE  4F      		mov	c, a
 803: 4420+5	B9EF  13      		inx	d
 804: 4425+4	B9F0  B7      		ora	a
 805: 4429+5+6	B9F1  C8      		rz
 806: 4434+17	B9F2  CDE0B6  		call	conout
 807: 4451+10	B9F5  C3EDB9  		jmp	print
 808:				
 809:					
 810: 4461+4	B9F8  F3      	kbinit:	di
 811:     -	B9F9  ED5E    		im2
 812: 4465+7	B9FB  3E07    		mvi	a, 07h		; Disable interrupts
 813: 4472+10	B9FD  D332    		out	cmda
 814: 4482+10	B9FF  D333    		out	cmdb
 815:					
 816: 4492+7	BA01  3E0E    		mvi	a, (low irqtab)
 817: 4499+10	BA03  D332    		out	cmda
 818: 4509+10	BA05  D333    		out	cmdb
 819: 4519+7	BA07  3EBB    		mvi	a, (high irqtab)
 820:     -	BA09  ED47    		stai
 821:					
 822: 4526+7	BA0B  3E4F    		mvi	a, 04Fh		; Set mode
 823: 4533+10	BA0D  D332    		out	cmda
 824: 4543+7	BA0F  3E87    		mvi	a, 087h		; Enable interrupts for PORTA
 825: 4550+10	BA11  D332    		out	cmda
 826:					
 827: 4560+7	BA13  3EFF    		mvi	a, 0FFh
 828: 4567+10	BA15  D333    		out	cmdb
 829: 4577+7	BA17  3EC1    		mvi	a, 0C1h		; Input bits
 830: 4584+10	BA19  D333    		out	cmdb
 831:					
 832: 4594+4	BA1B  AF      		xra	a
 833: 4598+10	BA1C  D331    		out	portb
 834: 4608+13	BA1E  3230BB  		sta	inptr
 835: 4621+13	BA21  3231BB  		sta	outptr
 836:					
 837: 4634+10	BA24  DB30    		in	porta
 838: 4644+10	BA26  DB31    		in	portb
 839:					
 840: 4654+4	BA28  FB      		ei
 841: 4658+10	BA29  C9      		ret
 842:					
 843: 4668+11	BA2A  F5      	kbirq:	push	psw
 844: 4679+11	BA2B  E5      		push	h
 845: 4690+11	BA2C  D5      		push	d
 846: 4701+11	BA2D  C5      		push	b
 847:					
 848: 4712+13	BA2E  3A30BB  		lda	inptr
 849: 4725+5	BA31  5F      		mov	e, a
 850: 4730+7	BA32  1600    		mvi	d, 0
 851: 4737+10	BA34  2110BB  		lxi	h, buffer
 852: 4747+10	BA37  19      		dad	d
 853: 4757+5	BA38  3C      		inr	a
 854: 4762+7	BA39  E61F    		ani	31		; Modulo 32
 855: 4769+13	BA3B  3230BB  		sta	inptr
 856:					
 857: 4782+10	BA3E  DB30    		in	porta
 858: 4792+7	BA40  77      		mov	m, a
 859:					
 860: 4799+10	BA41  C1      		pop	b
 861: 4809+10	BA42  D1      		pop	d
 862: 4819+10	BA43  E1      		pop	h
 863: 4829+10	BA44  F1      		pop	psw
 864: 4839+4	BA45  FB      		ei
 865:     -	BA46  ED4D    		reti
 866:				
 867:     -	BA48  34376B20	mesg	db	"47k CP/M 2.2"
	              43502F4D
	              20322E32
 868:     -	BA54  0D0A00  	crlf	db	cr,lf,0
 869:     -	BA57  08080800	bsbsbs	db	8,8,8,0
 870:				
 871:     -	BA5B  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 872:     -	BA67  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 873:     -	BA73  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 874:     -	BA7F          	stack:
 875:				
 876:				;phex	push	psw
 877:				;	mvi	c, ' '
 878:				;	call	conout
 879:				;	pop	psw
 880:				;	push	psw		; Will use A twice
 881:				;	rar			; Shift upper to lower nibble
 882:				;	rar
 883:				;	rar
 884:				;	rar
 885:				;	call	phex1		; Print it
 886:				;	pop	psw		; Restore original Acc
 887:				;phex1	ani	00Fh		; Mask off high nibble
 888:				;	adi	090h		; Decimal adjust for ASCII
 889:				;	daa
 890:				;	aci	040h
 891:				;	daa
 892:				;	mov	c, a		; Print it
 893:				;	jmp	conout
 894:				;	ret
 895:					
 896:				
 897:     -	BA7F  00000000	keytab:	db	0,0,0,0,0,0,0,0	; 00..07
	              00000000
 898:     -	BA87  00000000		db	0,0,0,0,0,0,0,0 ; 08..0F
	              00000000
 899:				
 900:     -	BA8F  00000000		db	0,0,0,0,0,0,0,0 ; 10..17
	              00000000
 901:     -	BA97  00000000		db	0,0,0,0,0,0,0,0 ; 18..1F
	              00000000
 902:					
 903:     -	BA9F  20212223		db	020h,021h,022h,023h,024h,025h,026h,027h	; 20..27
	              24252627
 904:     -	BAA7  28292A2B		db	028h,029h,02Ah,02Bh,02Ch,02Dh,02Eh,02Fh	; 28..2F
	              2C2D2E2F
 905:				
 906:     -	BAAF  30313233		db	030h,031h,032h,033h,034h,035h,036h,037h	; 30..37
	              34353637
 907:     -	BAB7  38393A3B		db	038h,039h,03Ah,03Bh,03Ch,03Dh,03Eh,03Fh	; 38..3F
	              3C3D3E3F
 908:					
 909:     -	BABF  40414243		db	040h,041h,042h,043h,044h,045h,046h,047h	; 40..47
	              44454647
 910:     -	BAC7  48494A4B		db	048h,049h,04Ah,04Bh,04Ch,04Dh,04Eh,04Fh	; 48..4F
	              4C4D4E4F
 911:				
 912:     -	BACF  50515253		db	050h,051h,052h,053h,054h,055h,056h,057h	; 50..57
	              54555657
 913:     -	BAD7  58595A5B		db	058h,059h,05Ah,05Bh,05Ch,05Dh,05Eh,05Fh	; 58..5F
	              5C5D5E5F
 914:				
 915:     -	BADF  60616263		db	060h,061h,062h,063h,064h,065h,066h,067h	; 60..67
	              64656667
 916:     -	BAE7  68696A6B		db	068h,069h,06Ah,06Bh,06Ch,06Dh,06Eh,06Fh	; 68..6F
	              6C6D6E6F
 917:				
 918:     -	BAEF  70717273		db	070h,071h,072h,073h,074h,075h,076h,077h	; 70..77
	              74757677
 919:     -	BAF7  78797A7B		db	078h,079h,07Ah,07Bh,07Ch,07Dh,07Eh,07Fh	; 78..7F
	              7C7D7E7F
 920:				
 921:     -	BB0E          		org	(($ + 16) AND 0FFFEh)
 922:				
 923:     -	BB0E  2ABA    	irqtab:	dw	kbirq
 924:				
 925:     -	BB10          	buffer:	ds	32		; Keyboard buffer
 926:     -	BB30  00      	inptr:	db	0
 927:     -	BB31  00      	outptr:	db	0
 928:				
 929:     -	BB32  51BB0000		disks	1
	              00000000
	              A7BC42BB
	              3BBD27BD
 930:					;      dn,fsc,   lsc,[skf],bls   ,dks,dir,cks,ofs,[0]
 931:     -	BB42  4000040F		diskdef 0,  1,cpmspt,1    ,blksiz,160,128,128,1
	              019F007F
	              00C00020
	              00010001
	              02030405
	              06070809
	              0A0B0C0D
	              0E0F1011
	              12131415
	              16171819
	              1A1B1C1D
	              1E1F2021
	              22232425
	              26272829
	              2A2B2C2D
	              2E2F3031
	              32333435
	              36373839
	              3A3B3C3D
	              3E3F40
 932:				;
 933:				;	the remainder of the cbios is reserved uninitialized
 934:				;	data area, and does not need to be a Part of the
 935:				;	system	memory image (the space must be available,
 936:				;	however, between"begdat" and"enddat").
 937:				;
 938:     -	BB91          	sekdsk:	ds	1		;seek disk number
 939:     -	BB92          	sektrk:	ds	2		;seek track number
 940:     -	BB94          	seksec:	ds	1		;seek sector number
 941:				;
 942:     -	BB95          	hstdsk:	ds	1		;host disk number
 943:     -	BB96          	hsttrk:	ds	2		;host track number
 944:     -	BB98          	hstsec:	ds	1		;host sector number
 945:				;
 946:     -	BB99          	sekhst:	ds	1		;seek shr secshf
 947:     -	BB9A          	hstact:	ds	1		;host active flag
 948:     -	BB9B          	hstwrt:	ds	1		;host written flag
 949:				;
 950:     -	BB9C          	unacnt:	ds	1		;unalloc rec cnt
 951:     -	BB9D          	unadsk:	ds	1		;last unalloc disk
 952:     -	BB9E          	unatrk:	ds	2		;last unalloc track
 953:     -	BBA0          	unasec:	ds	1		;last unalloc sector
 954:				;
 955:     -	BBA1          	erflag:	ds	1		;error reporting
 956:     -	BBA2          	rsflag:	ds	1		;read sector flag
 957:     -	BBA3          	readop:	ds	1		;1 if read operation
 958:     -	BBA4          	wrtype:	ds	1		;write operation type
 959:     -	BBA5          	dmaadr:	ds	2		;last dma address
 960:     -	BBA7          	hstbuf:	ds	hstsiz		;host buffer
 961:     -	        		endef
 962:					
 963:     -	BD5B  00000000		rept	(0C1C0h - $)
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00
 966:					
 967:     -	C1C0          		end



Statistics:

     4	passes
     0	jr promotions
   155	symbols
  2503	bytes

  1332	macro calls
  8859	macro bytes
     0	invented symbols



Symbol Table:

@x             =01        1
@y             =01        1
BC             =00        0
DE             =02        2
HL             =04        4
IX             =04        4
IY             =04        4
_fdr1           B98B      47499
_fdr2           B991      47505
alloc           B80D      47117
als0           =14        20
alv0            BD27      48423
bdos           =A806      43014
begdat         =BCA7      48295
bias           =6C00      27648
bios           =B600      46592
blkmsk         =0F        15
blkshf         =04        4
blksiz         = 800      2048
blkval         =01        1
boot            B633      46643
bs             =08        8
bsbsbs          BA57      47703
buffer          BB10      47888
ccp            =A000      40960
cdisk          =04        4
chkuna          B7CE      47054
cmda           =32        50
cmdb           =33        51
conbs           B71B      46875
concr           B716      46870
conin           B6C9      46793
conlf           B722      46882
conout          B6E0      46816
conout1         B6F6      46838
const           B6BB      46779
cpmspt         =40        64
cr             =0D        13
crlf            BA54      47700
css0           =20        32
csv0            BD3B      48443
cursor          B752      46930
datsiz         =B4        180
dchrn           B93C      47420
dirbks         =40        64
dirblk         =C000      49152
dirbuf          BCA7      48295
dirrem         =00        0
dmaadr          BBA5      48037
dpb0           =BB42      47938
dpbase         =BB32      47922
dpe0            BB32      47922
dsknxt         =01        1
enddat         =BD5B      48475
endlin          B746      46918
erflag          BBA1      48033
extmsk         =01        1
fdcctrl        =0A        10
fdcdata        =0B        11
fdcio           B9CF      47567
fdcio1          B9DE      47582
fdcret          B8EC      47340
fdcrst          B97B      47483
fdcstat        =0C        12
fdctc           B9E2      47586
fdcwait         B9A2      47522
fdcwl           B9A5      47525
fdcwl1          B9D0      47568
filhst          B84F      47183
gcdm           =40        64
gcdn           =01        1
gcdr           =00        0
gcdx           =40        64
gocpm           B696      46742
home            B754      46932
homed           B75E      46942
hstact          BB9A      48026
hstblk         =02        2
hstbuf          BBA7      48039
hstdsk          BB95      48021
hsthpc         =02        2
hstsec          BB98      48024
hstsiz         = 100      256
hstsph         =10        16
hstspt         =20        32
hsttrk          BB96      48022
hstwrt          BB9B      48027
inptr           BB30      47920
iobyte         =03        3
irqstat        =31        49
irqtab          BB0E      47886
kbinit          B9F8      47608
kbirq           BA2A      47658
keytab          BA7F      47743
lf             =0A        10
list            B74B      46923
listst          B74C      46924
match           B86C      47212
mesg            BA48      47688
msize          =2F        47
ndisks         =01        1
nelts          =40        64
neltst         =40        64
nomatch         B848      47176
noovf           B806      47110
nsects         =2C        44
nxtbas         =01        1
nxtsec         =01        1
outptr          BB31      47921
porta          =30        48
portb          =31        49
print           B9ED      47597
punch           B74E      46926
rdloop          B671      46705
read            B796      46998
reader          B74F      46927
readhst         B8C2      47298
readl           B8DD      47325
readop          BBA3      48035
rsflag          BBA2      48034
rwmove          B892      47250
rwoper          B815      47125
scrll           B72D      46893
scroll          B727      46887
secmax         =3F        63
secmsk         =01        1
secshf         =01        1
sectors        =40        64
sectran         B793      46995
seektrk         B916      47382
sekdsk          BB91      48017
sekhst          BB99      48025
seksec          BB94      48020
sektrk          BB92      48018
sektrkcmp       B8B0      47280
seldsk          B771      46961
setdma          B78D      46989
setsec          B788      46984
settrk          B781      46977
stack           BA7F      47743
unacnt          BB9C      48028
unadsk          BB9D      48029
unasec          BBA0      48032
unatrk          BB9E      48030
wait            B9C8      47560
waitirq         B935      47413
wboot           B652      46674
wboote          B603      46595
wrall          =00        0
wrdir          =01        1
write           B7AA      47018
writehst        B8BC      47292
wrtype          BBA4      48036
wrual          =02        2
xlt0           =BB51      47953
