   1:				; CBIOS for WangWriter
   2:				;
   3:				; Portions by Digital Research
   4:				;
   5:					maclib Z80
**** Z80.lib ****
   1:				;	@CHK MACRO USED FOR CHECKING 8 BIT DISPLACMENTS
   2:				;
   3:				@CHK	MACRO	?DD	;; USED FOR CHECKING RANGE OF 8-BIT DISP.S
   4:					IF (?DD GT 7FH) AND (?DD LT 0FF80H)
   5:				 'DISPLACEMENT RANGE ERROR - Z80 LIB'
   6:					ENDIF
   7:					ENDM
   8:				LDX	MACRO	?R,?D	
   9:					@CHK	?D
  10:					DB	0DDH,?R*8+46H,?D
  11:					ENDM
  12:				LDY	MACRO	?R,?D	
  13:					@CHK	?D
  14:					DB	0FDH,?R*8+46H,?D
  15:					ENDM
  16:				STX	MACRO	?R,?D	
  17:					@CHK	?D
  18:					DB	0DDH,70H+?R,?D
  19:					ENDM
  20:				STY	MACRO	?R,?D	
  21:					@CHK	?D
  22:					DB	0FDH,70H+?R,?D
  23:					ENDM
  24:				MVIX	MACRO	?N,?D	
  25:					@CHK	?D
  26:					DB	0DDH,36H,?D,?N
  27:					ENDM
  28:				MVIY	MACRO	?N,?D	
  29:					@CHK	?D
  30:					DB	0FDH,36H,?D,?N
  31:					ENDM
  32:				LDAI	MACRO		
  33:					DB	0EDH,57H
  34:					ENDM
  35:				LDAR	MACRO		
  36:					DB	0EDH,5FH
  37:					ENDM
  38:				STAI	MACRO		
  39:					DB	0EDH,47H
  40:					ENDM
  41:				STAR	MACRO		
  42:					DB	0EDH,4FH
  43:					ENDM
  44:				
  45:				LXIX	MACRO	?NNNN	
  46:					DB	0DDH,21H
  47:					DW	?NNNN
  48:					ENDM
  49:				LXIY	MACRO	?NNNN	
  50:					DB	0FDH,21H
  51:					DW	?NNNN
  52:					ENDM
  53:				LDED	MACRO	?NNNN	
  54:					DB	0EDH,5BH
  55:					DW	?NNNN
  56:					ENDM
  57:				LBCD	MACRO	?NNNN	
  58:					DB	0EDH,4BH
  59:					DW	?NNNN
  60:					ENDM
  61:				LSPD	MACRO	?NNNN	
  62:					DB	0EDH,07BH
  63:					DW	?NNNN
  64:					ENDM
  65:				LIXD	MACRO	?NNNN	
  66:					DB	0DDH,2AH
  67:					DW	?NNNN
  68:					ENDM
  69:				LIYD	MACRO	?NNNN	
  70:					DB	0FDH,2AH
  71:					DW	?NNNN
  72:					ENDM
  73:				SBCD	MACRO	?NNNN	
  74:					DB	0EDH,43H
  75:					DW	?NNNN
  76:					ENDM
  77:				SDED	MACRO	?NNNN	
  78:					DB	0EDH,53H
  79:					DW	?NNNN
  80:					ENDM
  81:				SSPD	MACRO	?NNNN	
  82:					DB	0EDH,73H
  83:					DW	?NNNN
  84:					ENDM
  85:				SIXD	MACRO	?NNNN	
  86:					DB	0DDH,22H
  87:					DW	?NNNN
  88:					ENDM
  89:				SIYD	MACRO	?NNNN	
  90:					DB	0FDH,22H
  91:					DW	?NNNN
  92:					ENDM
  93:				SPIX	MACRO		
  94:					DB	0DDH,0F9H
  95:					ENDM
  96:				SPIY	MACRO		
  97:					DB	0FDH,0F9H
  98:					ENDM
  99:				PUSHIX	MACRO		
 100:					DB	0DDH,0E5H
 101:					ENDM
 102:				PUSHIY	MACRO		
 103:					DB	0FDH,0E5H
 104:					ENDM
 105:				POPIX	MACRO		
 106:					DB	0DDH,0E1H
 107:					ENDM
 108:				POPIY	MACRO		
 109:					DB	0FDH,0E1H
 110:					ENDM
 111:				EXAF	MACRO		
 112:					DB	08H
 113:					ENDM
 114:				EXX	MACRO		
 115:					DB	0D9H
 116:					ENDM
 117:				XTIX	MACRO		
 118:					DB	0DDH,0E3H
 119:					ENDM
 120:				XTIY	MACRO		
 121:					DB	0FDH,0E3H
 122:					ENDM
 123:				
 124:				LDI	MACRO		
 125:					DB	0EDH,0A0H
 126:					ENDM
 127:				LDIR	MACRO		
 128:					DB	0EDH,0B0H
 129:					ENDM
 130:				LDD	MACRO		
 131:					DB	0EDH,0A8H
 132:					ENDM
 133:				LDDR	MACRO		
 134:					DB	0EDH,0B8H
 135:					ENDM
 136:				CCI	MACRO		
 137:					DB	0EDH,0A1H
 138:					ENDM
 139:				CCIR	MACRO		
 140:					DB	0EDH,0B1H
 141:					ENDM
 142:				CCD	MACRO		
 143:					DB	0EDH,0A9H
 144:					ENDM
 145:				CCDR	MACRO		
 146:					DB	0EDH,0B9H
 147:					ENDM
 148:				
 149:				ADDX	MACRO	?D	
 150:					@CHK	?D
 151:					DB	0DDH,86H,?D
 152:					ENDM
 153:				ADDY	MACRO	?D	
 154:					@CHK	?D
 155:					DB	0FDH,86H,?D
 156:					ENDM
 157:				ADCX	MACRO	?D	
 158:					@CHK	?D
 159:					DB	0DDH,8EH,?D
 160:					ENDM
 161:				ADCY	MACRO	?D	
 162:					@CHK	?D
 163:					DB	0FDH,8EH,?D
 164:					ENDM
 165:				SUBX	MACRO	?D	
 166:					@CHK	?D
 167:					DB	0DDH,96H,?D
 168:					ENDM
 169:				SUBY	MACRO	?D	
 170:					@CHK	?D
 171:					DB	0FDH,96H,?D
 172:					ENDM
 173:				SBCX	MACRO	?D	
 174:					@CHK	?D
 175:					DB	0DDH,9EH,?D
 176:					ENDM
 177:				SBCY	MACRO	?D	
 178:					@CHK	?D
 179:					DB	0FDH,9EH,?D
 180:					ENDM
 181:				ANDX	MACRO	?D	
 182:					@CHK	?D
 183:					DB	0DDH,0A6H,?D
 184:					ENDM
 185:				ANDY	MACRO	?D	
 186:					@CHK	?D
 187:					DB	0FDH,0A6H,?D
 188:					ENDM
 189:				XORX	MACRO	?D	
 190:					@CHK	?D
 191:					DB	0DDH,0AEH,?D
 192:					ENDM
 193:				XORY	MACRO	?D	
 194:					@CHK	?D
 195:					DB	0FDH,0AEH,?D
 196:					ENDM
 197:				ORX	MACRO	?D	
 198:					@CHK	?D
 199:					DB	0DDH,0B6H,?D
 200:					ENDM
 201:				ORY	MACRO	?D	
 202:					@CHK	?D
 203:					DB	0FDH,0B6H,?D
 204:					ENDM
 205:				CMPX	MACRO	?D	
 206:					@CHK	?D
 207:					DB	0DDH,0BEH,?D
 208:					ENDM
 209:				CMPY	MACRO	?D	
 210:					@CHK	?D
 211:					DB	0FDH,0BEH,?D
 212:					ENDM
 213:				INRX	MACRO	?D	
 214:					@CHK	?D
 215:					DB	0DDH,34H,?D
 216:					ENDM
 217:				INRY	MACRO	?D	
 218:					@CHK	?D
 219:					DB	0FDH,34H,?D
 220:					ENDM
 221:				DCRX	MACRO	?D	
 222:					@CHK	?D
 223:					DB	0DDH,035H,?D
 224:					ENDM
 225:				DCRY	MACRO	?D	
 226:					@CHK	?D
 227:					DB	0FDH,35H,?D
 228:					ENDM
 229:				
 230:				NEG	MACRO		
 231:					DB	0EDH,44H
 232:					ENDM
 233:				IM0	MACRO		
 234:					DB	0EDH,46H
 235:					ENDM
 236:				IM1	MACRO		
 237:					DB	0EDH,56H
 238:					ENDM
 239:				IM2	MACRO		
 240:					DB	0EDH,5EH
 241:					ENDM
 242:				
 243:				
 244:     -	0000          	BC	EQU	0
 245:     -	0002          	DE	EQU	2
 246:     -	0004          	HL	EQU	4
 247:     -	0004          	IX	EQU	4	
 248:     -	0004          	IY	EQU	4	
 249:				DADC	MACRO	?R	
 250:					DB	0EDH,?R*8+4AH
 251:					ENDM
 252:				DSBC	MACRO	?R	
 253:					DB	0EDH,?R*8+42H
 254:					ENDM
 255:				DADX	MACRO	?R	
 256:					DB	0DDH,?R*8+09H
 257:					ENDM
 258:				DADY	MACRO	?R	
 259:					DB	0FDH,?R*8+09H
 260:					ENDM
 261:				INXIX	MACRO		
 262:					DB	0DDH,23H
 263:					ENDM
 264:				INXIY	MACRO		
 265:					DB	0FDH,23H
 266:					ENDM
 267:				DCXIX	MACRO		
 268:					DB	0DDH,2BH
 269:					ENDM
 270:				DCXIY	MACRO		
 271:					DB	0FDH,2BH
 272:					ENDM
 273:				
 274:				BIT	MACRO	?N,?R	
 275:					DB	0CBH,?N*8+?R+40H
 276:					ENDM
 277:				SETB	MACRO	?N,?R
 278:					DB	0CBH,?N*8+?R+0C0H
 279:					ENDM
 280:				RES	MACRO	?N,?R
 281:					DB	0CBH,?N*8+?R+80H
 282:					ENDM
 283:				
 284:				BITX	MACRO	?N,?D	
 285:					@CHK	?D
 286:					DB	0DDH,0CBH,?D,?N*8+46H
 287:					ENDM
 288:				BITY	MACRO	?N,?D	
 289:					@CHK	?D
 290:					DB	0FDH,0CBH,?D,?N*8+46H
 291:					ENDM
 292:				SETX	MACRO	?N,?D	
 293:					@CHK	?D
 294:					DB	0DDH,0CBH,?D,?N*8+0C6H
 295:					ENDM
 296:				SETY	MACRO	?N,?D	
 297:					@CHK	?D
 298:					DB	0FDH,0CBH,?D,?N*8+0C6H
 299:					ENDM
 300:				RESX	MACRO	?N,?D	
 301:					@CHK	?D
 302:					DB	0DDH,0CBH,?D,?N*8+86H
 303:					ENDM
 304:				RESY	MACRO	?N,?D	
 305:					@CHK	?D
 306:					DB	0FDH,0CBH,?D,?N*8+86H
 307:					ENDM
 308:				
 309:				JR	MACRO	?N
 310:					DB	18H,?N-$-1
 311:					ENDM
 312:				JRC	MACRO	?N
 313:					DB	38H,?N-$-1
 314:					ENDM
 315:				JRNC	MACRO	?N
 316:					DB	30H,?N-$-1
 317:					ENDM
 318:				JRZ	MACRO	?N
 319:					DB	28H,?N-$-1
 320:					ENDM
 321:				JRNZ	MACRO	?N
 322:					DB	20H,?N-$-1
 323:					ENDM
 324:				DJNZ	MACRO	?N
 325:					DB	10H,?N-$-1
 326:					ENDM
 327:				
 328:				PCIX	MACRO		
 329:					DB	0DDH,0E9H
 330:					ENDM
 331:				PCIY	MACRO		
 332:					DB	0FDH,0E9H
 333:					ENDM
 334:				
 335:				RETI	MACRO		
 336:					DB	0EDH,4DH
 337:					ENDM
 338:				RETN	MACRO		
 339:					DB	0EDH,45H
 340:					ENDM
 341:				
 342:				INP	MACRO	?R	
 343:					DB	0EDH,?R*8+40H
 344:					ENDM
 345:				OUTP	MACRO	?R	
 346:					DB	0EDH,?R*8+41H
 347:					ENDM
 348:				INI	MACRO		
 349:					DB	0EDH,0A2H
 350:					ENDM
 351:				INIR	MACRO		
 352:					DB	0EDH,0B2H
 353:					ENDM
 354:				IND	MACRO		
 355:					DB	0EDH,0AAH
 356:					ENDM
 357:				INDR	MACRO		
 358:					DB	0EDH,0BAH
 359:					ENDM
 360:				OUTI	MACRO		
 361:					DB	0EDH,0A3H
 362:					ENDM
 363:				OUTIR	MACRO		
 364:					DB	0EDH,0B3H
 365:					ENDM
 366:				OUTD	MACRO		
 367:					DB	0EDH,0ABH
 368:					ENDM
 369:				OUTDR	MACRO		
 370:					DB	0EDH,0BBH
 371:					ENDM
 372:				
 373:				
 374:				RLCR	MACRO	?R	
 375:					DB	0CBH, 00H + ?R
 376:					ENDM
 377:				RLCX	MACRO	?D	
 378:					@CHK	?D
 379:					DB	0DDH, 0CBH, ?D, 06H
 380:					ENDM
 381:				RLCY	MACRO	?D	
 382:					@CHK	?D
 383:					DB	0FDH, 0CBH, ?D, 06H
 384:					ENDM
 385:				RALR	MACRO	?R	
 386:					DB	0CBH, 10H+?R
 387:					ENDM
 388:				RALX	MACRO	?D	
 389:					@CHK	?D
 390:					DB	0DDH, 0CBH, ?D, 16H
 391:					ENDM
 392:				RALY	MACRO	?D	
 393:					@CHK	?D
 394:					DB	0FDH, 0CBH, ?D, 16H
 395:					ENDM
 396:				RRCR	MACRO	?R	
 397:					DB	0CBH, 08H + ?R
 398:					ENDM
 399:				RRCX	MACRO	?D	
 400:					@CHK	?D
 401:					DB	0DDH, 0CBH, ?D, 0EH
 402:					ENDM
 403:				RRCY	MACRO	?D	
 404:					@CHK	?D
 405:					DB	0FDH, 0CBH, ?D, 0EH
 406:					ENDM
 407:				RARR	MACRO	?R	
 408:					DB	0CBH, 18H + ?R
 409:					ENDM
 410:				RARX	MACRO	?D	
 411:					@CHK	?D
 412:					DB	0DDH, 0CBH, ?D, 1EH
 413:					ENDM
 414:				RARY	MACRO	?D	
 415:					@CHK	?D
 416:					DB	0FDH, 0CBH, ?D, 1EH
 417:					ENDM
 418:				SLAR	MACRO	?R	
 419:					DB	0CBH, 20H + ?R
 420:					ENDM
 421:				SLAX	MACRO	?D	
 422:					@CHK	?D
 423:					DB	0DDH, 0CBH, ?D, 26H
 424:					ENDM
 425:				SLAY	MACRO	?D	
 426:					@CHK	?D
 427:					DB	0FDH, 0CBH, ?D, 26H
 428:					ENDM
 429:				SRAR	MACRO	?R	
 430:					DB	0CBH, 28H+?R
 431:					ENDM
 432:				SRAX	MACRO	?D	
 433:					@CHK	?D
 434:					DB	0DDH, 0CBH, ?D, 2EH
 435:					ENDM
 436:				SRAY	MACRO	?D	
 437:					@CHK	?D
 438:					DB	0FDH, 0CBH, ?D, 2EH
 439:					ENDM
 440:				SRLR	MACRO	?R	
 441:					DB	0CBH, 38H + ?R
 442:					ENDM
 443:				SRLX	MACRO	?D	
 444:					@CHK	?D
 445:					DB	0DDH, 0CBH, ?D, 3EH
 446:					ENDM
 447:				SRLY	MACRO	?D	
 448:					@CHK	?D
 449:					DB	0FDH, 0CBH, ?D, 3EH
 450:					ENDM
 451:				RLD	MACRO		
 452:					DB	0EDH, 6FH
 453:					ENDM
 454:				RRD	MACRO		
 455:					DB	0EDH, 67H
 456:					ENDM
**** cbios.asm ****
   6:					maclib DISKDEF
**** DISKDEF.lib ****
   1:				;	CP/M 2.0 disk re-definition library
   2:				;
   3:				;	Copyright (c) 1979
   4:				;	Digital Research
   5:				;	Box 579
   6:				;	Pacific Grove, CA
   7:				;	93950
   8:				;
   9:				;	BUGS fixed 07/07/82	JDW Software Source.
  10:				;
  11:				;	Unterminated IF in 'diskdef' macro itself
  12:				;
  13:				;	Unecessary complexity of 'lds' & 'defds' macros
  14:				;	'lds' now does both jobs, 'defds' removed (not needed).
  15:				;
  16:				;
  17:				;	'comment' dummy in 'ddw' & 'ddb' altered to 'messag'
  18:				;	because of apparent BUG in Macro-80 ver 3.44
  19:				;
  20:				;	'eq' 'gt' 'ge' etc replace '=' '>' '>=' in conditionals
  21:				;
  22:				;
  23:				;
  24:				;	Now will work with Macro-80 ver 3.44 as well as MAC.
  25:				;	if using M80, may need to alter 'set' psuedo-op
  26:				;	to aset equivalent if inside a .z80.
  27:				;
  28:				;
  29:				;
  30:				;	CP/M logical disk drives are defined using the
  31:				;	macros given below, where the sequence of calls
  32:				;	is:
  33:				;
  34:				;	disks	n
  35:				;	diskdef parameter-list-0
  36:				;	diskdef parameter-list-1
  37:				;	...
  38:				;	diskdef parameter-list-n
  39:				;	endef
  40:				;
  41:				;	where n is the number of logical disk drives attached
  42:				;	to the CP/M system, and parameter-list-i defines the
  43:				;	characteristics of the ith drive (i=0,1,...,n-1)
  44:				;
  45:				;	each parameter-list-i takes the form
  46:				;		dn,fsc,lsc,[skf],bls,dks,dir,cks,ofs,[0]
  47:				;	where
  48:				;	dn	is the disk number 0,1,...,n-1
  49:				;	fsc	is the first sector number (usually 0 or 1)
  50:				;	lsc	is the last sector number on a track
  51:				;	skf	is optional "skew factor" for sector translate
  52:				;	bls	is the data block size (1024,2048,...,16384)
  53:				;	dks	is the disk size in bls increments (word)
  54:				;	dir	is the number of directory elements (word)
  55:				;	cks	is the number of dir elements to checksum
  56:				;	ofs	is the number of tracks to skip (word)
  57:				;	[0]	is an optional 0 which forces 16K/directory entry
  58:				;
  59:				;	for convenience, the form
  60:				;		dn,dm
  61:				;	defines disk dn as having the same characteristics as
  62:				;	a previously defined disk dm.
  63:				;
  64:				;	a standard four drive CP/M system is defined by
  65:				;		disks	4
  66:				;		diskdef 0,1,26,6,1024,243,64,64,2
  67:				;	dsk	set	0
  68:				;		rept	3
  69:				;	dsk	set	dsk+1
  70:				;		diskdef %dsk,0
  71:				;		endm
  72:				;		endef
  73:				;
  74:				;	the value of "begdat" at the end of assembly defines the
  75:				;	beginning of the uninitialize ram area above the bios,
  76:				;	while the value of "enddat" defines the next location
  77:				;	following the end of the data area.  the size of this
  78:				;	area is given by the value of "datsiz" at the end of the
  79:				;	assembly.  note that the allocation vector will be quite
  80:				;	large if a large disk size is defined with a small block
  81:				;	size.
  82:				;
  83:				dskhdr	macro	dn
  84:				;;	define a single disk header list
  85:				dpe&dn: dw	xlt&dn,0000h	;translate table
  86:					dw	0000h,0000h	;scratch area
  87:					dw	dirbuf,dpb&dn	;dir buff,parm block
  88:					dw	csv&dn,alv&dn	;check, alloc vectors
  89:					endm
  90:				;
  91:				disks	macro	nd
  92:				;;	define nd disks
  93:				ndisks	set	nd	;;for later reference
  94:				dpbase	equ	$	;base of disk parameter blocks
  95:				;;	generate the nd elements
  96:				dsknxt	set	0
  97:					rept	nd
  98:					dskhdr	%dsknxt
  99:				dsknxt	set	dsknxt+1
 100:					endm
 101:					endm
 102:				;
 103:				dpbhdr	macro	dn
 104:				dpb&dn	equ	$		;disk parm block
 105:					endm
 106:				;
 107:				ddb	macro	data,messag
 108:				;;	define a db statement
 109:					db	data		messag
 110:					endm
 111:				;
 112:				ddw	macro	data,messag
 113:				;;	define a dw statement
 114:					dw	data		messag
 115:					endm
 116:				;
 117:				gcd	macro	m,n
 118:				;;	greatest common divisor of m,n
 119:				;;	produces value gcdn as result
 120:				;;	(used in sector translate table generation)
 121:				gcdm	set	m	;;variable for m
 122:				gcdn	set	n	;;variable for n
 123:				gcdr	set	0	;;variable for r
 124:					rept	65535
 125:				gcdx	set	gcdm/gcdn
 126:				gcdr	set	gcdm - gcdx*gcdn
 127:					if	gcdr eq 0
 128:					exitm
 129:					endif
 130:				gcdm	set	gcdn
 131:				gcdn	set	gcdr
 132:					endm
 133:					endm
 134:				;
 135:				diskdef macro	dn,fsc,lsc,skf,bls,dks,dir,cks,ofs,k16
 136:				;;	generate the set statements for later tables
 137:					if	nul lsc
 138:				;;	current disk dn same as previous fsc
 139:				dpb&dn	equ	dpb&fsc ;equivalent parameters
 140:				als&dn	equ	als&fsc ;same allocation vector size
 141:				css&dn	equ	css&fsc ;same checksum vector size
 142:				xlt&dn	equ	xlt&fsc ;same translate table
 143:					else
 144:				secmax	set	lsc-(fsc)	;;sectors 0...secmax
 145:				sectors set	secmax+1;;number of sectors
 146:				als&dn	set	(dks)/8 ;;size of allocation vector
 147:					if	((dks) mod 8) ne 0
 148:				als&dn	set	als&dn+1
 149:					endif
 150:				css&dn	set	(cks)/4 ;;number of checksum elements
 151:				;;	generate the block shift value
 152:				blkval	set	bls/128 ;;number of sectors/block
 153:				blkshf	set	0	;;counts right 0's in blkval
 154:				blkmsk	set	0	;;fills with 1's from right
 155:					rept	16	;;once for each bit position
 156:					if	blkval eq 1
 157:					exitm
 158:					endif
 159:				;;	otherwise, high order 1 not found yet
 160:				blkshf	set	blkshf+1
 161:				blkmsk	set	(blkmsk shl 1) or 1
 162:				blkval	set	blkval/2
 163:					endm
 164:				;;	generate the extent mask byte
 165:				blkval	set	bls/1024	;;number of kilobytes/block
 166:				extmsk	set	0	;;fill from right with 1's
 167:					rept	16
 168:					if	blkval eq 1
 169:					exitm
 170:					endif
 171:				;;	otherwise more to shift
 172:				extmsk	set	(extmsk shl 1) or 1
 173:				blkval	set	blkval/2
 174:					endm
 175:				;;	may be double byte allocation
 176:					if	(dks) gt 256
 177:				extmsk	set	(extmsk shr 1)
 178:					endif
 179:				;;	may be optional [0] in last position
 180:					if	not nul k16
 181:				extmsk	set	k16
 182:					endif
 183:				;;	now generate directory reservation bit vector
 184:				dirrem	set	dir	;;# remaining to process
 185:				dirbks	set	bls/32	;;number of entries per block
 186:				dirblk	set	0	;;fill with 1's on each loop
 187:					rept	16
 188:					if	dirrem eq 0
 189:					exitm
 190:					endif
 191:				;;	not complete, iterate once again
 192:				;;	shift right and add 1 high order bit
 193:				dirblk	set	(dirblk shr 1) or 8000h
 194:					if	dirrem gt dirbks
 195:				dirrem	set	dirrem-dirbks
 196:					else
 197:				dirrem	set	0
 198:					endif
 199:					endm
 200:					dpbhdr	dn	;;generate equ $
 201:					ddw	%sectors,<;sec per track>
 202:					ddb	%blkshf,<;block shift>
 203:					ddb	%blkmsk,<;block mask>
 204:					ddb	%extmsk,<;extnt mask>
 205:					ddw	%(dks)-1,<;disk size-1>
 206:					ddw	%(dir)-1,<;directory max>
 207:					ddb	%dirblk shr 8,<;alloc0>
 208:					ddb	%dirblk and 0ffh,<;alloc1>
 209:					ddw	%(cks)/4,<;check size>
 210:					ddw	%ofs,<;offset>
 211:				;;	generate the translate table, if requested
 212:					if	nul skf
 213:				xlt&dn	equ	0		;no xlate table
 214:					else
 215:					if	skf eq 0
 216:				xlt&dn	equ	0		;no xlate table
 217:					else
 218:				;;	generate the translate table
 219:				nxtsec	set	0	;;next sector to fill
 220:				nxtbas	set	0	;;moves by one on overflow
 221:					gcd	%sectors,skf
 222:				;;	gcdn = gcd(sectors,skew)
 223:				neltst	set	sectors/gcdn
 224:				;;	neltst is number of elements to generate
 225:				;;	before we overlap previous elements
 226:				nelts	set	neltst	;;counter
 227:				xlt&dn	equ	$		;translate table
 228:					rept	sectors ;;once for each sector
 229:					if	sectors lt 256
 230:					ddb	%nxtsec+(fsc)
 231:					else
 232:					ddw	%nxtsec+(fsc)
 233:					endif
 234:				nxtsec	set	nxtsec+(skf)
 235:					if	nxtsec ge sectors
 236:				nxtsec	set	nxtsec-sectors
 237:					endif
 238:				nelts	set	nelts-1
 239:					if	nelts eq 0
 240:				nxtbas	set	nxtbas+1
 241:				nxtsec	set	nxtbas
 242:				nelts	set	neltst
 243:					endif
 244:					endm
 245:					endif	;;end of nul fac test
 246:					endif	;;end of nul bls test
 247:					endif	;; BUG for end of repeat last defn.
 248:					endm
 249:				;
 250:				lds	macro	lb,dn,val
 251:				lb&dn:	ds	val&dn
 252:					endm
 253:				;
 254:				endef	macro
 255:				;;	generate the necessary ram data areas
 256:				begdat	equ	$
 257:				dirbuf: ds	128	;directory access buffer
 258:				dsknxt	set	0
 259:					rept	ndisks	;;once for each disk
 260:					lds	alv,%dsknxt,als
 261:					lds	csv,%dsknxt,css
 262:				dsknxt	set	dsknxt+1
 263:					endm
 264:				enddat	equ	$
 265:				datsiz	equ	$-begdat
 266:				;;	db 0 at this point forces hex record
 267:					endm
 268:				;
**** cbios.asm ****
   7:				
   8:				;	utility macro to compute sector mask
   9:				smask	macro	hblk
  10:				;;	compute log2(hblk), return @x as result
  11:				;;	(2 ** @x = hblk on return)
  12:				@y	set	hblk
  13:				@x	set	0
  14:				;;	count right shifts of @y until = 1
  15:					rept	8
  16:					if	@y = 1
  17:					exitm
  18:					endif
  19:				;;	@y is not 1, shift right one position
  20:				@y	set	@y shr 1
  21:				@x	set	@x + 1
  22:					endm
  23:					endm
  24:				
  25:     -	002F          	msize	equ	47		;cp/m version memory size in kilobytes
  26:				;
  27:				;	"bias" is address offset from 3400h for memory systems
  28:				;	than 16k (referred to as"b" throughout the text)
  29:				;
  30:     -	6C00          	bias	equ	(msize-20)*1024
  31:     -	A000          	ccp	equ	3400h+bias	;base of ccp
  32:     -	A806          	bdos	equ	ccp+806h	;base of bdos
  33:     -	B600          	bios	equ	ccp+1600h	;base of bios
  34:     -	0004          	cdisk	equ	0004h		;current disk number 0=a,... l5=p
  35:     -	0003          	iobyte	equ	0003h		;intel i/o byte
  36:				;
  37:     -	B600          		org	bios		;origin of this program
  38:     -	002C          	nsects	equ	($-ccp)/128	;warm start sector count
  39:				
  40:     -	0008          	bs	equ	8
  41:     -	000D          	cr	equ	13
  42:     -	000A          	lf	equ	10
  43:				
  44:     -	000A          	fdcctrl	equ	0Ah	; Control port (TC)
  45:     -	000B          	fdcdata	equ	0Bh	; Data port
  46:     -	000C          	fdcstat	equ	0Ch	; Status port
  47:     -	0031          	irqstat	equ	031h	; IRQ status fro FDC
  48:				
  49:     -	0030          	porta	equ	030h	; PORTA for keyboard
  50:     -	0031          	portb	equ	031h	; PORTB for disk and keyboard control
  51:     -	0032          	cmda	equ	032h	; Command for PORTA
  52:     -	0033          	cmdb	equ	033h	; Command for PORTB
  53:				
  54:     -	0800          	blksiz	equ	2048		;CP/M allocation size
  55:     -	0100          	hstsiz	equ	256		;host disk sector size
  56:     -	0010          	hstsph	equ	16		;sectors per head
  57:     -	0002          	hsthpc	equ	2		;heads per cylinder
  58:     -	0020          	hstspt	equ	hstsph*hsthpc	;host disk sectors/trk
  59:     -	0002          	hstblk	equ	hstsiz/128	;CP/M sects/host buff
  60:     -	0040          	cpmspt	equ	hstblk*hstspt	;CP/M sectors/track
  61:     -	0001          	secmsk	equ	hstblk-1	;sector mask
  62:     -	        		smask	hstblk		;compute sector mask
  63:     -	0001          	secshf	equ	@x		;log2(hstblk)
  64:				;
  65:     -	0000          	wrall:	equ	0		;write to allocated
  66:     -	0001          	wrdir:	equ	1		;write to directory
  67:     -	0002          	wrual:	equ	2		;write to unallocated
  68:				
  69:				
  70:				;
  71:				;	jump vector for individual subroutines
  72:				;
  73:    0+10	B600  C333B6  		jmp	boot	;cold start
  74:   10+10	B603  C352B6  	wboote:	jmp	wboot	;warm start
  75:   20+10	B606  C3BBB6  		jmp	const	;console status
  76:   30+10	B609  C3C9B6  		jmp	conin	;console character in
  77:   40+10	B60C  C3E7B6  		jmp	conout	;console character out
  78:   50+10	B60F  C352B7  		jmp	list	;list character out
  79:   60+10	B612  C355B7  		jmp	punch	;punch character out
  80:   70+10	B615  C356B7  		jmp	reader	;reader character out
  81:   80+10	B618  C35BB7  		jmp	home	;move head to home position
  82:   90+10	B61B  C378B7  		jmp	seldsk	;select disk
  83:  100+10	B61E  C388B7  		jmp	settrk	;set track number
  84:  110+10	B621  C38FB7  		jmp	setsec	;set sector number
  85:  120+10	B624  C394B7  		jmp	setdma	;set dma address
  86:  130+10	B627  C39DB7  		jmp	read	;read disk
  87:  140+10	B62A  C3B1B7  		jmp	write	;write disk
  88:  150+10	B62D  C353B7  		jmp	listst	;return list status
  89:  160+10	B630  C39AB7  		jmp	sectran	;sector translate
  90:				
  91:				
  92:				;
  93:				;	end of fixed tables
  94:				;
  95:				;	individual subroutines to perform each function
  96:  170+4	B633  F3      	boot:	di
  97:  174+10	B634  319FBA  		lxi	sp, stack
  98:  184+7	B637  3E01    		mvi	a, 01h		;CRT is the default device
  99:  191+13	B639  320300  		sta	iobyte		;clear the iobyte
 100:  204+4	B63C  AF      		xra	a		;zero in the accum
 101:  208+13	B63D  320400  		sta	cdisk		;select disk zero
 102:  221+13	B640  323CBC  		sta	hstact		;host buffer inactive
 103:  234+13	B643  323EBC  		sta	unacnt		;clear unalloc count
 104:  247+10	B646  1168BA  		lxi	d,mesg		; Signon message
 105:  257+17	B649  CD0DBA  		call	print
 106:  274+17	B64C  CD9BB9  		call	fdcrst		;Initialise FDC
 107:  291+10	B64F  C396B6  		jmp	gocpm		;initialize and go to cp/m
 108:				;
 109:     -	B652          	wboot:	;simplest case is to read the disk until all sectors loaded
 110:  301+4	B652  F3      		di
 111:  305+10	B653  318000  		lxi	sp, 80h		;use space below buffer for stack
 112:  315+17	B656  CD9BB9  		call	fdcrst		;Initialise FDC
 113:  332+7	B659  0E00    		mvi	c, 0		;select disk 0
 114:  339+17	B65B  CD78B7  		call	seldsk
 115:  356+17	B65E  CD5BB7  		call	home		;go to track 00
 116:				;
 117:  373+7	B661  062C    		mvi	b, nsects	;b counts * of sectors to load
 118:  380+7	B663  0E00    		mvi	c, 0		;c has the current track number
 119:  387+7	B665  1602    		mvi	d, 2		;d has the next sector to read
 120:				;	note that we begin by reading track 0, sector 2 since sector 1
 121:				;	contains the cold start loader, which is skipped in a warm start
 122:  394+10	B667  2100A0  		lxi	h, ccp		;base of cp/m (initial load point)
 123:  404+7	B66A  0E00    		mvi	c, 0	; start at sector 1, head 0, track 0
 124:  411+10	B66C  110100  		lxi	d, 1
 125:  421+7	B66F  065F    		mvi	b, (0FFFFh-ccp)/hstsiz
 126:  428+5	B671  7B      	rdloop	mov	a, e
 127:  433+13	B672  323ABC  		sta	hstsec
 128:  446+5	B675  7A      		mov	a, d
 129:  451+13	B676  3238BC  		sta	hsttrk
 130:  464+7	B679  3E00    		mvi	a, 0
 131:  471+13	B67B  3239BC  		sta	hsttrk+1
 132:  484+11	B67E  C5      		push	bc
 133:  495+11	B67F  D5      		push	de
 134:  506+17	B680  CDC9B8  		call	readhst
 135:  523+10	B683  D1      		pop	de
 136:  533+10	B684  C1      		pop	bc
 137:  543+5	B685  05      		dcr	b
 138:  548+10	B686  CA96B6  		jz	gocpm	; Go to CP/M when done
 139:  558+5	B689  1C      		inr	e
 140:  563+7	B68A  3E20    		mvi	a, hstspt
 141:  570+4	B68C  BB      		cmp	e
 142:  574+10	B68D  C271B6  		jnz	rdloop
 143:  584+7	B690  1E00    		mvi	e, 0
 144:  591+5	B692  14      		inr	d
 145:  596+10	B693  F271B6  		jp	rdloop
 146:				;
 147:				;	end of	load operation, set parameters and go to cp/m
 148:  606+17	B696  CD18BA  	gocpm:	call	kbinit
 149:  623+7	B699  3EC3    		mvi	a, 0c3h		;c3 is a jmp instruction
 150:  630+13	B69B  320000  		sta	0		;for jmp to wboot
 151:  643+10	B69E  2103B6  		lxi	h, wboote	;wboot entry point
 152:  653+16	B6A1  220100  		shld	1		;set address field for jmp at 0
 153:				;
 154:  669+13	B6A4  320500  		sta	5		;for jmp to bdos
 155:  682+10	B6A7  2106A8  		lxi	h, bdos		;bdos entry point
 156:  692+16	B6AA  220600  		shld	6		;address field of Jump at 5 to bdos
 157:				;
 158:  708+10	B6AD  018000  		lxi	b, 80h		;default dma address is 80h
 159:  718+17	B6B0  CD94B7  		call	setdma
 160:				;
 161:  735+4	B6B3  FB      		ei			;enable the interrupt system
 162:  739+13	B6B4  3A0400  		lda	cdisk		;get current disk number
 163:  752+5	B6B7  4F      		mov	c, a		;send to the ccp
 164:  757+10	B6B8  C300A0  		jmp	ccp		;go to cp/m for further processing
 165:				;
 166:				;
 167:				; I/O handlers
 168:				; 
 169:				
 170:				; Console status
 171:  767+13	B6BB  3AD2BB  	const:	lda	inptr		; If inptr and outptr are the same
 172:  780+5	B6BE  47      		mov	b, a
 173:  785+13	B6BF  3AD3BB  		lda	outptr
 174:  798+4	B6C2  B8      		cmp	b
 175:  802+7	B6C3  3E00    		mvi	a, 0
 176:  809+5+6	B6C5  C8      		rz			; Return with no characters ready
 177:  814+7	B6C6  3EFF    		mvi	a, 0FFh
 178:  821+10	B6C8  C9      		ret
 179:				
 180:				; Console in
 181:  831+17	B6C9  CDBBB6  	conin	call	const		; Wait for availability
 182:     -	B6CC  28FB    		jrz	conin
 183:  848+13	B6CE  3AD3BB  		lda	outptr
 184:  861+5	B6D1  5F      		mov	e, a		; Offset within buffer
 185:  866+7	B6D2  1600    		mvi	d, 0
 186:  873+10	B6D4  21B2BB  		lxi	h, buffer	; Buffer origin
 187:  883+10	B6D7  19      		dad	d
 188:  893+5	B6D8  3C      		inr	a
 189:  898+7	B6D9  E61F    		ani	31		; Modulo 32
 190:  905+13	B6DB  32D3BB  		sta	outptr
 191:  918+7	B6DE  5E      		mov	e, m
 192:  925+7	B6DF  1600    		mvi	d, 0
 193:  932+10	B6E1  21A0BA  		lxi	h, keytab	; Get scancode translation from keytab
 194:  942+10	B6E4  19      		dad	d
 195:  952+7	B6E5  7E      		mov	a, m
 196:  959+10	B6E6  C9      		ret
 197:				
 198:				; Console out
 199:  969+7	B6E7  3E0D    	conout	mvi	a, cr
 200:  976+4	B6E9  B9      		cmp	c
 201:     -	B6EA  2831    		jrz	concr
 202:  980+7	B6EC  3E0A    		mvi	a, lf
 203:  987+4	B6EE  B9      		cmp	c
 204:     -	B6EF  2838    		jrz	conlf
 205:  991+7	B6F1  3E08    		mvi	a, bs
 206:  998+4	B6F3  B9      		cmp	c
 207:     -	B6F4  282C    		jrz	conbs
 208: 1002+7	B6F6  3E20    		mvi	a, ' '
 209: 1009+4	B6F8  B9      		cmp	c
 210:     -	B6F9  2002    		jrnz	conout1
 211: 1013+7	B6FB  0E00    		mvi	c, 0		; Blank for space
 212: 1020+11	B6FD  D5      	conout1	push	d
 213: 1031+16	B6FE  2A59B7  		lhld	cursor
 214: 1047+11	B701  E5      		push	h
 215: 1058+10	B702  1100E0  		lxi	d, 0E000h	; CRT base address
 216: 1068+10	B705  19      		dad	d
 217: 1078+7	B706  71      		mov	m, c
 218: 1085+10	B707  E1      		pop	h
 219: 1095+10	B708  D1      		pop	d
 220: 1105+5	B709  23      		inx	h
 221: 1110+16	B70A  2259B7  		shld	cursor
 222: 1126+7	B70D  3E50    		mvi	a, 80		; 80 columns
 223: 1133+4	B70F  BD      		cmp	l
 224: 1137+5+6	B710  C0      		rnz
 225: 1142+7	B711  2E00    		mvi	l, 0		; Newline
 226: 1149+5	B713  24      		inr	h
 227: 1154+16	B714  2259B7  		shld	cursor
 228: 1170+10	B717  215AB7  		lxi	h, cursor+1
 229: 1180+7	B71A  7E      		mov	a, m
 230:     -	B71B  1811    		jr	scroll
 231:				
 232: 1187+4	B71D  AF      	concr:	xra	a		; Low byte is column
 233: 1191+13	B71E  3259B7  		sta	cursor
 234: 1204+10	B721  C9      		ret
 235:					
 236: 1214+10	B722  2159B7  	conbs:	lxi	h, cursor	; Point at cursor column
 237: 1224+10	B725  35      		dcr	m		; Backspace it
 238: 1234+5+6	B726  D0      		rnc			; Too far?
 239: 1239+10	B727  34      		inr	m		; Undo
 240: 1249+10	B728  C9      		ret
 241:					
 242: 1259+10	B729  215AB7  	conlf:	lxi	h, cursor+1	; Newline and scroll
 243: 1269+10	B72C  34      		inr	m		; High byte is line
 244: 1279+7	B72D  7E      		mov	a, m
 245:				
 246: 1286+7	B72E  FE18    	scroll:	cpi	24
 247: 1293+5+6	B730  D8      		rc
 248: 1298+10	B731  35      		dcr	m
 249:				
 250: 1308+7	B732  3EE0    		mvi	a, 0E0h
 251: 1315+11	B734  F5      	scrll:	push	a
 252: 1326+5	B735  57      		mov	d, a
 253: 1331+7	B736  1E00    		mvi	e, 0
 254: 1338+5	B738  3C      		inr	a
 255: 1343+5	B739  67      		mov	h, a
 256: 1348+7	B73A  2E00    		mvi	l, 0
 257: 1355+10	B73C  015000  		lxi	b, 80
 258:     -	B73F  EDB0    		ldir
 259: 1365+10	B741  F1      		pop	a
 260: 1375+5	B742  3C      		inr	a
 261: 1380+7	B743  FEF7    		cpi	0F7h
 262:     -	B745  20ED    		jrnz	scrll
 263:					
 264: 1387+4	B747  AF      		xra	a		; Last line blanked
 265: 1391+10	B748  2100F7  		lxi	h, 0F700h
 266: 1401+7	B74B  0650    		mvi	b, 80
 267: 1408+7	B74D  77      	endlin:	mov	m, a
 268: 1415+5	B74E  23      		inx	h
 269:     -	B74F  10FC    		djnz	endlin
 270: 1420+10	B751  C9      		ret
 271:					
 272:				
 273:				
 274:				; List out
 275: 1430+10	B752  C9      	list:	ret
 276:				
 277:				; List status
 278: 1440+4	B753  AF      	listst	xra	a
 279: 1444+10	B754  C9      		ret
 280:				
 281:				; Punch out
 282: 1454+10	B755  C9      	punch	ret
 283:				
 284:				; Reader in
 285: 1464+7	B756  3E1A    	reader	mvi	a, 01Ah		; Return EOF for reader device
 286: 1471+10	B758  C9      		ret
 287:				
 288:				
 289:     -	B759  0000    	cursor	dw	0		; Cursor position
 290:				;
 291:				;
 292:				;	i/o drivers for the disk follow
 293:				;	for now, we will simply store the parameters away for use
 294:				;	in the read and write	subroutines
 295:				;
 296:					;home the selected disk
 297: 1481+13	B75B  3A3DBC  	home:	lda	hstwrt	;check for pending write
 298: 1494+4	B75E  B7      		ora	a
 299: 1498+10	B75F  C265B7  		jnz	homed
 300: 1508+13	B762  323CBC  		sta	hstact	;clear host active flag
 301: 1521+10	B765  010000  	homed:	lxi	b, 0
 302: 1531+17	B768  CD88B7  		call	settrk
 303:					
 304: 1548+7	B76B  3E07    		mvi	a, 007h		; Recalibrate
 305: 1555+17	B76D  CDEFB9  		call	fdcio
 306: 1572+7	B770  3E01    		mvi	a, 1		; Permanently on drive 1 for now
 307: 1579+17	B772  CDEFB9  		call	fdcio
 308:					
 309: 1596+10	B775  C355B9  		jmp	waitirq
 310:					
 311:					;ret
 312:				;
 313:     -	B778          	seldsk:
 314:					;select disk
 315: 1606+5	B778  79      		mov	a,c		;selected disk number
 316: 1611+13	B779  3233BC  		sta	sekdsk		;seek disk number
 317: 1624+5	B77C  6F      		mov	l,a		;disk number to HL
 318: 1629+7	B77D  2600    		mvi	h,0
 319: 1636+40	B77F  29292929		rept	4		;multiply by 16
 322: 1676+10	B783  11D4BB  		lxi	d,dpbase	;base of parm block
 323: 1686+10	B786  19      		dad	d		;hl=.dpb(curdsk)
 324: 1696+10	B787  C9      		ret
 325:					;
 326:     -	B788          	settrk:	;set track given by register bc
 327:					;mov	h,b
 328: 1706+7	B788  2600    		mvi	h,0
 329: 1713+5	B78A  69      		mov	l,c
 330: 1718+16	B78B  2234BC  		shld	sektrk
 331: 1734+10	B78E  C9      		ret
 332:				;
 333:     -	B78F          	setsec:
 334:					;set sector given by register c 
 335: 1744+5	B78F  79      		mov	a,c
 336: 1749+13	B790  3236BC  		sta	seksec		;sector to seek
 337:					;jmp	phex
 338: 1762+10	B793  C9      		ret
 339:				
 340:     -	B794          	setdma:
 341:					;set dma address given by BC
 342: 1772+5	B794  60      		mov	h,b
 343: 1777+5	B795  69      		mov	l,c
 344: 1782+16	B796  2247BC  		shld	dmaadr
 345: 1798+10	B799  C9      		ret
 346:				;
 347:     -	B79A          	sectran:
 348:					;translate sector number BC
 349: 1808+5	B79A  60      		mov	h,b
 350: 1813+5	B79B  69      		mov	l,c
 351: 1818+10	B79C  C9      		ret
 352:				;
 353:				;*****************************************************
 354:				;*                                                   *
 355:				;*	The READ entry point takes the place of      *
 356:				;*	the previous BIOS defintion for READ.        *
 357:				;*                                                   *
 358:				;*****************************************************
 359:     -	B79D          	read:
 360:					;read the selected CP/M sector
 361: 1828+4	B79D  AF      		xra	a
 362: 1832+13	B79E  323EBC  		sta	unacnt
 363: 1845+7	B7A1  3E01    		mvi	a,1
 364: 1852+13	B7A3  3245BC  		sta	readop		;read operation
 365: 1865+13	B7A6  3244BC  		sta	rsflag		;must read data
 366: 1878+7	B7A9  3E02    		mvi	a,wrual
 367: 1885+13	B7AB  3246BC  		sta	wrtype		;treat as unalloc
 368: 1898+10	B7AE  C31CB8  		jmp	rwoper		;to perform the read
 369:				;
 370:				;*****************************************************
 371:				;*                                                   *
 372:				;*	The WRITE entry point takes the place of     *
 373:				;*	the previous BIOS defintion for WRITE.       *
 374:				;*                                                   *
 375:				;*****************************************************
 376:     -	B7B1          	write:
 377:					;write the selected CP/M sector
 378: 1908+4	B7B1  AF      		xra	a		;0 to accumulator
 379: 1912+13	B7B2  3245BC  		sta	readop		;not a read operation
 380: 1925+5	B7B5  79      		mov	a,c		;write type in c
 381: 1930+13	B7B6  3246BC  		sta	wrtype
 382: 1943+7	B7B9  FE02    		cpi	wrual		;write unallocated?
 383: 1950+10	B7BB  C2D5B7  		jnz	chkuna		;check for unalloc
 384:				;
 385:				;	write to unallocated, set parameters
 386: 1960+7	B7BE  3E10    		mvi	a,blksiz/128	;next unalloc recs
 387: 1967+13	B7C0  323EBC  		sta	unacnt
 388: 1980+13	B7C3  3A33BC  		lda	sekdsk		;disk to seek
 389: 1993+13	B7C6  323FBC  		sta	unadsk		;unadsk = sekdsk
 390: 2006+16	B7C9  2A34BC  		lhld	sektrk
 391: 2022+16	B7CC  2240BC  		shld	unatrk		;unatrk = sectrk
 392: 2038+13	B7CF  3A36BC  		lda	seksec
 393: 2051+13	B7D2  3242BC  		sta	unasec		;unasec = seksec
 394:				;
 395:     -	B7D5          	chkuna:
 396:					;check for write to unallocated sector
 397: 2064+13	B7D5  3A3EBC  		lda	unacnt		;any unalloc remain?
 398: 2077+4	B7D8  B7      		ora	a
 399: 2081+10	B7D9  CA14B8  		jz	alloc		;skip if not
 400:				;
 401:				;	more unallocated records remain
 402: 2091+5	B7DC  3D      		dcr	a		;unacnt = unacnt-1
 403: 2096+13	B7DD  323EBC  		sta	unacnt
 404: 2109+13	B7E0  3A33BC  		lda	sekdsk		;same disk?
 405: 2122+10	B7E3  213FBC  		lxi	h,unadsk
 406: 2132+7	B7E6  BE      		cmp	m		;sekdsk = unadsk?
 407: 2139+10	B7E7  C214B8  		jnz	alloc		;skip if not
 408:				;
 409:				;	disks are the same
 410: 2149+10	B7EA  2140BC  		lxi	h,unatrk
 411: 2159+17	B7ED  CDB7B8  		call	sektrkcmp	;sektrk = unatrk?
 412: 2176+10	B7F0  C214B8  		jnz	alloc		;skip if not
 413:				;
 414:				;	tracks are the same
 415: 2186+13	B7F3  3A36BC  		lda	seksec		;same sector?
 416: 2199+10	B7F6  2142BC  		lxi	h,unasec
 417: 2209+7	B7F9  BE      		cmp	m		;seksec = unasec?
 418: 2216+10	B7FA  C214B8  		jnz	alloc		;skip if not
 419:				;
 420:				;	match, move to next sector for future ref
 421: 2226+10	B7FD  34      		inr	m		;unasec = unasec+1
 422: 2236+7	B7FE  7E      		mov	a,m		;end of track?
 423: 2243+7	B7FF  FE40    		cmp	cpmspt		;count CP/M sectors
 424: 2250+10	B801  DA0DB8  		jc	noovf		;skip if no overflow
 425:				;
 426:				;	overflow to next track
 427: 2260+10	B804  3600    		mvi	m,0		;unasec = 0
 428: 2270+16	B806  2A40BC  		lhld	unatrk
 429: 2286+5	B809  23      		inx	h
 430: 2291+16	B80A  2240BC  		shld	unatrk		;unatrk = unatrk+1
 431:				;
 432:     -	B80D          	noovf:
 433:					;match found, mark as unnecessary read
 434: 2307+4	B80D  AF      		xra	a		;0 to accumulator
 435: 2311+13	B80E  3244BC  		sta	rsflag		;rsflag = 0
 436: 2324+10	B811  C31CB8  		jmp	rwoper		;to perform the write
 437:				;
 438:     -	B814          	alloc:
 439:					;not an unallocated record, requires pre-read
 440: 2334+4	B814  AF      		xra	a		;0 to accum
 441: 2338+13	B815  323EBC  		sta	unacnt		;unacnt = 0
 442: 2351+5	B818  3C      		inr	a		;1 to accum
 443: 2356+13	B819  3244BC  		sta	rsflag		;rsflag = 1
 444:				;
 445:				;*****************************************************
 446:				;*                                                   *
 447:				;*	Common code for READ and WRITE follows       *
 448:				;*                                                   *
 449:				;*****************************************************
 450:     -	B81C          	rwoper:
 451:					;enter here to perform the read/write
 452: 2369+4	B81C  AF      		xra	a		;zero to accum
 453: 2373+13	B81D  3243BC  		sta	erflag		;no errors (yet)
 454: 2386+13	B820  3A36BC  		lda	seksec		;compute host sector
 455: 2399+8	B823  B71F    		rept	secshf
 459: 2407+13	B825  323BBC  		sta	sekhst		;host sector to seek
 460:				;
 461:				;	active host sector?
 462: 2420+10	B828  213CBC  		lxi	h,hstact	;host active flag
 463: 2430+7	B82B  7E      		mov	a,m
 464: 2437+10	B82C  3601    		mvi	m,1		;always becomes 1
 465: 2447+4	B82E  B7      		ora	a		;was it already?
 466: 2451+10	B82F  CA56B8  		jz	filhst		;fill host if not
 467:				;
 468:				;	host buffer active, same as seek buffer?
 469: 2461+13	B832  3A33BC  		lda	sekdsk
 470: 2474+10	B835  2137BC  		lxi	h,hstdsk	;same disk?
 471: 2484+7	B838  BE      		cmp	m		;sekdsk = hstdsk?
 472: 2491+10	B839  C24FB8  		jnz	nomatch
 473:				;
 474:				;	same disk, same track?
 475: 2501+10	B83C  2138BC  		lxi	h,hsttrk
 476: 2511+17	B83F  CDB7B8  		call	sektrkcmp	;sektrk = hsttrk?
 477: 2528+10	B842  C24FB8  		jnz	nomatch
 478:				;
 479:				;	same disk, same track, same buffer?
 480: 2538+13	B845  3A3BBC  		lda	sekhst
 481: 2551+10	B848  213ABC  		lxi	h,hstsec	;sekhst = hstsec?
 482: 2561+7	B84B  BE      		cmp	m
 483: 2568+10	B84C  CA73B8  		jz	match		;skip if match
 484:				;
 485:     -	B84F          	nomatch:
 486:					;proper disk, but not correct sector
 487: 2578+13	B84F  3A3DBC  		lda	hstwrt		;host written?
 488: 2591+4	B852  B7      		ora	a
 489: 2595+11+6	B853  C4C3B8  		cnz	writehst	;clear host buff
 490:				;
 491:     -	B856          	filhst:
 492:					;may have to fill the host buffer
 493: 2606+13	B856  3A33BC  		lda	sekdsk
 494: 2619+13	B859  3237BC  		sta	hstdsk
 495: 2632+16	B85C  2A34BC  		lhld	sektrk
 496: 2648+16	B85F  2238BC  		shld	hsttrk
 497: 2664+13	B862  3A3BBC  		lda	sekhst
 498: 2677+13	B865  323ABC  		sta	hstsec
 499: 2690+13	B868  3A44BC  		lda	rsflag		;need to read?
 500: 2703+4	B86B  B7      		ora	a
 501: 2707+11+6	B86C  C4C9B8  		cnz	readhst		;yes, if 1
 502: 2718+4	B86F  AF      		xra	a		;0 to accum
 503: 2722+13	B870  323DBC  		sta	hstwrt		;no pending write
 504:				;
 505:     -	B873          	match:
 506:					;copy data to or from buffer
 507: 2735+13	B873  3A36BC  		lda	seksec		;mask buffer number
 508: 2748+7	B876  E601    		ani	secmsk		;least signif bits
 509: 2755+5	B878  6F      		mov	l,a		;ready to shift
 510: 2760+7	B879  2600    		mvi	h,0		;double count
 511: 2767+70	B87B  29292929		rept	7		;shift left 7
	              292929
 514:				;	hl has relative host buffer address
 515: 2837+10	B882  1149BC  		lxi	d,hstbuf
 516: 2847+10	B885  19      		dad	d		;hl = host address
 517: 2857+4	B886  EB      		xchg			;now in DE
 518: 2861+16	B887  2A47BC  		lhld	dmaadr		;get/put CP/M data
 519: 2877+7	B88A  0E80    		mvi	c,128		;length of move
 520: 2884+13	B88C  3A45BC  		lda	readop		;which way?
 521: 2897+4	B88F  B7      		ora	a
 522: 2901+10	B890  C299B8  		jnz	rwmove		;skip if read
 523:				;
 524:				;	write operation, mark and switch direction
 525: 2911+7	B893  3E01    		mvi	a,1
 526: 2918+13	B895  323DBC  		sta	hstwrt		;hstwrt = 1
 527: 2931+4	B898  EB      		xchg			;source/dest swap
 528:				;
 529:     -	B899          	rwmove:
 530:					;C initially 128, DE is source, HL is dest
 531: 2935+7	B899  1A      		ldax	d		;source character
 532: 2942+5	B89A  13      		inx	d
 533: 2947+7	B89B  77      		mov	m,a		;to dest
 534: 2954+5	B89C  23      		inx	h
 535: 2959+5	B89D  0D      		dcr	c		;loop 128 times
 536: 2964+10	B89E  C299B8  		jnz	rwmove
 537:				;
 538:				;	data has been moved to/from host buffer
 539: 2974+13	B8A1  3A46BC  		lda	wrtype		;write type
 540: 2987+7	B8A4  FE01    		cpi	wrdir		;to directory?
 541: 2994+13	B8A6  3A43BC  		lda	erflag		;in case of errors
 542: 3007+5+6	B8A9  C0      		rnz			;no further processing
 543:				;
 544:				;	clear host buffer for directory write
 545: 3012+4	B8AA  B7      		ora	a		;errors?
 546: 3016+5+6	B8AB  C0      		rnz			;skip if so
 547: 3021+4	B8AC  AF      		xra	a		;0 to accum
 548: 3025+13	B8AD  323DBC  		sta	hstwrt		;buffer written
 549: 3038+17	B8B0  CDC3B8  		call	writehst
 550: 3055+13	B8B3  3A43BC  		lda	erflag
 551: 3068+10	B8B6  C9      		ret
 552:				;
 553:				;*****************************************************
 554:				;*                                                   *
 555:				;*	Utility subroutine for 16-bit compare        *
 556:				;*                                                   *
 557:				;*****************************************************
 558:     -	B8B7          	sektrkcmp:
 559:					;HL = .unatrk or .hsttrk, compare with sektrk
 560: 3078+4	B8B7  EB      		xchg
 561: 3082+10	B8B8  2134BC  		lxi	h,sektrk
 562: 3092+7	B8BB  1A      		ldax	d		;low byte compare
 563: 3099+7	B8BC  BE      		cmp	m		;same?
 564: 3106+5+6	B8BD  C0      		rnz			;return if not
 565:				;	low bytes equal, test high 1s
 566: 3111+5	B8BE  13      		inx	d
 567: 3116+5	B8BF  23      		inx	h
 568: 3121+7	B8C0  1A      		ldax	d
 569: 3128+7	B8C1  BE      		cmp	m	;sets flags
 570: 3135+10	B8C2  C9      		ret
 571:				;
 572:				;*****************************************************
 573:				;*                                                   *
 574:				;*	WRITEHST performs the physical write to      *
 575:				;*	the host disk, READHST reads the physical    *
 576:				;*	disk.					     *
 577:				;*                                                   *
 578:				;*****************************************************
 579:     -	B8C3          	writehst:
 580:					;hstdsk = host disk #, hsttrk = host track #,
 581:					;hstsec = host sect #. write "hstsiz" bytes
 582:					;from hstbuf and return error flag in erflag.
 583:					;return erflag non-zero if error
 584: 3145+7	B8C3  F6FF    		ora	0FFh
 585: 3152+13	B8C5  3243BC  		sta	erflag
 586: 3165+10	B8C8  C9      		ret
 587:				
 588:				;
 589:     -	B8C9          	readhst:
 590:					;hstdsk = host disk #, hsttrk = host track #,
 591:					;hstsec = host sect #. read "hstsiz" bytes
 592:					;into hstbuf and return error flag in erflag.
 593:				;	lxi	d, crlf
 594:				;	call	print
 595: 3175+10	B8C9  219FBA  		lxi	h, retry
 596: 3185+10	B8CC  3603    		mvi	m, 3		; Retry attempts
 597:					
 598:				
 599:     -	B8CE          	readhst$loop:
 600: 3195+17	B8CE  CDE2B8  		call	readhst$main
 601: 3212+4	B8D1  B7      		ora	a
 602: 3216+5+6	B8D2  C8      		rz
 603: 3221+17	B8D3  CD9BB9  		call	fdcrst
 604: 3238+10	B8D6  219FBA  		lxi	h, retry
 605: 3248+10	B8D9  35      		dcr	m
 606:     -	B8DA  20F2    		jrnz	readhst$loop
 607: 3258+7	B8DC  3E01    		mvi	a, 1		; Return with error
 608: 3265+13	B8DE  3243BC  		sta	erflag
 609: 3278+10	B8E1  C9      		ret
 610:					
 611:					;
 612:					; Main read hoast function
 613:					;
 614:     -	B8E2          	readhst$main:
 615: 3288+10	B8E2  DB0A    		in	fdcctrl		; Motor 1 on
 616:     -	B8E4  CBD7    		setb	2, a
 617: 3298+10	B8E6  D30A    		out	fdcctrl
 618:				
 619: 3308+17	B8E8  CD36B9  		call	seektrk
 620:						
 621: 3325+17	B8EB  CDC2B9  		call	fdcwait
 622: 3342+4	B8EE  F3      		di
 623: 3346+7	B8EF  3E46    		mvi	a, 046h		; Read sector MFM
 624: 3353+10	B8F1  010B00  		lxi	b, fdcdata	; B = 0 C = port
 625: 3363+10	B8F4  2149BC  		lxi	h, hstbuf
 626: 3373+17	B8F7  CDEFB9  		call	fdcio
 627: 3390+17	B8FA  CD5CB9  		call	dchrn		; Drive C H R N
 628:					
 629:					; Main read loop
 630: 3407+10	B8FD  DB31    	readl:	in	irqstat
 631: 3417+4	B8FF  87      		add	a
 632:     -	B900  380A    		jrc	fdcret
 633: 3421+10	B902  F2FDB8  		jp	p,readl
 634:     -	B905  EDA2    		ini
 635:     -	B907  20F4    		jrnz	readl
 636: 3431+17	B909  CD02BA  		call	fdctc		; Send TC
 637:				
 638:					; Exit read/write function here
 639: 3448+4	B90C  FB      	fdcret:	ei
 640: 3452+17	B90D  CDEFB9  		call	fdcio
 641: 3469+7	B910  E6D8    		ani	0D8h		; Interested in bits 7,6,4,3
 642: 3476+5	B912  47      		mov	b, a
 643: 3481+17	B913  CDEFB9  		call	fdcio		; ST1
 644: 3498+4	B916  B0      		ora	b
 645: 3502+5	B917  47      		mov	b, a
 646: 3507+17	B918  CDEFB9  		call	fdcio		; ST2
 647: 3524+7	B91B  E63F    		ani	03Fh		; Interested in bits 5..0
 648: 3531+4	B91D  B0      		ora	b
 649: 3535+5	B91E  47      		mov	b, a
 650:					
 651: 3540+17	B91F  CDEFB9  		call	fdcio		; C
 652: 3557+17	B922  CDEFB9  		call	fdcio		; H
 653: 3574+17	B925  CDEFB9  		call	fdcio		; R
 654: 3591+17	B928  CDEFB9  		call	fdcio		; N
 655:					
 656: 3608+10	B92B  DB0A    		in	fdcctrl		; Motor 1 off
 657:     -	B92D  CB97    		res	2, a
 658: 3618+10	B92F  D30A    		out	fdcctrl
 659:					
 660: 3628+5	B931  78      		mov	a, b
 661: 3633+13	B932  3243BC  		sta	erflag
 662: 3646+10	B935  C9      		ret	
 663:				
 664:     -	B936          	seektrk:
 665: 3656+17	B936  CDC2B9  		call	fdcwait
 666: 3673+7	B939  3E0F    		mvi	a, 00Fh		; SEEK
 667: 3680+17	B93B  CDEFB9  		call	fdcio
 668: 3697+13	B93E  3A37BC  		lda	hstdsk		; Current disk
 669: 3710+5	B941  3C      		inr	a
 670: 3715+5	B942  47      		mov	b, a
 671: 3720+13	B943  3A38BC  		lda	hsttrk
 672: 3733+7	B946  E620    		ani	020h		; high byte of 0..31 is side
 673: 3740+4	B948  1F      		rar			; Move bit D4 to D2
 674: 3744+4	B949  1F      		rar
 675: 3748+4	B94A  1F      		rar
 676: 3752+4	B94B  B0      		ora	a, b
 677: 3756+17	B94C  CDEFB9  		call	fdcio
 678: 3773+13	B94F  3A38BC  		lda	hsttrk		; Current track
 679: 3786+17	B952  CDEFB9  		call	fdcio
 680:				
 681: 3803+10	B955  DB31    	waitirq	in	portb
 682:     -	B957  CB7F    		bit	7, a
 683:     -	B959  28FA    		jrz	waitirq
 684:				
 685: 3813+10	B95B  C9      		ret
 686:				
 687: 3823+13	B95C  3A37BC  	dchrn:	lda	hstdsk		; Disk 1..2
 688: 3836+5	B95F  3C      		inr	a		; 1..2 thank you!
 689: 3841+5	B960  47      		mov	b, a
 690: 3846+13	B961  3A3ABC  		lda	hstsec
 691: 3859+4	B964  1F      		rar			; Move bit D4 to D2
 692: 3863+4	B965  1F      		rar
 693: 3867+7	B966  E604    		ani	004h
 694: 3874+4	B968  B0      		ora	a, b
 695: 3878+17	B969  CDEFB9  		call	fdcio
 696:					
 697: 3895+13	B96C  3A38BC  		lda	hsttrk		; Cylinder
 698: 3908+17	B96F  CDEFB9  		call	fdcio
 699:					
 700: 3925+13	B972  3A3ABC  		lda	hstsec
 701: 3938+4	B975  1F      		rar			; D4 to D0
 702: 3942+4	B976  1F      		rar
 703: 3946+4	B977  1F      		rar
 704: 3950+4	B978  1F      		rar
 705: 3954+7	B979  E601    		ani	1
 706: 3961+17	B97B  CDEFB9  		call	fdcio
 707:					
 708: 3978+13	B97E  3A3ABC  		lda	hstsec		; Record
 709: 3991+7	B981  E60F    		ani	00Fh		; 
 710: 3998+5	B983  3C      		inr	a		; 1..16
 711: 4003+17	B984  CDEFB9  		call	fdcio
 712:					
 713: 4020+7	B987  3E01    		mvi	a, 1		; 256 bytes per sector
 714: 4027+17	B989  CDEFB9  		call	fdcio
 715:					
 716: 4044+7	B98C  3E10    		mvi	a, 16		; EOT
 717: 4051+17	B98E  CDEFB9  		call	fdcio
 718:					
 719: 4068+7	B991  3E18    		mvi	a, 018h		; Gap Length
 720: 4075+17	B993  CDEFB9  		call	fdcio
 721:					
 722: 4092+4	B996  AF      		xra	a		; DTL
 723: 4096+17	B997  CDEFB9  		call	fdcio
 724: 4113+10	B99A  C9      		ret
 725:				
 726: 4123+7	B99B  3EFF    	fdcrst:	mvi	a, 0FFh		; Mode 3
 727: 4130+10	B99D  D333    		out	cmdb
 728: 4140+7	B99F  3EC1    		ld	a, 0C1h		; Specify input bits
 729: 4147+10	B9A1  D333    		out	cmdb
 730:					
 731: 4157+10	B9A3  DB0A    		in	fdcctrl
 732:     -	B9A5  CBEF    		setb	5,a		; Reset pin
 733: 4167+10	B9A7  D30A    		out	fdcctrl
 734: 4177+7	B9A9  0600    		mvi	b, 0
 735:     -	B9AB  10FE    	_fdr1:	djnz	_fdr1
 736:     -	B9AD  CBAF    		res	5,a
 737: 4184+10	B9AF  D30A    		out	fdcctrl
 738:     -	B9B1  10FE    	_fdr2:	djnz	_fdr2
 739:				
 740: 4194+7	B9B3  3E03    		mvi	a, 03h		; Specify
 741: 4201+17	B9B5  CDEFB9  		call	fdcio
 742: 4218+7	B9B8  3EBF    		mvi	a, 0BFh		; Step rate, head unload time
 743: 4225+17	B9BA  CDEFB9  		call	fdcio
 744: 4242+7	B9BD  3E10    		mvi	a, 010h		; Head load time
 745: 4249+10	B9BF  C3EFB9  		jmp	fdcio
 746:				
 747:     -	B9C2          	fdcwait:
 748: 4259+10	B9C2  010000  		lxi	b, 0
 749:					
 750: 4269+10	B9C5  DB0C    	fdcwl	in	fdcstat
 751:					;push	psw
 752:					;call	phex
 753:					;lxi	d, bsbsbs
 754:					;call	print
 755:					;pop	psw
 756: 4279+7	B9C7  E6C0    		and	0C0h		; RQM, DIO and seek status
 757: 4286+7	B9C9  FE80    		cpi	080h
 758: 4293+5+6	B9CB  C8      		rz
 759:					
 760: 4298+5	B9CC  0B      		dcx	b
 761: 4303+5	B9CD  78      		mov	a, b
 762: 4308+4	B9CE  B1      		ora	c
 763:     -	B9CF  20F4    		jrnz	fdcwl
 764:					
 765: 4312+10	B9D1  DB0A    		in	fdcctrl
 766:     -	B9D3  CBEF    		setb	5, a
 767: 4322+10	B9D5  D30A    		out	fdcctrl
 768: 4332+17	B9D7  CDE8B9  		call	wait
 769:     -	B9DA  CBAF    		res	5, a
 770: 4349+10	B9DC  D30A    		out	fdcctrl
 771: 4359+17	B9DE  CDE8B9  		call	wait
 772:				
 773: 4376+7	B9E1  0E2E    		mvi	c, '.'
 774: 4383+17	B9E3  CDE7B6  		call	conout
 775:     -	B9E6  18DD    		jr	fdcwl
 776:				
 777: 4400+5	B9E8  0B      	wait	dcx	b
 778: 4405+5	B9E9  78      		mov	a, b
 779: 4410+4	B9EA  B1      		ora	c
 780: 4414+10	B9EB  C2E8B9  		jnz	wait
 781: 4424+10	B9EE  C9      		ret
 782:				
 783:     -	B9EF          	fdcio:
 784: 4434+11	B9EF  F5      		push	psw
 785: 4445+10	B9F0  DB0C    	fdcwl1:	in	fdcstat
 786:     -	B9F2  CB7F    		bit	7,a
 787:     -	B9F4  28FA    		jrz	fdcwl1
 788:     -	B9F6  CB77    		bit	6,a
 789:     -	B9F8  2004    		jrnz	fdcio1
 790: 4455+10	B9FA  F1      		pop	psw
 791: 4465+10	B9FB  D30B    		out	fdcdata
 792:					;jmp	phex
 793: 4475+10	B9FD  C9      		ret
 794:					
 795: 4485+10	B9FE  F1      	fdcio1:	pop	psw
 796: 4495+10	B9FF  DB0B    		in	fdcdata
 797:					;push	psw
 798:					;call	phex
 799:					;pop	psw
 800: 4505+10	BA01  C9      		ret
 801:					
 802: 4515+10	BA02  DB0A    	fdctc:	in	fdcctrl		; Pulse TC bit
 803:     -	BA04  CBE7    		setb	4, a
 804: 4525+10	BA06  D30A    		out	fdcctrl
 805:     -	BA08  CBA7    		res	4, a
 806: 4535+10	BA0A  D30A    		out	fdcctrl
 807: 4545+10	BA0C  C9      		ret
 808:				
 809:					; Print the message at HL
 810: 4555+7	BA0D  1A      	print	ldax	d
 811: 4562+5	BA0E  4F      		mov	c, a
 812: 4567+5	BA0F  13      		inx	d
 813: 4572+4	BA10  B7      		ora	a
 814: 4576+5+6	BA11  C8      		rz
 815: 4581+17	BA12  CDE7B6  		call	conout
 816: 4598+10	BA15  C30DBA  		jmp	print
 817:				
 818:					
 819: 4608+4	BA18  F3      	kbinit:	di
 820:     -	BA19  ED5E    		im2
 821: 4612+7	BA1B  3E07    		mvi	a, 07h		; Disable interrupts
 822: 4619+10	BA1D  D332    		out	cmda
 823: 4629+10	BA1F  D333    		out	cmdb
 824:					
 825: 4639+7	BA21  3EB0    		mvi	a, (low irqtab)
 826: 4646+10	BA23  D332    		out	cmda
 827: 4656+10	BA25  D333    		out	cmdb
 828: 4666+7	BA27  3EBB    		mvi	a, (high irqtab)
 829:     -	BA29  ED47    		stai
 830:					
 831: 4673+7	BA2B  3E4F    		mvi	a, 04Fh		; Set mode
 832: 4680+10	BA2D  D332    		out	cmda
 833: 4690+7	BA2F  3E87    		mvi	a, 087h		; Enable interrupts for PORTA
 834: 4697+10	BA31  D332    		out	cmda
 835:					
 836: 4707+7	BA33  3EFF    		mvi	a, 0FFh
 837: 4714+10	BA35  D333    		out	cmdb
 838: 4724+7	BA37  3EC1    		mvi	a, 0C1h		; Input bits
 839: 4731+10	BA39  D333    		out	cmdb
 840:					
 841: 4741+4	BA3B  AF      		xra	a
 842: 4745+10	BA3C  D331    		out	portb
 843: 4755+13	BA3E  32D2BB  		sta	inptr
 844: 4768+13	BA41  32D3BB  		sta	outptr
 845:					
 846: 4781+10	BA44  DB30    		in	porta
 847: 4791+10	BA46  DB31    		in	portb
 848:					
 849: 4801+4	BA48  FB      		ei
 850: 4805+10	BA49  C9      		ret
 851:					
 852: 4815+11	BA4A  F5      	kbirq:	push	psw
 853: 4826+11	BA4B  E5      		push	h
 854: 4837+11	BA4C  D5      		push	d
 855: 4848+11	BA4D  C5      		push	b
 856:					
 857: 4859+13	BA4E  3AD2BB  		lda	inptr
 858: 4872+5	BA51  5F      		mov	e, a
 859: 4877+7	BA52  1600    		mvi	d, 0
 860: 4884+10	BA54  21B2BB  		lxi	h, buffer
 861: 4894+10	BA57  19      		dad	d
 862: 4904+5	BA58  3C      		inr	a
 863: 4909+7	BA59  E61F    		ani	31		; Modulo 32
 864: 4916+13	BA5B  32D2BB  		sta	inptr
 865:					
 866: 4929+10	BA5E  DB30    		in	porta
 867: 4939+7	BA60  77      		mov	m, a
 868:					
 869: 4946+10	BA61  C1      		pop	b
 870: 4956+10	BA62  D1      		pop	d
 871: 4966+10	BA63  E1      		pop	h
 872: 4976+10	BA64  F1      		pop	psw
 873: 4986+4	BA65  FB      		ei
 874:     -	BA66  ED4D    		reti
 875:				
 876:     -	BA68  34376B20	mesg	db	"47k CP/M 2.2"
	              43502F4D
	              20322E32
 877:     -	BA74  0D0A00  	crlf	db	cr,lf,0
 878:     -	BA77  08080800	bsbsbs	db	8,8,8,0
 879:				
 880:     -	BA7B  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 881:     -	BA87  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 882:     -	BA93  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 883:     -	BA9F          	stack:
 884:				
 885:				;phex	push	psw
 886:				;	mvi	c, ' '
 887:				;	call	conout
 888:				;	pop	psw
 889:				;	push	psw		; Will use A twice
 890:				;	rar			; Shift upper to lower nibble
 891:				;	rar
 892:				;	rar
 893:				;	rar
 894:				;	call	phex1		; Print it
 895:				;	pop	psw		; Restore original Acc
 896:				;phex1	ani	00Fh		; Mask off high nibble
 897:				;	adi	090h		; Decimal adjust for ASCII
 898:				;	daa
 899:				;	aci	040h
 900:				;	daa
 901:				;	mov	c, a		; Print it
 902:				;	jmp	conout
 903:				;	ret
 904:					
 905:     -	BA9F  00      	retry:	db	0		;error retry counter
 906:				
 907:     -	BAA0          	keytab:	
 908:     -	BAA0  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	              00000000
	              00000000
	              00000000
 909:     -	BAB0  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	              00000000
	              00000000
	              00000000
 910:     -	BAC0  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,2Eh,08h,20h,00h,00h,00h
	              00000000
	              00002E08
	              20000000
 911:     -	BAD0  00000000		db	00h,00h,00h,00h,00h,00h,00h,3Fh,2Ch,6Dh,6Eh,62h,76h,63h,78h,7Ah
	              0000003F
	              2C6D6E62
	              7663787A
 912:     -	BAE0  00000000		db	00h,00h,00h,00h,0Dh,27h,3Bh,6Ch,6Bh,6Ah,68h,67h,66h,64h,73h,61h
	              0D273B6C
	              6B6A6867
	              66647361
 913:     -	BAF0  00000000		db	00h,00h,00h,00h,00h,5Bh,70h,6Fh,69h,75h,79h,74h,72h,65h,77h,71h
	              005B706F
	              69757974
	              72657771
 914:     -	BB00  0000002D		db	00h,00h,00h,2Dh,3Dh,30h,39h,38h,37h,36h,35h,34h,33h,32h,31h,09h
	              3D303938
	              37363534
	              33323109
 915:     -	BB10  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	              00000000
	              00000000
	              00000000
 916:     -	BB20  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	              00000000
	              00000000
	              00000000
 917:     -	BB30  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	              00000000
	              00000000
	              00000000
 918:     -	BB40  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,2Eh,08h,20h,00h,00h,00h
	              00000000
	              00002E08
	              20000000
 919:     -	BB50  00000000		db	00h,00h,00h,00h,00h,00h,00h,2Fh,2Ch,4Dh,4Eh,42h,56h,43h,58h,5Ah
	              0000002F
	              2C4D4E42
	              5643585A
 920:     -	BB60  00000000		db	00h,00h,00h,00h,0Dh,22h,3Ah,4Ch,4Bh,4Ah,48h,47h,46h,44h,53h,41h
	              0D223A4C
	              4B4A4847
	              46445341
 921:     -	BB70  00000000		db	00h,00h,00h,00h,00h,5Dh,50h,4Fh,49h,55h,59h,54h,52h,45h,57h,51h
	              005D504F
	              49555954
	              52455751
 922:     -	BB80  0000002B		db	00h,00h,00h,2Bh,5Fh,29h,28h,2Ah,26h,5Eh,25h,24h,23h,40h,21h,09h
	              5F29282A
	              265E2524
	              23402109
 923:     -	BB90  00000000		db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
	              00000000
	              00000000
	              00000000
 924:     -	BBB0          		org	(($ + 16) AND 0FFFEh)
 925:				
 926:     -	BBB0  4ABA    	irqtab:	dw	kbirq
 927:				
 928:     -	BBB2          	buffer:	ds	32		; Keyboard buffer
 929:     -	BBD2  00      	inptr:	db	0
 930:     -	BBD3  00      	outptr:	db	0
 931:				
 932:     -	BBD4  F3BB0000		disks	1
	              00000000
	              49BDE4BB
	              DDBDC9BD
 933:					;      dn,fsc,   lsc,[skf],bls   ,dks,dir,cks,ofs,[0]
 934:     -	BBE4  4000040F		diskdef 0,  1,cpmspt,1    ,blksiz,160,128,128,1
	              019F007F
	              00C00020
	              00010001
	              02030405
	              06070809
	              0A0B0C0D
	              0E0F1011
	              12131415
	              16171819
	              1A1B1C1D
	              1E1F2021
	              22232425
	              26272829
	              2A2B2C2D
	              2E2F3031
	              32333435
	              36373839
	              3A3B3C3D
	              3E3F40
 935:				;
 936:				;	the remainder of the cbios is reserved uninitialized
 937:				;	data area, and does not need to be a Part of the
 938:				;	system	memory image (the space must be available,
 939:				;	however, between"begdat" and"enddat").
 940:				;
 941:     -	BC33          	sekdsk:	ds	1		;seek disk number
 942:     -	BC34          	sektrk:	ds	2		;seek track number
 943:     -	BC36          	seksec:	ds	1		;seek sector number
 944:				;
 945:     -	BC37          	hstdsk:	ds	1		;host disk number
 946:     -	BC38          	hsttrk:	ds	2		;host track number
 947:     -	BC3A          	hstsec:	ds	1		;host sector number
 948:				;
 949:     -	BC3B          	sekhst:	ds	1		;seek shr secshf
 950:     -	BC3C          	hstact:	ds	1		;host active flag
 951:     -	BC3D          	hstwrt:	ds	1		;host written flag
 952:				;
 953:     -	BC3E          	unacnt:	ds	1		;unalloc rec cnt
 954:     -	BC3F          	unadsk:	ds	1		;last unalloc disk
 955:     -	BC40          	unatrk:	ds	2		;last unalloc track
 956:     -	BC42          	unasec:	ds	1		;last unalloc sector
 957:				;
 958:     -	BC43          	erflag:	ds	1		;error reporting
 959:     -	BC44          	rsflag:	ds	1		;read sector flag
 960:     -	BC45          	readop:	ds	1		;1 if read operation
 961:     -	BC46          	wrtype:	ds	1		;write operation type
 962:     -	BC47          	dmaadr:	ds	2		;last dma address
 963:     -	BC49          	hstbuf:	ds	hstsiz		;host buffer
 964:     -	        		endef
 965:					
 966:     -	BDFD  00000000		rept	(0C1C0h - $)
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              000000
 969:					
 970:     -	C1C0          		end



Statistics:

     4	passes
     0	jr promotions
   158	symbols
  2502	bytes

  1171	macro calls
  8859	macro bytes
     0	invented symbols



Symbol Table:

@x             =01        1
@y             =01        1
BC             =00        0
DE             =02        2
HL             =04        4
IX             =04        4
IY             =04        4
_fdr1           B9AB      47531
_fdr2           B9B1      47537
alloc           B814      47124
als0           =14        20
alv0            BDC9      48585
bdos           =A806      43014
begdat         =BD49      48457
bias           =6C00      27648
bios           =B600      46592
blkmsk         =0F        15
blkshf         =04        4
blksiz         = 800      2048
blkval         =01        1
boot            B633      46643
bs             =08        8
bsbsbs          BA77      47735
buffer          BBB2      48050
ccp            =A000      40960
cdisk          =04        4
chkuna          B7D5      47061
cmda           =32        50
cmdb           =33        51
conbs           B722      46882
concr           B71D      46877
conin           B6C9      46793
conlf           B729      46889
conout          B6E7      46823
conout1         B6FD      46845
const           B6BB      46779
cpmspt         =40        64
cr             =0D        13
crlf            BA74      47732
css0           =20        32
csv0            BDDD      48605
cursor          B759      46937
datsiz         =B4        180
dchrn           B95C      47452
dirbks         =40        64
dirblk         =C000      49152
dirbuf          BD49      48457
dirrem         =00        0
dmaadr          BC47      48199
dpb0           =BBE4      48100
dpbase         =BBD4      48084
dpe0            BBD4      48084
dsknxt         =01        1
enddat         =BDFD      48637
endlin          B74D      46925
erflag          BC43      48195
extmsk         =01        1
fdcctrl        =0A        10
fdcdata        =0B        11
fdcio           B9EF      47599
fdcio1          B9FE      47614
fdcret          B90C      47372
fdcrst          B99B      47515
fdcstat        =0C        12
fdctc           BA02      47618
fdcwait         B9C2      47554
fdcwl           B9C5      47557
fdcwl1          B9F0      47600
filhst          B856      47190
gcdm           =40        64
gcdn           =01        1
gcdr           =00        0
gcdx           =40        64
gocpm           B696      46742
home            B75B      46939
homed           B765      46949
hstact          BC3C      48188
hstblk         =02        2
hstbuf          BC49      48201
hstdsk          BC37      48183
hsthpc         =02        2
hstsec          BC3A      48186
hstsiz         = 100      256
hstsph         =10        16
hstspt         =20        32
hsttrk          BC38      48184
hstwrt          BC3D      48189
inptr           BBD2      48082
iobyte         =03        3
irqstat        =31        49
irqtab          BBB0      48048
kbinit          BA18      47640
kbirq           BA4A      47690
keytab          BAA0      47776
lf             =0A        10
list            B752      46930
listst          B753      46931
match           B873      47219
mesg            BA68      47720
msize          =2F        47
ndisks         =01        1
nelts          =40        64
neltst         =40        64
nomatch         B84F      47183
noovf           B80D      47117
nsects         =2C        44
nxtbas         =01        1
nxtsec         =01        1
outptr          BBD3      48083
porta          =30        48
portb          =31        49
print           BA0D      47629
punch           B755      46933
rdloop          B671      46705
read            B79D      47005
reader          B756      46934
readhst         B8C9      47305
readhstloop     B8CE      47310
readhstmain     B8E2      47330
readl           B8FD      47357
readop          BC45      48197
retry           BA9F      47775
rsflag          BC44      48196
rwmove          B899      47257
rwoper          B81C      47132
scrll           B734      46900
scroll          B72E      46894
secmax         =3F        63
secmsk         =01        1
secshf         =01        1
sectors        =40        64
sectran         B79A      47002
seektrk         B936      47414
sekdsk          BC33      48179
sekhst          BC3B      48187
seksec          BC36      48182
sektrk          BC34      48180
sektrkcmp       B8B7      47287
seldsk          B778      46968
setdma          B794      46996
setsec          B78F      46991
settrk          B788      46984
stack           BA9F      47775
unacnt          BC3E      48190
unadsk          BC3F      48191
unasec          BC42      48194
unatrk          BC40      48192
wait            B9E8      47592
waitirq         B955      47445
wboot           B652      46674
wboote          B603      46595
wrall          =00        0
wrdir          =01        1
write           B7B1      47025
writehst        B8C3      47299
wrtype          BC46      48198
wrual          =02        2
xlt0           =BBF3      48115
