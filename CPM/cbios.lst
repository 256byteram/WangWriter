   1:				; CBIOS for WangWriter
   2:				;
   3:				; Portions by Digital Research
   4:				;
   5:					maclib Z80
**** Z80.lib ****
   1:				;	@CHK MACRO USED FOR CHECKING 8 BIT DISPLACMENTS
   2:				;
   3:				@CHK	MACRO	?DD	;; USED FOR CHECKING RANGE OF 8-BIT DISP.S
   4:					IF (?DD GT 7FH) AND (?DD LT 0FF80H)
   5:				 'DISPLACEMENT RANGE ERROR - Z80 LIB'
   6:					ENDIF
   7:					ENDM
   8:				LDX	MACRO	?R,?D	
   9:					@CHK	?D
  10:					DB	0DDH,?R*8+46H,?D
  11:					ENDM
  12:				LDY	MACRO	?R,?D	
  13:					@CHK	?D
  14:					DB	0FDH,?R*8+46H,?D
  15:					ENDM
  16:				STX	MACRO	?R,?D	
  17:					@CHK	?D
  18:					DB	0DDH,70H+?R,?D
  19:					ENDM
  20:				STY	MACRO	?R,?D	
  21:					@CHK	?D
  22:					DB	0FDH,70H+?R,?D
  23:					ENDM
  24:				MVIX	MACRO	?N,?D	
  25:					@CHK	?D
  26:					DB	0DDH,36H,?D,?N
  27:					ENDM
  28:				MVIY	MACRO	?N,?D	
  29:					@CHK	?D
  30:					DB	0FDH,36H,?D,?N
  31:					ENDM
  32:				LDAI	MACRO		
  33:					DB	0EDH,57H
  34:					ENDM
  35:				LDAR	MACRO		
  36:					DB	0EDH,5FH
  37:					ENDM
  38:				STAI	MACRO		
  39:					DB	0EDH,47H
  40:					ENDM
  41:				STAR	MACRO		
  42:					DB	0EDH,4FH
  43:					ENDM
  44:				
  45:				LXIX	MACRO	?NNNN	
  46:					DB	0DDH,21H
  47:					DW	?NNNN
  48:					ENDM
  49:				LXIY	MACRO	?NNNN	
  50:					DB	0FDH,21H
  51:					DW	?NNNN
  52:					ENDM
  53:				LDED	MACRO	?NNNN	
  54:					DB	0EDH,5BH
  55:					DW	?NNNN
  56:					ENDM
  57:				LBCD	MACRO	?NNNN	
  58:					DB	0EDH,4BH
  59:					DW	?NNNN
  60:					ENDM
  61:				LSPD	MACRO	?NNNN	
  62:					DB	0EDH,07BH
  63:					DW	?NNNN
  64:					ENDM
  65:				LIXD	MACRO	?NNNN	
  66:					DB	0DDH,2AH
  67:					DW	?NNNN
  68:					ENDM
  69:				LIYD	MACRO	?NNNN	
  70:					DB	0FDH,2AH
  71:					DW	?NNNN
  72:					ENDM
  73:				SBCD	MACRO	?NNNN	
  74:					DB	0EDH,43H
  75:					DW	?NNNN
  76:					ENDM
  77:				SDED	MACRO	?NNNN	
  78:					DB	0EDH,53H
  79:					DW	?NNNN
  80:					ENDM
  81:				SSPD	MACRO	?NNNN	
  82:					DB	0EDH,73H
  83:					DW	?NNNN
  84:					ENDM
  85:				SIXD	MACRO	?NNNN	
  86:					DB	0DDH,22H
  87:					DW	?NNNN
  88:					ENDM
  89:				SIYD	MACRO	?NNNN	
  90:					DB	0FDH,22H
  91:					DW	?NNNN
  92:					ENDM
  93:				SPIX	MACRO		
  94:					DB	0DDH,0F9H
  95:					ENDM
  96:				SPIY	MACRO		
  97:					DB	0FDH,0F9H
  98:					ENDM
  99:				PUSHIX	MACRO		
 100:					DB	0DDH,0E5H
 101:					ENDM
 102:				PUSHIY	MACRO		
 103:					DB	0FDH,0E5H
 104:					ENDM
 105:				POPIX	MACRO		
 106:					DB	0DDH,0E1H
 107:					ENDM
 108:				POPIY	MACRO		
 109:					DB	0FDH,0E1H
 110:					ENDM
 111:				EXAF	MACRO		
 112:					DB	08H
 113:					ENDM
 114:				EXX	MACRO		
 115:					DB	0D9H
 116:					ENDM
 117:				XTIX	MACRO		
 118:					DB	0DDH,0E3H
 119:					ENDM
 120:				XTIY	MACRO		
 121:					DB	0FDH,0E3H
 122:					ENDM
 123:				
 124:				LDI	MACRO		
 125:					DB	0EDH,0A0H
 126:					ENDM
 127:				LDIR	MACRO		
 128:					DB	0EDH,0B0H
 129:					ENDM
 130:				LDD	MACRO		
 131:					DB	0EDH,0A8H
 132:					ENDM
 133:				LDDR	MACRO		
 134:					DB	0EDH,0B8H
 135:					ENDM
 136:				CCI	MACRO		
 137:					DB	0EDH,0A1H
 138:					ENDM
 139:				CCIR	MACRO		
 140:					DB	0EDH,0B1H
 141:					ENDM
 142:				CCD	MACRO		
 143:					DB	0EDH,0A9H
 144:					ENDM
 145:				CCDR	MACRO		
 146:					DB	0EDH,0B9H
 147:					ENDM
 148:				
 149:				ADDX	MACRO	?D	
 150:					@CHK	?D
 151:					DB	0DDH,86H,?D
 152:					ENDM
 153:				ADDY	MACRO	?D	
 154:					@CHK	?D
 155:					DB	0FDH,86H,?D
 156:					ENDM
 157:				ADCX	MACRO	?D	
 158:					@CHK	?D
 159:					DB	0DDH,8EH,?D
 160:					ENDM
 161:				ADCY	MACRO	?D	
 162:					@CHK	?D
 163:					DB	0FDH,8EH,?D
 164:					ENDM
 165:				SUBX	MACRO	?D	
 166:					@CHK	?D
 167:					DB	0DDH,96H,?D
 168:					ENDM
 169:				SUBY	MACRO	?D	
 170:					@CHK	?D
 171:					DB	0FDH,96H,?D
 172:					ENDM
 173:				SBCX	MACRO	?D	
 174:					@CHK	?D
 175:					DB	0DDH,9EH,?D
 176:					ENDM
 177:				SBCY	MACRO	?D	
 178:					@CHK	?D
 179:					DB	0FDH,9EH,?D
 180:					ENDM
 181:				ANDX	MACRO	?D	
 182:					@CHK	?D
 183:					DB	0DDH,0A6H,?D
 184:					ENDM
 185:				ANDY	MACRO	?D	
 186:					@CHK	?D
 187:					DB	0FDH,0A6H,?D
 188:					ENDM
 189:				XORX	MACRO	?D	
 190:					@CHK	?D
 191:					DB	0DDH,0AEH,?D
 192:					ENDM
 193:				XORY	MACRO	?D	
 194:					@CHK	?D
 195:					DB	0FDH,0AEH,?D
 196:					ENDM
 197:				ORX	MACRO	?D	
 198:					@CHK	?D
 199:					DB	0DDH,0B6H,?D
 200:					ENDM
 201:				ORY	MACRO	?D	
 202:					@CHK	?D
 203:					DB	0FDH,0B6H,?D
 204:					ENDM
 205:				CMPX	MACRO	?D	
 206:					@CHK	?D
 207:					DB	0DDH,0BEH,?D
 208:					ENDM
 209:				CMPY	MACRO	?D	
 210:					@CHK	?D
 211:					DB	0FDH,0BEH,?D
 212:					ENDM
 213:				INRX	MACRO	?D	
 214:					@CHK	?D
 215:					DB	0DDH,34H,?D
 216:					ENDM
 217:				INRY	MACRO	?D	
 218:					@CHK	?D
 219:					DB	0FDH,34H,?D
 220:					ENDM
 221:				DCRX	MACRO	?D	
 222:					@CHK	?D
 223:					DB	0DDH,035H,?D
 224:					ENDM
 225:				DCRY	MACRO	?D	
 226:					@CHK	?D
 227:					DB	0FDH,35H,?D
 228:					ENDM
 229:				
 230:				NEG	MACRO		
 231:					DB	0EDH,44H
 232:					ENDM
 233:				IM0	MACRO		
 234:					DB	0EDH,46H
 235:					ENDM
 236:				IM1	MACRO		
 237:					DB	0EDH,56H
 238:					ENDM
 239:				IM2	MACRO		
 240:					DB	0EDH,5EH
 241:					ENDM
 242:				
 243:				
 244:     -	0000          	BC	EQU	0
 245:     -	0002          	DE	EQU	2
 246:     -	0004          	HL	EQU	4
 247:     -	0004          	IX	EQU	4	
 248:     -	0004          	IY	EQU	4	
 249:				DADC	MACRO	?R	
 250:					DB	0EDH,?R*8+4AH
 251:					ENDM
 252:				DSBC	MACRO	?R	
 253:					DB	0EDH,?R*8+42H
 254:					ENDM
 255:				DADX	MACRO	?R	
 256:					DB	0DDH,?R*8+09H
 257:					ENDM
 258:				DADY	MACRO	?R	
 259:					DB	0FDH,?R*8+09H
 260:					ENDM
 261:				INXIX	MACRO		
 262:					DB	0DDH,23H
 263:					ENDM
 264:				INXIY	MACRO		
 265:					DB	0FDH,23H
 266:					ENDM
 267:				DCXIX	MACRO		
 268:					DB	0DDH,2BH
 269:					ENDM
 270:				DCXIY	MACRO		
 271:					DB	0FDH,2BH
 272:					ENDM
 273:				
 274:				BIT	MACRO	?N,?R	
 275:					DB	0CBH,?N*8+?R+40H
 276:					ENDM
 277:				SETB	MACRO	?N,?R
 278:					DB	0CBH,?N*8+?R+0C0H
 279:					ENDM
 280:				RES	MACRO	?N,?R
 281:					DB	0CBH,?N*8+?R+80H
 282:					ENDM
 283:				
 284:				BITX	MACRO	?N,?D	
 285:					@CHK	?D
 286:					DB	0DDH,0CBH,?D,?N*8+46H
 287:					ENDM
 288:				BITY	MACRO	?N,?D	
 289:					@CHK	?D
 290:					DB	0FDH,0CBH,?D,?N*8+46H
 291:					ENDM
 292:				SETX	MACRO	?N,?D	
 293:					@CHK	?D
 294:					DB	0DDH,0CBH,?D,?N*8+0C6H
 295:					ENDM
 296:				SETY	MACRO	?N,?D	
 297:					@CHK	?D
 298:					DB	0FDH,0CBH,?D,?N*8+0C6H
 299:					ENDM
 300:				RESX	MACRO	?N,?D	
 301:					@CHK	?D
 302:					DB	0DDH,0CBH,?D,?N*8+86H
 303:					ENDM
 304:				RESY	MACRO	?N,?D	
 305:					@CHK	?D
 306:					DB	0FDH,0CBH,?D,?N*8+86H
 307:					ENDM
 308:				
 309:				JR	MACRO	?N
 310:					DB	18H,?N-$-1
 311:					ENDM
 312:				JRC	MACRO	?N
 313:					DB	38H,?N-$-1
 314:					ENDM
 315:				JRNC	MACRO	?N
 316:					DB	30H,?N-$-1
 317:					ENDM
 318:				JRZ	MACRO	?N
 319:					DB	28H,?N-$-1
 320:					ENDM
 321:				JRNZ	MACRO	?N
 322:					DB	20H,?N-$-1
 323:					ENDM
 324:				DJNZ	MACRO	?N
 325:					DB	10H,?N-$-1
 326:					ENDM
 327:				
 328:				PCIX	MACRO		
 329:					DB	0DDH,0E9H
 330:					ENDM
 331:				PCIY	MACRO		
 332:					DB	0FDH,0E9H
 333:					ENDM
 334:				
 335:				RETI	MACRO		
 336:					DB	0EDH,4DH
 337:					ENDM
 338:				RETN	MACRO		
 339:					DB	0EDH,45H
 340:					ENDM
 341:				
 342:				INP	MACRO	?R	
 343:					DB	0EDH,?R*8+40H
 344:					ENDM
 345:				OUTP	MACRO	?R	
 346:					DB	0EDH,?R*8+41H
 347:					ENDM
 348:				INI	MACRO		
 349:					DB	0EDH,0A2H
 350:					ENDM
 351:				INIR	MACRO		
 352:					DB	0EDH,0B2H
 353:					ENDM
 354:				IND	MACRO		
 355:					DB	0EDH,0AAH
 356:					ENDM
 357:				INDR	MACRO		
 358:					DB	0EDH,0BAH
 359:					ENDM
 360:				OUTI	MACRO		
 361:					DB	0EDH,0A3H
 362:					ENDM
 363:				OUTIR	MACRO		
 364:					DB	0EDH,0B3H
 365:					ENDM
 366:				OUTD	MACRO		
 367:					DB	0EDH,0ABH
 368:					ENDM
 369:				OUTDR	MACRO		
 370:					DB	0EDH,0BBH
 371:					ENDM
 372:				
 373:				
 374:				RLCR	MACRO	?R	
 375:					DB	0CBH, 00H + ?R
 376:					ENDM
 377:				RLCX	MACRO	?D	
 378:					@CHK	?D
 379:					DB	0DDH, 0CBH, ?D, 06H
 380:					ENDM
 381:				RLCY	MACRO	?D	
 382:					@CHK	?D
 383:					DB	0FDH, 0CBH, ?D, 06H
 384:					ENDM
 385:				RALR	MACRO	?R	
 386:					DB	0CBH, 10H+?R
 387:					ENDM
 388:				RALX	MACRO	?D	
 389:					@CHK	?D
 390:					DB	0DDH, 0CBH, ?D, 16H
 391:					ENDM
 392:				RALY	MACRO	?D	
 393:					@CHK	?D
 394:					DB	0FDH, 0CBH, ?D, 16H
 395:					ENDM
 396:				RRCR	MACRO	?R	
 397:					DB	0CBH, 08H + ?R
 398:					ENDM
 399:				RRCX	MACRO	?D	
 400:					@CHK	?D
 401:					DB	0DDH, 0CBH, ?D, 0EH
 402:					ENDM
 403:				RRCY	MACRO	?D	
 404:					@CHK	?D
 405:					DB	0FDH, 0CBH, ?D, 0EH
 406:					ENDM
 407:				RARR	MACRO	?R	
 408:					DB	0CBH, 18H + ?R
 409:					ENDM
 410:				RARX	MACRO	?D	
 411:					@CHK	?D
 412:					DB	0DDH, 0CBH, ?D, 1EH
 413:					ENDM
 414:				RARY	MACRO	?D	
 415:					@CHK	?D
 416:					DB	0FDH, 0CBH, ?D, 1EH
 417:					ENDM
 418:				SLAR	MACRO	?R	
 419:					DB	0CBH, 20H + ?R
 420:					ENDM
 421:				SLAX	MACRO	?D	
 422:					@CHK	?D
 423:					DB	0DDH, 0CBH, ?D, 26H
 424:					ENDM
 425:				SLAY	MACRO	?D	
 426:					@CHK	?D
 427:					DB	0FDH, 0CBH, ?D, 26H
 428:					ENDM
 429:				SRAR	MACRO	?R	
 430:					DB	0CBH, 28H+?R
 431:					ENDM
 432:				SRAX	MACRO	?D	
 433:					@CHK	?D
 434:					DB	0DDH, 0CBH, ?D, 2EH
 435:					ENDM
 436:				SRAY	MACRO	?D	
 437:					@CHK	?D
 438:					DB	0FDH, 0CBH, ?D, 2EH
 439:					ENDM
 440:				SRLR	MACRO	?R	
 441:					DB	0CBH, 38H + ?R
 442:					ENDM
 443:				SRLX	MACRO	?D	
 444:					@CHK	?D
 445:					DB	0DDH, 0CBH, ?D, 3EH
 446:					ENDM
 447:				SRLY	MACRO	?D	
 448:					@CHK	?D
 449:					DB	0FDH, 0CBH, ?D, 3EH
 450:					ENDM
 451:				RLD	MACRO		
 452:					DB	0EDH, 6FH
 453:					ENDM
 454:				RRD	MACRO		
 455:					DB	0EDH, 67H
 456:					ENDM
**** cbios.asm ****
   6:					maclib DISKDEF
**** DISKDEF.lib ****
   1:				;	CP/M 2.0 disk re-definition library
   2:				;
   3:				;	Copyright (c) 1979
   4:				;	Digital Research
   5:				;	Box 579
   6:				;	Pacific Grove, CA
   7:				;	93950
   8:				;
   9:				;	BUGS fixed 07/07/82	JDW Software Source.
  10:				;
  11:				;	Unterminated IF in 'diskdef' macro itself
  12:				;
  13:				;	Unecessary complexity of 'lds' & 'defds' macros
  14:				;	'lds' now does both jobs, 'defds' removed (not needed).
  15:				;
  16:				;
  17:				;	'comment' dummy in 'ddw' & 'ddb' altered to 'messag'
  18:				;	because of apparent BUG in Macro-80 ver 3.44
  19:				;
  20:				;	'eq' 'gt' 'ge' etc replace '=' '>' '>=' in conditionals
  21:				;
  22:				;
  23:				;
  24:				;	Now will work with Macro-80 ver 3.44 as well as MAC.
  25:				;	if using M80, may need to alter 'set' psuedo-op
  26:				;	to aset equivalent if inside a .z80.
  27:				;
  28:				;
  29:				;
  30:				;	CP/M logical disk drives are defined using the
  31:				;	macros given below, where the sequence of calls
  32:				;	is:
  33:				;
  34:				;	disks	n
  35:				;	diskdef parameter-list-0
  36:				;	diskdef parameter-list-1
  37:				;	...
  38:				;	diskdef parameter-list-n
  39:				;	endef
  40:				;
  41:				;	where n is the number of logical disk drives attached
  42:				;	to the CP/M system, and parameter-list-i defines the
  43:				;	characteristics of the ith drive (i=0,1,...,n-1)
  44:				;
  45:				;	each parameter-list-i takes the form
  46:				;		dn,fsc,lsc,[skf],bls,dks,dir,cks,ofs,[0]
  47:				;	where
  48:				;	dn	is the disk number 0,1,...,n-1
  49:				;	fsc	is the first sector number (usually 0 or 1)
  50:				;	lsc	is the last sector number on a track
  51:				;	skf	is optional "skew factor" for sector translate
  52:				;	bls	is the data block size (1024,2048,...,16384)
  53:				;	dks	is the disk size in bls increments (word)
  54:				;	dir	is the number of directory elements (word)
  55:				;	cks	is the number of dir elements to checksum
  56:				;	ofs	is the number of tracks to skip (word)
  57:				;	[0]	is an optional 0 which forces 16K/directory entry
  58:				;
  59:				;	for convenience, the form
  60:				;		dn,dm
  61:				;	defines disk dn as having the same characteristics as
  62:				;	a previously defined disk dm.
  63:				;
  64:				;	a standard four drive CP/M system is defined by
  65:				;		disks	4
  66:				;		diskdef 0,1,26,6,1024,243,64,64,2
  67:				;	dsk	set	0
  68:				;		rept	3
  69:				;	dsk	set	dsk+1
  70:				;		diskdef %dsk,0
  71:				;		endm
  72:				;		endef
  73:				;
  74:				;	the value of "begdat" at the end of assembly defines the
  75:				;	beginning of the uninitialize ram area above the bios,
  76:				;	while the value of "enddat" defines the next location
  77:				;	following the end of the data area.  the size of this
  78:				;	area is given by the value of "datsiz" at the end of the
  79:				;	assembly.  note that the allocation vector will be quite
  80:				;	large if a large disk size is defined with a small block
  81:				;	size.
  82:				;
  83:				dskhdr	macro	dn
  84:				;;	define a single disk header list
  85:				dpe&dn: dw	xlt&dn,0000h	;translate table
  86:					dw	0000h,0000h	;scratch area
  87:					dw	dirbuf,dpb&dn	;dir buff,parm block
  88:					dw	csv&dn,alv&dn	;check, alloc vectors
  89:					endm
  90:				;
  91:				disks	macro	nd
  92:				;;	define nd disks
  93:				ndisks	set	nd	;;for later reference
  94:				dpbase	equ	$	;base of disk parameter blocks
  95:				;;	generate the nd elements
  96:				dsknxt	set	0
  97:					rept	nd
  98:					dskhdr	%dsknxt
  99:				dsknxt	set	dsknxt+1
 100:					endm
 101:					endm
 102:				;
 103:				dpbhdr	macro	dn
 104:				dpb&dn	equ	$		;disk parm block
 105:					endm
 106:				;
 107:				ddb	macro	data,messag
 108:				;;	define a db statement
 109:					db	data		messag
 110:					endm
 111:				;
 112:				ddw	macro	data,messag
 113:				;;	define a dw statement
 114:					dw	data		messag
 115:					endm
 116:				;
 117:				gcd	macro	m,n
 118:				;;	greatest common divisor of m,n
 119:				;;	produces value gcdn as result
 120:				;;	(used in sector translate table generation)
 121:				gcdm	set	m	;;variable for m
 122:				gcdn	set	n	;;variable for n
 123:				gcdr	set	0	;;variable for r
 124:					rept	65535
 125:				gcdx	set	gcdm/gcdn
 126:				gcdr	set	gcdm - gcdx*gcdn
 127:					if	gcdr eq 0
 128:					exitm
 129:					endif
 130:				gcdm	set	gcdn
 131:				gcdn	set	gcdr
 132:					endm
 133:					endm
 134:				;
 135:				diskdef macro	dn,fsc,lsc,skf,bls,dks,dir,cks,ofs,k16
 136:				;;	generate the set statements for later tables
 137:					if	nul lsc
 138:				;;	current disk dn same as previous fsc
 139:				dpb&dn	equ	dpb&fsc ;equivalent parameters
 140:				als&dn	equ	als&fsc ;same allocation vector size
 141:				css&dn	equ	css&fsc ;same checksum vector size
 142:				xlt&dn	equ	xlt&fsc ;same translate table
 143:					else
 144:				secmax	set	lsc-(fsc)	;;sectors 0...secmax
 145:				sectors set	secmax+1;;number of sectors
 146:				als&dn	set	(dks)/8 ;;size of allocation vector
 147:					if	((dks) mod 8) ne 0
 148:				als&dn	set	als&dn+1
 149:					endif
 150:				css&dn	set	(cks)/4 ;;number of checksum elements
 151:				;;	generate the block shift value
 152:				blkval	set	bls/128 ;;number of sectors/block
 153:				blkshf	set	0	;;counts right 0's in blkval
 154:				blkmsk	set	0	;;fills with 1's from right
 155:					rept	16	;;once for each bit position
 156:					if	blkval eq 1
 157:					exitm
 158:					endif
 159:				;;	otherwise, high order 1 not found yet
 160:				blkshf	set	blkshf+1
 161:				blkmsk	set	(blkmsk shl 1) or 1
 162:				blkval	set	blkval/2
 163:					endm
 164:				;;	generate the extent mask byte
 165:				blkval	set	bls/1024	;;number of kilobytes/block
 166:				extmsk	set	0	;;fill from right with 1's
 167:					rept	16
 168:					if	blkval eq 1
 169:					exitm
 170:					endif
 171:				;;	otherwise more to shift
 172:				extmsk	set	(extmsk shl 1) or 1
 173:				blkval	set	blkval/2
 174:					endm
 175:				;;	may be double byte allocation
 176:					if	(dks) gt 256
 177:				extmsk	set	(extmsk shr 1)
 178:					endif
 179:				;;	may be optional [0] in last position
 180:					if	not nul k16
 181:				extmsk	set	k16
 182:					endif
 183:				;;	now generate directory reservation bit vector
 184:				dirrem	set	dir	;;# remaining to process
 185:				dirbks	set	bls/32	;;number of entries per block
 186:				dirblk	set	0	;;fill with 1's on each loop
 187:					rept	16
 188:					if	dirrem eq 0
 189:					exitm
 190:					endif
 191:				;;	not complete, iterate once again
 192:				;;	shift right and add 1 high order bit
 193:				dirblk	set	(dirblk shr 1) or 8000h
 194:					if	dirrem gt dirbks
 195:				dirrem	set	dirrem-dirbks
 196:					else
 197:				dirrem	set	0
 198:					endif
 199:					endm
 200:					dpbhdr	dn	;;generate equ $
 201:					ddw	%sectors,<;sec per track>
 202:					ddb	%blkshf,<;block shift>
 203:					ddb	%blkmsk,<;block mask>
 204:					ddb	%extmsk,<;extnt mask>
 205:					ddw	%(dks)-1,<;disk size-1>
 206:					ddw	%(dir)-1,<;directory max>
 207:					ddb	%dirblk shr 8,<;alloc0>
 208:					ddb	%dirblk and 0ffh,<;alloc1>
 209:					ddw	%(cks)/4,<;check size>
 210:					ddw	%ofs,<;offset>
 211:				;;	generate the translate table, if requested
 212:					if	nul skf
 213:				xlt&dn	equ	0		;no xlate table
 214:					else
 215:					if	skf eq 0
 216:				xlt&dn	equ	0		;no xlate table
 217:					else
 218:				;;	generate the translate table
 219:				nxtsec	set	0	;;next sector to fill
 220:				nxtbas	set	0	;;moves by one on overflow
 221:					gcd	%sectors,skf
 222:				;;	gcdn = gcd(sectors,skew)
 223:				neltst	set	sectors/gcdn
 224:				;;	neltst is number of elements to generate
 225:				;;	before we overlap previous elements
 226:				nelts	set	neltst	;;counter
 227:				xlt&dn	equ	$		;translate table
 228:					rept	sectors ;;once for each sector
 229:					if	sectors lt 256
 230:					ddb	%nxtsec+(fsc)
 231:					else
 232:					ddw	%nxtsec+(fsc)
 233:					endif
 234:				nxtsec	set	nxtsec+(skf)
 235:					if	nxtsec ge sectors
 236:				nxtsec	set	nxtsec-sectors
 237:					endif
 238:				nelts	set	nelts-1
 239:					if	nelts eq 0
 240:				nxtbas	set	nxtbas+1
 241:				nxtsec	set	nxtbas
 242:				nelts	set	neltst
 243:					endif
 244:					endm
 245:					endif	;;end of nul fac test
 246:					endif	;;end of nul bls test
 247:					endif	;; BUG for end of repeat last defn.
 248:					endm
 249:				;
 250:				lds	macro	lb,dn,val
 251:				lb&dn:	ds	val&dn
 252:					endm
 253:				;
 254:				endef	macro
 255:				;;	generate the necessary ram data areas
 256:				begdat	equ	$
 257:				dirbuf: ds	128	;directory access buffer
 258:				dsknxt	set	0
 259:					rept	ndisks	;;once for each disk
 260:					lds	alv,%dsknxt,als
 261:					lds	csv,%dsknxt,css
 262:				dsknxt	set	dsknxt+1
 263:					endm
 264:				enddat	equ	$
 265:				datsiz	equ	$-begdat
 266:				;;	db 0 at this point forces hex record
 267:					endm
 268:				;
**** cbios.asm ****
   7:				
   8:				;	utility macro to compute sector mask
   9:				smask	macro	hblk
  10:				;;	compute log2(hblk), return @x as result
  11:				;;	(2 ** @x = hblk on return)
  12:				@y	set	hblk
  13:				@x	set	0
  14:				;;	count right shifts of @y until = 1
  15:					rept	8
  16:					if	@y = 1
  17:					exitm
  18:					endif
  19:				;;	@y is not 1, shift right one position
  20:				@y	set	@y shr 1
  21:				@x	set	@x + 1
  22:					endm
  23:					endm
  24:				
  25:     -	0030          	msize	equ	48		;cp/m version memory size in kilobytes
  26:				;
  27:				;	"bias" is address offset from 3400h for memory systems
  28:				;	than 16k (referred to as"b" throughout the text)
  29:				;
  30:     -	7000          	bias	equ	(msize-20)*1024
  31:     -	A400          	ccp	equ	3400h+bias	;base of ccp
  32:     -	AC06          	bdos	equ	ccp+806h	;base of bdos
  33:     -	BA00          	bios	equ	ccp+1600h	;base of bios
  34:     -	0004          	cdisk	equ	0004h		;current disk number 0=a,... l5=p
  35:     -	0003          	iobyte	equ	0003h		;intel i/o byte
  36:				;
  37:     -	BA00          		org	bios		;origin of this program
  38:     -	002C          	nsects	equ	($-ccp)/128	;warm start sector count
  39:				
  40:     -	0000          	buffer	equ	0
  41:				
  42:     -	0000          	consd	equ	buffer	; console data
  43:     -	0008          	conss	equ	8	; console status
  44:     -	0008          	consc	equ	8	; console control
  45:				
  46:     -	0001          	rxd	equ	1	; receive flag mask
  47:     -	0002          	txd	equ	2	; transmit flag mask
  48:     -	0004          	devack	equ	4	; device changed flag
  49:				
  50:     -	0008          	bs	equ	8
  51:     -	000D          	cr	equ	13
  52:     -	000A          	lf	equ	10
  53:				
  54:     -	000A          	fdcctrl	equ	0Ah	; Control port (TC)
  55:     -	000B          	fdcdata	equ	0Bh	; Data port
  56:     -	000C          	fdcstat	equ	0Ch	; Status port
  57:     -	0031          	irqstat	equ	031h	; IRQ status fro FDC
  58:				
  59:     -	0030          	porta	equ	030h	; PORTA for keyboard
  60:     -	0031          	portb	equ	031h	; PORTB for disk and keyboard control
  61:     -	0032          	cmda	equ	032h	; Command for PORTA
  62:     -	0033          	cmdb	equ	033h	; Command for PORTB
  63:				
  64:     -	0800          	blksiz	equ	2048		;CP/M allocation size
  65:     -	0100          	hstsiz	equ	256		;host disk sector size
  66:     -	0010          	hstsph	equ	16		;sectors per head
  67:     -	0002          	hsthpc	equ	2		;heads per cylinder
  68:     -	0020          	hstspt	equ	hstsph*hsthpc	;host disk sectors/trk
  69:     -	0002          	hstblk	equ	hstsiz/128	;CP/M sects/host buff
  70:     -	0040          	cpmspt	equ	hstblk*hstspt	;CP/M sectors/track
  71:     -	0001          	secmsk	equ	hstblk-1	;sector mask
  72:     -	BA00          		smask	hstblk		;compute sector mask
  72:				;;	compute log2(hblk), return @x as result
  72:				;;	(2 ** @x = hblk on return)
  72:     -	0002          	@y	set	hstblk
  72:     -	0000          	@x	set	0
  72:				;;	count right shifts of @y until = 1
  72:					rept	8
  72:     -	0000          		if	@y = 1
  72:					endif
  72:				;;	@y is not 1, shift right one position
  72:     -	0001          	@y	set	@y shr 1
  72:     -	0001          	@x	set	@x + 1
  72:     -	BA00          		endm
  72:     -	0001          		if	@y = 1
  72:					exitm
  72:     -	BA00          		endm
  73:     -	0001          	secshf	equ	@x		;log2(hstblk)
  74:				;
  75:     -	0000          	wrall:	equ	0		;write to allocated
  76:     -	0001          	wrdir:	equ	1		;write to directory
  77:     -	0002          	wrual:	equ	2		;write to unallocated
  78:				
  79:				
  80:				;
  81:				;	jump vector for individual subroutines
  82:				;
  83:    0+10	BA00  C333BA  		jmp	boot	;cold start
  84:   10+10	BA03  C351BA  	wboote:	jmp	wboot	;warm start
  85:   20+10	BA06  C3B5BA  		jmp	const	;console status
  86:   30+10	BA09  C3B7BA  		jmp	conin	;console character in
  87:   40+10	BA0C  C3BABA  		jmp	conout	;console character out
  88:   50+10	BA0F  C320BB  		jmp	list	;list character out
  89:   60+10	BA12  C323BB  		jmp	punch	;punch character out
  90:   70+10	BA15  C324BB  		jmp	reader	;reader character out
  91:   80+10	BA18  C329BB  		jmp	home	;move head to home position
  92:   90+10	BA1B  C33ABB  		jmp	seldsk	;select disk
  93:  100+10	BA1E  C34ABB  		jmp	settrk	;set track number
  94:  110+10	BA21  C351BB  		jmp	setsec	;set sector number
  95:  120+10	BA24  C356BB  		jmp	setdma	;set dma address
  96:  130+10	BA27  C35FBB  		jmp	read	;read disk
  97:  140+10	BA2A  C373BB  		jmp	write	;write disk
  98:  150+10	BA2D  C321BB  		jmp	listst	;return list status
  99:  160+10	BA30  C35CBB  		jmp	sectran	;sector translate
 100:				
 101:				
 102:				;
 103:				;	end of fixed tables
 104:				;
 105:				;	individual subroutines to perform each function
 106:  170+10	BA33  31D1BD  	boot:	lxi	sp, stack
 107:  180+7	BA36  3E01    		mvi	a, 01h		;CRT is the default device
 108:  187+13	BA38  320300  		sta	iobyte		;clear the iobyte
 109:  200+4	BA3B  AF      		xra	a		;zero in the accum
 110:  204+13	BA3C  320400  		sta	cdisk		;select disk zero
 111:  217+13	BA3F  3256BE  		sta	hstact		;host buffer inactive
 112:  230+13	BA42  3258BE  		sta	unacnt		;clear unalloc count
 113:  243+10	BA45  119EBD  		lxi	d,mesg		; Signon message
 114:  253+17	BA48  CD93BD  		call	print
 115:  270+17	BA4B  CD40BD  		call	fdcrst		;Initialise FDC
 116:  287+10	BA4E  C394BA  		jmp	gocpm		;initialize and go to cp/m
 117:				;
 118:     -	BA51          	wboot:	;simplest case is to read the disk until all sectors loaded
 119:  297+10	BA51  318000  		lxi	sp, 80h		;use space below buffer for stack
 120:  307+17	BA54  CD40BD  		call	fdcrst		;Initialise FDC
 121:  324+7	BA57  0E00    		mvi	c, 0		;select disk 0
 122:  331+17	BA59  CD3ABB  		call	seldsk
 123:  348+17	BA5C  CD29BB  		call	home		;go to track 00
 124:				;
 125:  365+7	BA5F  062C    		mvi	b, nsects	;b counts * of sectors to load
 126:  372+7	BA61  0E00    		mvi	c, 0		;c has the current track number
 127:  379+7	BA63  1602    		mvi	d, 2		;d has the next sector to read
 128:				;	note that we begin by reading track 0, sector 2 since sector 1
 129:				;	contains the cold start loader, which is skipped in a warm start
 130:  386+10	BA65  2100A4  		lxi	h, ccp		;base of cp/m (initial load point)
 131:  396+7	BA68  0E00    		mvi	c, 0	; start at sector 1, head 0, track 0
 132:  403+10	BA6A  110100  		lxi	d, 1
 133:  413+7	BA6D  065B    		mvi	b, (0FFFFh-ccp)/hstsiz
 134:  420+5	BA6F  7B      	rdloop	mov	a, e
 135:  425+13	BA70  3254BE  		sta	hstsec
 136:  438+5	BA73  7A      		mov	a, d
 137:  443+13	BA74  3252BE  		sta	hsttrk
 138:  456+7	BA77  3E00    		mvi	a, 0
 139:  463+13	BA79  3253BE  		sta	hsttrk+1
 140:  476+11	BA7C  C5      		push	bc
 141:  487+11	BA7D  D5      		push	de
 142:  498+17	BA7E  CD8BBC  		call	readhst
 143:  515+10	BA81  D1      		pop	de
 144:  525+10	BA82  C1      		pop	bc
 145:  535+5	BA83  05      		dcr	b
 146:  540+10	BA84  CA94BA  		jz	gocpm	; Go to CP/M when done
 147:  550+5	BA87  1C      		inr	e
 148:  555+7	BA88  3E20    		mvi	a, hstspt
 149:  562+4	BA8A  BB      		cmp	e
 150:  566+10	BA8B  C26FBA  		jnz	rdloop
 151:  576+7	BA8E  1E00    		mvi	e, 0
 152:  583+5	BA90  14      		inr	d
 153:  588+10	BA91  F26FBA  		jp	rdloop
 154:				;
 155:				;	end of	load operation, set parameters and go to cp/m
 156:     -	BA94          	gocpm:
 157:  598+7	BA94  3EC3    		mvi	a, 0c3h		;c3 is a jmp instruction
 158:  605+13	BA96  320000  		sta	0		;for jmp to wboot
 159:  618+10	BA99  2103BA  		lxi	h, wboote	;wboot entry point
 160:  628+16	BA9C  220100  		shld	1		;set address field for jmp at 0
 161:				;
 162:  644+13	BA9F  320500  		sta	5		;for jmp to bdos
 163:  657+10	BAA2  2106AC  		lxi	h, bdos		;bdos entry point
 164:  667+16	BAA5  220600  		shld	6		;address field of Jump at 5 to bdos
 165:				;
 166:  683+10	BAA8  018000  		lxi	b, 80h		;default dma address is 80h
 167:  693+17	BAAB  CD56BB  		call	setdma
 168:				;
 169:					;ei			;enable the interrupt system
 170:  710+13	BAAE  3A0400  		lda	cdisk		;get current disk number
 171:  723+5	BAB1  4F      		mov	c, a		;send to the ccp
 172:  728+10	BAB2  C300A4  		jmp	ccp		;go to cp/m for further processing
 173:				;
 174:				;
 175:				; I/O handlers
 176:				; 
 177:				
 178:				; Console status
 179:  738+4	BAB5  AF      	const:	xra	a
 180:  742+10	BAB6  C9      		ret
 181:				
 182:				; Console in
 183:     -	BAB7          	conin	jr	conin
 183:     -	BAB7  18FE    		DB	18H,conin-$-1
 183:     -	BAB9          		ENDM
 184:  752+10	BAB9  C9      		ret
 185:				
 186:				; Console out
 187:  762+7	BABA  3E0D    	conout	mvi	a, cr
 188:  769+4	BABC  B9      		cmp	c
 189:     -	BABD          		jrz	concr
 189:     -	BABD  2828    		DB	28H,concr-$-1
 189:     -	BABF          		ENDM
 190:  773+7	BABF  3E0A    		mvi	a, lf
 191:  780+4	BAC1  B9      		cmp	c
 192:     -	BAC2          		jrz	conlf
 192:     -	BAC2  282C    		DB	28H,conlf-$-1
 192:     -	BAC4          		ENDM
 193:  784+7	BAC4  3E20    		mvi	a, ' '
 194:  791+4	BAC6  B9      		cmp	c
 195:     -	BAC7          		jrnz	conout1
 195:     -	BAC7  2002    		DB	20H,conout1-$-1
 195:     -	BAC9          		ENDM
 196:  795+7	BAC9  0E00    		mvi	c, 0		; Blank for space
 197:  802+11	BACB  D5      	conout1	push	d
 198:  813+16	BACC  2A27BB  		lhld	cursor
 199:  829+11	BACF  E5      		push	h
 200:  840+10	BAD0  1100E0  		lxi	d, 0E000h	; CRT base address
 201:  850+10	BAD3  19      		dad	d
 202:  860+7	BAD4  71      		mov	m, c
 203:  867+10	BAD5  E1      		pop	h
 204:  877+10	BAD6  D1      		pop	d
 205:  887+5	BAD7  23      		inx	h
 206:  892+16	BAD8  2227BB  		shld	cursor
 207:  908+7	BADB  3E50    		mvi	a, 80		; 80 columns
 208:  915+4	BADD  BD      		cmp	l
 209:  919+5+6	BADE  C0      		rnz
 210:  924+7	BADF  2E00    		mvi	l, 0		; Newline
 211:  931+5	BAE1  24      		inr	h
 212:  936+16	BAE2  2227BB  		shld	cursor
 213:     -	BAE5          		jr	scroll
 213:     -	BAE5  1810    		DB	18H,scroll-$-1
 213:     -	BAE7          		ENDM
 214:				
 215:  952+16	BAE7  2A27BB  	concr:	lhld	cursor
 216:  968+4	BAEA  AF      		xra	a		; Move cursor to start of line
 217:  972+5	BAEB  6F      		mov	l, a
 218:  977+16	BAEC  2227BB  		shld	cursor
 219:  993+10	BAEF  C9      		ret
 220:					
 221: 1003+16	BAF0  2A27BB  	conlf:	lhld	cursor		; Newline and scroll
 222: 1019+5	BAF3  24      		inr	h
 223: 1024+16	BAF4  2227BB  		shld	cursor
 224:				
 225: 1040+7	BAF7  3E17    	scroll:	mvi	a, 23
 226: 1047+4	BAF9  BC      		cmp	h
 227: 1051+5+6	BAFA  D0      		rnc
 228:				
 229: 1056+7	BAFB  2617    		mvi	h, 23		; 0..22
 230: 1063+16	BAFD  2227BB  		shld	cursor
 231: 1079+7	BB00  3EE0    		mvi	a, 0E0h
 232: 1086+11	BB02  F5      	scrll:	push	a
 233: 1097+5	BB03  57      		mov	d, a
 234: 1102+7	BB04  1E00    		mvi	e, 0
 235: 1109+5	BB06  3C      		inr	a
 236: 1114+5	BB07  67      		mov	h, a
 237: 1119+7	BB08  2E00    		mvi	l, 0
 238: 1126+10	BB0A  015000  		lxi	b, 80
 239:     -	BB0D          		ldir
 239:     -	BB0D  EDB0    		DB	0EDH,0B0H
 239:     -	BB0F          		ENDM
 240: 1136+10	BB0F  F1      		pop	a
 241: 1146+5	BB10  3C      		inr	a
 242: 1151+7	BB11  FEF7    		cpi	0F7h
 243:     -	BB13          		jrnz	scrll
 243:     -	BB13  20ED    		DB	20H,scrll-$-1
 243:     -	BB15          		ENDM
 244:					
 245: 1158+4	BB15  AF      		xra	a		; Last line blanked
 246: 1162+10	BB16  2100F7  		lxi	h, 0F700h
 247: 1172+7	BB19  0650    		mvi	b, 80
 248: 1179+7	BB1B  77      	endlin:	mov	m, a
 249: 1186+5	BB1C  23      		inx	h
 250:     -	BB1D          		djnz	endlin
 250:     -	BB1D  10FC    		DB	10H,endlin-$-1
 250:     -	BB1F          		ENDM
 251: 1191+10	BB1F  C9      		ret
 252:					
 253:				
 254:				
 255:				; List out
 256: 1201+10	BB20  C9      	list:	ret
 257:				
 258:				; List status
 259: 1211+4	BB21  AF      	listst	xra	a
 260: 1215+10	BB22  C9      		ret
 261:				
 262:				; Punch out
 263: 1225+10	BB23  C9      	punch	ret
 264:				
 265:				; Reader in
 266: 1235+7	BB24  3E1A    	reader	mvi	a, 01Ah		; Return EOF for reader device
 267: 1242+10	BB26  C9      		ret
 268:				
 269:				
 270:     -	BB27  0000    	cursor	dw	0		; Cursor position
 271:				;
 272:				;
 273:				;	i/o drivers for the disk follow
 274:				;	for now, we will simply store the parameters away for use
 275:				;	in the read and write	subroutines
 276:				;
 277:					;home the selected disk
 278: 1252+13	BB29  3A57BE  	home:	lda	hstwrt	;check for pending write
 279: 1265+4	BB2C  B7      		ora	a
 280: 1269+10	BB2D  C233BB  		jnz	homed
 281: 1279+13	BB30  3256BE  		sta	hstact	;clear host active flag
 282: 1292+10	BB33  010000  	homed:	lxi	b, 0
 283: 1302+17	BB36  CD4ABB  		call	settrk
 284: 1319+10	BB39  C9      		ret
 285:				;
 286:     -	BB3A          	seldsk:
 287:					;select disk
 288: 1329+5	BB3A  79      		mov	a,c		;selected disk number
 289: 1334+13	BB3B  324DBE  		sta	sekdsk		;seek disk number
 290: 1347+5	BB3E  6F      		mov	l,a		;disk number to HL
 291: 1352+7	BB3F  2600    		mvi	h,0
 292:					rept	4		;multiply by 16
 294: 1359+10	BB41  29      		dad	h
 294:     -	BB42          		endm
 294: 1369+10	BB42  29      		dad	h
 294:     -	BB43          		endm
 294: 1379+10	BB43  29      		dad	h
 294:     -	BB44          		endm
 294: 1389+10	BB44  29      		dad	h
 294:     -	BB45          		endm
 295: 1399+10	BB45  11EEBD  		lxi	d,dpbase	;base of parm block
 296: 1409+10	BB48  19      		dad	d		;hl=.dpb(curdsk)
 297: 1419+10	BB49  C9      		ret
 298:					;
 299:     -	BB4A          	settrk:	;set track given by register bc
 300:					;mov	h,b
 301: 1429+7	BB4A  2600    		mvi	h,0
 302: 1436+5	BB4C  69      		mov	l,c
 303: 1441+16	BB4D  224EBE  		shld	sektrk
 304: 1457+10	BB50  C9      		ret
 305:				;
 306:     -	BB51          	setsec:
 307:					;set sector given by register c 
 308: 1467+5	BB51  79      		mov	a,c
 309: 1472+13	BB52  3250BE  		sta	seksec		;sector to seek
 310:					;jmp	phex
 311: 1485+10	BB55  C9      		ret
 312:				
 313:     -	BB56          	setdma:
 314:					;set dma address given by BC
 315: 1495+5	BB56  60      		mov	h,b
 316: 1500+5	BB57  69      		mov	l,c
 317: 1505+16	BB58  2261BE  		shld	dmaadr
 318: 1521+10	BB5B  C9      		ret
 319:				;
 320:     -	BB5C          	sectran:
 321:					;translate sector number BC
 322: 1531+5	BB5C  60      		mov	h,b
 323: 1536+5	BB5D  69      		mov	l,c
 324: 1541+10	BB5E  C9      		ret
 325:				;
 326:				;*****************************************************
 327:				;*                                                   *
 328:				;*	The READ entry point takes the place of      *
 329:				;*	the previous BIOS defintion for READ.        *
 330:				;*                                                   *
 331:				;*****************************************************
 332:     -	BB5F          	read:
 333:					;read the selected CP/M sector
 334: 1551+4	BB5F  AF      		xra	a
 335: 1555+13	BB60  3258BE  		sta	unacnt
 336: 1568+7	BB63  3E01    		mvi	a,1
 337: 1575+13	BB65  325FBE  		sta	readop		;read operation
 338: 1588+13	BB68  325EBE  		sta	rsflag		;must read data
 339: 1601+7	BB6B  3E02    		mvi	a,wrual
 340: 1608+13	BB6D  3260BE  		sta	wrtype		;treat as unalloc
 341: 1621+10	BB70  C3DEBB  		jmp	rwoper		;to perform the read
 342:				;
 343:				;*****************************************************
 344:				;*                                                   *
 345:				;*	The WRITE entry point takes the place of     *
 346:				;*	the previous BIOS defintion for WRITE.       *
 347:				;*                                                   *
 348:				;*****************************************************
 349:     -	BB73          	write:
 350:					;write the selected CP/M sector
 351: 1631+4	BB73  AF      		xra	a		;0 to accumulator
 352: 1635+13	BB74  325FBE  		sta	readop		;not a read operation
 353: 1648+5	BB77  79      		mov	a,c		;write type in c
 354: 1653+13	BB78  3260BE  		sta	wrtype
 355: 1666+7	BB7B  FE02    		cpi	wrual		;write unallocated?
 356: 1673+10	BB7D  C297BB  		jnz	chkuna		;check for unalloc
 357:				;
 358:				;	write to unallocated, set parameters
 359: 1683+7	BB80  3E10    		mvi	a,blksiz/128	;next unalloc recs
 360: 1690+13	BB82  3258BE  		sta	unacnt
 361: 1703+13	BB85  3A4DBE  		lda	sekdsk		;disk to seek
 362: 1716+13	BB88  3259BE  		sta	unadsk		;unadsk = sekdsk
 363: 1729+16	BB8B  2A4EBE  		lhld	sektrk
 364: 1745+16	BB8E  225ABE  		shld	unatrk		;unatrk = sectrk
 365: 1761+13	BB91  3A50BE  		lda	seksec
 366: 1774+13	BB94  325CBE  		sta	unasec		;unasec = seksec
 367:				;
 368:     -	BB97          	chkuna:
 369:					;check for write to unallocated sector
 370: 1787+13	BB97  3A58BE  		lda	unacnt		;any unalloc remain?
 371: 1800+4	BB9A  B7      		ora	a
 372: 1804+10	BB9B  CAD6BB  		jz	alloc		;skip if not
 373:				;
 374:				;	more unallocated records remain
 375: 1814+5	BB9E  3D      		dcr	a		;unacnt = unacnt-1
 376: 1819+13	BB9F  3258BE  		sta	unacnt
 377: 1832+13	BBA2  3A4DBE  		lda	sekdsk		;same disk?
 378: 1845+10	BBA5  2159BE  		lxi	h,unadsk
 379: 1855+7	BBA8  BE      		cmp	m		;sekdsk = unadsk?
 380: 1862+10	BBA9  C2D6BB  		jnz	alloc		;skip if not
 381:				;
 382:				;	disks are the same
 383: 1872+10	BBAC  215ABE  		lxi	h,unatrk
 384: 1882+17	BBAF  CD79BC  		call	sektrkcmp	;sektrk = unatrk?
 385: 1899+10	BBB2  C2D6BB  		jnz	alloc		;skip if not
 386:				;
 387:				;	tracks are the same
 388: 1909+13	BBB5  3A50BE  		lda	seksec		;same sector?
 389: 1922+10	BBB8  215CBE  		lxi	h,unasec
 390: 1932+7	BBBB  BE      		cmp	m		;seksec = unasec?
 391: 1939+10	BBBC  C2D6BB  		jnz	alloc		;skip if not
 392:				;
 393:				;	match, move to next sector for future ref
 394: 1949+10	BBBF  34      		inr	m		;unasec = unasec+1
 395: 1959+7	BBC0  7E      		mov	a,m		;end of track?
 396: 1966+7	BBC1  FE40    		cmp	cpmspt		;count CP/M sectors
 397: 1973+10	BBC3  DACFBB  		jc	noovf		;skip if no overflow
 398:				;
 399:				;	overflow to next track
 400: 1983+10	BBC6  3600    		mvi	m,0		;unasec = 0
 401: 1993+16	BBC8  2A5ABE  		lhld	unatrk
 402: 2009+5	BBCB  23      		inx	h
 403: 2014+16	BBCC  225ABE  		shld	unatrk		;unatrk = unatrk+1
 404:				;
 405:     -	BBCF          	noovf:
 406:					;match found, mark as unnecessary read
 407: 2030+4	BBCF  AF      		xra	a		;0 to accumulator
 408: 2034+13	BBD0  325EBE  		sta	rsflag		;rsflag = 0
 409: 2047+10	BBD3  C3DEBB  		jmp	rwoper		;to perform the write
 410:				;
 411:     -	BBD6          	alloc:
 412:					;not an unallocated record, requires pre-read
 413: 2057+4	BBD6  AF      		xra	a		;0 to accum
 414: 2061+13	BBD7  3258BE  		sta	unacnt		;unacnt = 0
 415: 2074+5	BBDA  3C      		inr	a		;1 to accum
 416: 2079+13	BBDB  325EBE  		sta	rsflag		;rsflag = 1
 417:				;
 418:				;*****************************************************
 419:				;*                                                   *
 420:				;*	Common code for READ and WRITE follows       *
 421:				;*                                                   *
 422:				;*****************************************************
 423:     -	BBDE          	rwoper:
 424:					;enter here to perform the read/write
 425: 2092+4	BBDE  AF      		xra	a		;zero to accum
 426: 2096+13	BBDF  325DBE  		sta	erflag		;no errors (yet)
 427: 2109+13	BBE2  3A50BE  		lda	seksec		;compute host sector
 428:					rept	secshf
 431: 2122+4	BBE5  B7      		ora	a		;carry = 0
 431: 2126+4	BBE6  1F      		rar			;shift right
 431:     -	BBE7          		endm
 432: 2130+13	BBE7  3255BE  		sta	sekhst		;host sector to seek
 433:				;
 434:				;	active host sector?
 435: 2143+10	BBEA  2156BE  		lxi	h,hstact	;host active flag
 436: 2153+7	BBED  7E      		mov	a,m
 437: 2160+10	BBEE  3601    		mvi	m,1		;always becomes 1
 438: 2170+4	BBF0  B7      		ora	a		;was it already?
 439: 2174+10	BBF1  CA18BC  		jz	filhst		;fill host if not
 440:				;
 441:				;	host buffer active, same as seek buffer?
 442: 2184+13	BBF4  3A4DBE  		lda	sekdsk
 443: 2197+10	BBF7  2151BE  		lxi	h,hstdsk	;same disk?
 444: 2207+7	BBFA  BE      		cmp	m		;sekdsk = hstdsk?
 445: 2214+10	BBFB  C211BC  		jnz	nomatch
 446:				;
 447:				;	same disk, same track?
 448: 2224+10	BBFE  2152BE  		lxi	h,hsttrk
 449: 2234+17	BC01  CD79BC  		call	sektrkcmp	;sektrk = hsttrk?
 450: 2251+10	BC04  C211BC  		jnz	nomatch
 451:				;
 452:				;	same disk, same track, same buffer?
 453: 2261+13	BC07  3A55BE  		lda	sekhst
 454: 2274+10	BC0A  2154BE  		lxi	h,hstsec	;sekhst = hstsec?
 455: 2284+7	BC0D  BE      		cmp	m
 456: 2291+10	BC0E  CA35BC  		jz	match		;skip if match
 457:				;
 458:     -	BC11          	nomatch:
 459:					;proper disk, but not correct sector
 460: 2301+13	BC11  3A57BE  		lda	hstwrt		;host written?
 461: 2314+4	BC14  B7      		ora	a
 462: 2318+11+6	BC15  C485BC  		cnz	writehst	;clear host buff
 463:				;
 464:     -	BC18          	filhst:
 465:					;may have to fill the host buffer
 466: 2329+13	BC18  3A4DBE  		lda	sekdsk
 467: 2342+13	BC1B  3251BE  		sta	hstdsk
 468: 2355+16	BC1E  2A4EBE  		lhld	sektrk
 469: 2371+16	BC21  2252BE  		shld	hsttrk
 470: 2387+13	BC24  3A55BE  		lda	sekhst
 471: 2400+13	BC27  3254BE  		sta	hstsec
 472: 2413+13	BC2A  3A5EBE  		lda	rsflag		;need to read?
 473: 2426+4	BC2D  B7      		ora	a
 474: 2430+11+6	BC2E  C48BBC  		cnz	readhst		;yes, if 1
 475: 2441+4	BC31  AF      		xra	a		;0 to accum
 476: 2445+13	BC32  3257BE  		sta	hstwrt		;no pending write
 477:				;
 478:     -	BC35          	match:
 479:					;copy data to or from buffer
 480: 2458+13	BC35  3A50BE  		lda	seksec		;mask buffer number
 481: 2471+7	BC38  E601    		ani	secmsk		;least signif bits
 482: 2478+5	BC3A  6F      		mov	l,a		;ready to shift
 483: 2483+7	BC3B  2600    		mvi	h,0		;double count
 484:					rept	7		;shift left 7
 486: 2490+10	BC3D  29      		dad	h
 486:     -	BC3E          		endm
 486: 2500+10	BC3E  29      		dad	h
 486:     -	BC3F          		endm
 486: 2510+10	BC3F  29      		dad	h
 486:     -	BC40          		endm
 486: 2520+10	BC40  29      		dad	h
 486:     -	BC41          		endm
 486: 2530+10	BC41  29      		dad	h
 486:     -	BC42          		endm
 486: 2540+10	BC42  29      		dad	h
 486:     -	BC43          		endm
 486: 2550+10	BC43  29      		dad	h
 486:     -	BC44          		endm
 487:				;	hl has relative host buffer address
 488: 2560+10	BC44  1163BE  		lxi	d,hstbuf
 489: 2570+10	BC47  19      		dad	d		;hl = host address
 490: 2580+4	BC48  EB      		xchg			;now in DE
 491: 2584+16	BC49  2A61BE  		lhld	dmaadr		;get/put CP/M data
 492: 2600+7	BC4C  0E80    		mvi	c,128		;length of move
 493: 2607+13	BC4E  3A5FBE  		lda	readop		;which way?
 494: 2620+4	BC51  B7      		ora	a
 495: 2624+10	BC52  C25BBC  		jnz	rwmove		;skip if read
 496:				;
 497:				;	write operation, mark and switch direction
 498: 2634+7	BC55  3E01    		mvi	a,1
 499: 2641+13	BC57  3257BE  		sta	hstwrt		;hstwrt = 1
 500: 2654+4	BC5A  EB      		xchg			;source/dest swap
 501:				;
 502:     -	BC5B          	rwmove:
 503:					;C initially 128, DE is source, HL is dest
 504: 2658+7	BC5B  1A      		ldax	d		;source character
 505: 2665+5	BC5C  13      		inx	d
 506: 2670+7	BC5D  77      		mov	m,a		;to dest
 507: 2677+5	BC5E  23      		inx	h
 508: 2682+5	BC5F  0D      		dcr	c		;loop 128 times
 509: 2687+10	BC60  C25BBC  		jnz	rwmove
 510:				;
 511:				;	data has been moved to/from host buffer
 512: 2697+13	BC63  3A60BE  		lda	wrtype		;write type
 513: 2710+7	BC66  FE01    		cpi	wrdir		;to directory?
 514: 2717+13	BC68  3A5DBE  		lda	erflag		;in case of errors
 515: 2730+5+6	BC6B  C0      		rnz			;no further processing
 516:				;
 517:				;	clear host buffer for directory write
 518: 2735+4	BC6C  B7      		ora	a		;errors?
 519: 2739+5+6	BC6D  C0      		rnz			;skip if so
 520: 2744+4	BC6E  AF      		xra	a		;0 to accum
 521: 2748+13	BC6F  3257BE  		sta	hstwrt		;buffer written
 522: 2761+17	BC72  CD85BC  		call	writehst
 523: 2778+13	BC75  3A5DBE  		lda	erflag
 524: 2791+10	BC78  C9      		ret
 525:				;
 526:				;*****************************************************
 527:				;*                                                   *
 528:				;*	Utility subroutine for 16-bit compare        *
 529:				;*                                                   *
 530:				;*****************************************************
 531:     -	BC79          	sektrkcmp:
 532:					;HL = .unatrk or .hsttrk, compare with sektrk
 533: 2801+4	BC79  EB      		xchg
 534: 2805+10	BC7A  214EBE  		lxi	h,sektrk
 535: 2815+7	BC7D  1A      		ldax	d		;low byte compare
 536: 2822+7	BC7E  BE      		cmp	m		;same?
 537: 2829+5+6	BC7F  C0      		rnz			;return if not
 538:				;	low bytes equal, test high 1s
 539: 2834+5	BC80  13      		inx	d
 540: 2839+5	BC81  23      		inx	h
 541: 2844+7	BC82  1A      		ldax	d
 542: 2851+7	BC83  BE      		cmp	m	;sets flags
 543: 2858+10	BC84  C9      		ret
 544:				;
 545:				;*****************************************************
 546:				;*                                                   *
 547:				;*	WRITEHST performs the physical write to      *
 548:				;*	the host disk, READHST reads the physical    *
 549:				;*	disk.					     *
 550:				;*                                                   *
 551:				;*****************************************************
 552:     -	BC85          	writehst:
 553:					;hstdsk = host disk #, hsttrk = host track #,
 554:					;hstsec = host sect #. write "hstsiz" bytes
 555:					;from hstbuf and return error flag in erflag.
 556:					;return erflag non-zero if error
 557: 2868+7	BC85  F6FF    		ora	0FFh
 558: 2875+13	BC87  325DBE  		sta	erflag
 559: 2888+10	BC8A  C9      		ret
 560:				
 561:				;
 562:     -	BC8B          	readhst:
 563:					;hstdsk = host disk #, hsttrk = host track #,
 564:					;hstsec = host sect #. read "hstsiz" bytes
 565:					;into hstbuf and return error flag in erflag.
 566: 2898+10	BC8B  11AABD  		lxi	d, crlf
 567: 2908+17	BC8E  CD93BD  		call	print
 568:					
 569: 2925+10	BC91  DB0A    		in	fdcctrl		; Motor 1 on
 570:     -	BC93          		setb	2, a
 570:     -	BC93  CBD7    		DB	0CBH,2*8+a+0C0H
 570:     -	BC95          		ENDM
 571: 2935+10	BC95  D30A    		out	fdcctrl
 572:				
 573: 2945+17	BC97  CDE3BC  		call	seektrk
 574:					
 575: 2962+17	BC9A  CD67BD  		call	fdcwait
 576: 2979+7	BC9D  3E46    		mvi	a, 046h		; Read sector MFM
 577: 2986+17	BC9F  CD72BD  		call	fdcio
 578: 3003+17	BCA2  CD02BD  		call	dchrn		; Drive C H R N
 579:				
 580:					; Main read loop
 581: 3020+10	BCA5  010B00  		lxi	b, fdcdata	; B = 0 C = port
 582: 3030+10	BCA8  2163BE  		lxi	h, hstbuf
 583: 3040+10	BCAB  DB31    	readl:	in	irqstat
 584: 3050+4	BCAD  87      		add	a
 585:     -	BCAE          		jrc	fdcret
 585:     -	BCAE  380A    		DB	38H,fdcret-$-1
 585:     -	BCB0          		ENDM
 586: 3054+10	BCB0  F2ABBC  		jp	p,readl
 587:     -	BCB3          		ini
 587:     -	BCB3  EDA2    		DB	0EDH,0A2H
 587:     -	BCB5          		ENDM
 588:     -	BCB5          		jrnz	readl
 588:     -	BCB5  20F4    		DB	20H,readl-$-1
 588:     -	BCB7          		ENDM
 589: 3064+17	BCB7  CD88BD  		call	fdctc		; Send TC
 590:				
 591: 3081+17	BCBA  CD72BD  	fdcret	call	fdcio
 592: 3098+7	BCBD  E6D8    		ani	0D8h		; Interested in bits 7,6,4,3
 593: 3105+5	BCBF  47      		mov	b, a
 594: 3110+17	BCC0  CD72BD  		call	fdcio		; ST1
 595: 3127+4	BCC3  B0      		ora	b
 596: 3131+5	BCC4  47      		mov	b, a
 597: 3136+17	BCC5  CD72BD  		call	fdcio		; ST2
 598: 3153+7	BCC8  E63F    		ani	03Fh		; Interested in bits 5..0
 599: 3160+4	BCCA  B0      		ora	b
 600: 3164+5	BCCB  47      		mov	b, a
 601:					
 602: 3169+17	BCCC  CD72BD  		call	fdcio		; C
 603: 3186+17	BCCF  CD72BD  		call	fdcio		; H
 604: 3203+17	BCD2  CD72BD  		call	fdcio		; R
 605: 3220+17	BCD5  CD72BD  		call	fdcio		; N
 606:					
 607: 3237+10	BCD8  DB0A    		in	fdcctrl		; Motor 1 off
 608:     -	BCDA          		res	2, a
 608:     -	BCDA  CB97    		DB	0CBH,2*8+a+80H
 608:     -	BCDC          		ENDM
 609: 3247+10	BCDC  D30A    		out	fdcctrl
 610:					
 611: 3257+5	BCDE  78      		mov	a, b
 612: 3262+13	BCDF  325DBE  		sta	erflag
 613: 3275+10	BCE2  C9      		ret	
 614:				
 615:				
 616:     -	BCE3          	seektrk:
 617: 3285+17	BCE3  CD67BD  		call	fdcwait
 618: 3302+7	BCE6  3E0F    		mvi	a, 00Fh		; SEEK
 619: 3309+17	BCE8  CD72BD  		call	fdcio
 620: 3326+13	BCEB  3A51BE  		lda	hstdsk		; Current disk
 621: 3339+5	BCEE  47      		mov	b, a
 622: 3344+13	BCEF  3A52BE  		lda	hsttrk
 623: 3357+7	BCF2  E620    		ani	020h		; high byte of 0..31 is side
 624: 3364+4	BCF4  1F      		rar			; Move bit D4 to D2
 625: 3368+4	BCF5  1F      		rar
 626: 3372+4	BCF6  1F      		rar
 627: 3376+4	BCF7  B0      		ora	a, b
 628: 3380+17	BCF8  CD72BD  		call	fdcio
 629: 3397+13	BCFB  3A52BE  		lda	hsttrk		; Current track
 630: 3410+17	BCFE  CD72BD  		call	fdcio
 631: 3427+10	BD01  C9      		ret
 632:				
 633: 3437+13	BD02  3A51BE  	dchrn:	lda	hstdsk		; Disk 1..2
 634: 3450+5	BD05  47      		mov	b, a
 635: 3455+13	BD06  3A54BE  		lda	hstsec
 636: 3468+4	BD09  1F      		rar			; Move bit D4 to D2
 637: 3472+4	BD0A  1F      		rar
 638: 3476+7	BD0B  E604    		ani	004h
 639: 3483+4	BD0D  B0      		ora	a, b
 640: 3487+17	BD0E  CD72BD  		call	fdcio
 641:					
 642: 3504+13	BD11  3A52BE  		lda	hsttrk		; Cylinder
 643: 3517+17	BD14  CD72BD  		call	fdcio
 644:					
 645: 3534+13	BD17  3A54BE  		lda	hstsec
 646: 3547+4	BD1A  1F      		rar			; D4 to D0
 647: 3551+4	BD1B  1F      		rar
 648: 3555+4	BD1C  1F      		rar
 649: 3559+4	BD1D  1F      		rar
 650: 3563+7	BD1E  E601    		ani	1
 651: 3570+17	BD20  CD72BD  		call	fdcio
 652:					
 653: 3587+13	BD23  3A54BE  		lda	hstsec		; Record
 654: 3600+7	BD26  E60F    		ani	00Fh		; 
 655: 3607+5	BD28  3C      		inr	a		; 1..16
 656: 3612+17	BD29  CD72BD  		call	fdcio
 657:					
 658: 3629+7	BD2C  3E01    		mvi	a, 1		; 256 bytes per sector
 659: 3636+17	BD2E  CD72BD  		call	fdcio
 660:					
 661: 3653+7	BD31  3E10    		mvi	a, 16		; EOT
 662: 3660+17	BD33  CD72BD  		call	fdcio
 663:					
 664: 3677+7	BD36  3E18    		mvi	a, 018h		; Gap Length
 665: 3684+17	BD38  CD72BD  		call	fdcio
 666:					
 667: 3701+4	BD3B  AF      		xra	a		; DTL
 668: 3705+17	BD3C  CD72BD  		call	fdcio
 669: 3722+10	BD3F  C9      		ret
 670:				
 671: 3732+7	BD40  3EFF    	fdcrst:	mvi	a, 0FFh		; Mode 3
 672: 3739+10	BD42  D333    		out	cmdb
 673: 3749+7	BD44  3EC1    		ld	a, 0C1h		; Specify input bits
 674: 3756+10	BD46  D333    		out	cmdb
 675:					
 676: 3766+10	BD48  DB0A    		in	fdcctrl
 677:     -	BD4A          		setb	5,a		; Reset pin
 677:     -	BD4A  CBEF    		DB	0CBH,5*8+a+0C0H
 677:     -	BD4C          		ENDM
 678: 3776+10	BD4C  D30A    		out	fdcctrl
 679: 3786+7	BD4E  0600    		mvi	b, 0
 680:     -	BD50          	_fdr1:	djnz	_fdr1
 680:     -	BD50  10FE    		DB	10H,_fdr1-$-1
 680:     -	BD52          		ENDM
 681:     -	BD52          		res	5,a
 681:     -	BD52  CBAF    		DB	0CBH,5*8+a+80H
 681:     -	BD54          		ENDM
 682: 3793+10	BD54  D30A    		out	fdcctrl
 683:     -	BD56          	_fdr2:	djnz	_fdr2
 683:     -	BD56  10FE    		DB	10H,_fdr2-$-1
 683:     -	BD58          		ENDM
 684:				
 685: 3803+7	BD58  3E03    		mvi	a, 03h		; Specify
 686: 3810+17	BD5A  CD72BD  		call	fdcio
 687: 3827+7	BD5D  3EBF    		mvi	a, 0BFh		; Step rate, head unload time
 688: 3834+17	BD5F  CD72BD  		call	fdcio
 689: 3851+7	BD62  3E10    		mvi	a, 010h		; Head load time
 690: 3858+10	BD64  C372BD  		jmp	fdcio
 691:				
 692:     -	BD67          	fdcwait:
 693: 3868+10	BD67  DB0C    		in	fdcstat
 694: 3878+7	BD69  E6CF    		and	0CFh		; RQM, DIO and seek status
 695: 3885+7	BD6B  FE80    		cpi	080h
 696: 3892+5+6	BD6D  C8      		rz
 697: 3897+10	BD6E  DB0B    		in	fdcdata
 698:     -	BD70          		jr	fdcwait
 698:     -	BD70  18F5    		DB	18H,fdcwait-$-1
 698:     -	BD72          		ENDM
 699:				
 700:     -	BD72          	fdcio:
 701: 3907+11	BD72  F5      		push	psw
 702: 3918+10	BD73  DB0C    	fdcwl1:	in	fdcstat
 703:     -	BD75          		bit	7,a
 703:     -	BD75  CB7F    		DB	0CBH,7*8+a+40H
 703:     -	BD77          		ENDM
 704:     -	BD77          		jrz	fdcwl1
 704:     -	BD77  28FA    		DB	28H,fdcwl1-$-1
 704:     -	BD79          		ENDM
 705:     -	BD79          		bit	6,a
 705:     -	BD79  CB77    		DB	0CBH,6*8+a+40H
 705:     -	BD7B          		ENDM
 706:     -	BD7B          		jrnz	fdcio1
 706:     -	BD7B  2007    		DB	20H,fdcio1-$-1
 706:     -	BD7D          		ENDM
 707: 3928+10	BD7D  F1      		pop	psw
 708: 3938+10	BD7E  D30B    		out	fdcdata
 709: 3948+10	BD80  C3D1BD  		jmp	phex
 710: 3958+10	BD83  C9      		ret
 711:					
 712: 3968+10	BD84  F1      	fdcio1:	pop	psw
 713: 3978+10	BD85  DB0B    		in	fdcdata
 714:					;push	psw
 715:					;call	phex
 716:					;pop	psw
 717: 3988+10	BD87  C9      		ret
 718:					
 719: 3998+10	BD88  DB0A    	fdctc:	in	fdcctrl		; Pulse TC bit
 720:     -	BD8A          		setb	4, a
 720:     -	BD8A  CBE7    		DB	0CBH,4*8+a+0C0H
 720:     -	BD8C          		ENDM
 721: 4008+10	BD8C  D30A    		out	fdcctrl
 722:     -	BD8E          		res	4, a
 722:     -	BD8E  CBA7    		DB	0CBH,4*8+a+80H
 722:     -	BD90          		ENDM
 723: 4018+10	BD90  D30A    		out	fdcctrl
 724: 4028+10	BD92  C9      		ret
 725:				
 726:					; Print the message at HL
 727: 4038+7	BD93  1A      	print	ldax	d
 728: 4045+5	BD94  4F      		mov	c, a
 729: 4050+5	BD95  13      		inx	d
 730: 4055+4	BD96  B7      		ora	a
 731: 4059+5+6	BD97  C8      		rz
 732: 4064+17	BD98  CDBABA  		call	conout
 733: 4081+10	BD9B  C393BD  		jmp	print
 734:				
 735:     -	BD9E  34386B20	mesg	db	"48k CP/M 2.2"
	              43502F4D
	              20322E32
 736:     -	BDAA  0D0A00  	crlf	db	cr,lf,0
 737:				
 738:				
 739:     -	BDAD  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 740:     -	BDB9  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 741:     -	BDC5  00000000		dw	0,0,0,0,0,0
	              00000000
	              00000000
 742:     -	BDD1          	stack:
 743:				
 744: 4091+11	BDD1  F5      	phex	push	psw
 745: 4102+7	BDD2  0E20    		mvi	c, ' '
 746: 4109+17	BDD4  CDBABA  		call	conout
 747: 4126+10	BDD7  F1      		pop	psw
 748: 4136+11	BDD8  F5      		push	psw		; Will use A twice
 749: 4147+4	BDD9  1F      		rar			; Shift upper to lower nibble
 750: 4151+4	BDDA  1F      		rar
 751: 4155+4	BDDB  1F      		rar
 752: 4159+4	BDDC  1F      		rar
 753: 4163+17	BDDD  CDE1BD  		call	phex1		; Print it
 754: 4180+10	BDE0  F1      		pop	psw		; Restore original Acc
 755: 4190+7	BDE1  E60F    	phex1	ani	00Fh		; Mask off high nibble
 756: 4197+7	BDE3  C690    		adi	090h		; Decimal adjust for ASCII
 757: 4204+4	BDE5  27      		daa
 758: 4208+7	BDE6  CE40    		aci	040h
 759: 4215+4	BDE8  27      		daa
 760: 4219+5	BDE9  4F      		mov	c, a		; Print it
 761: 4224+10	BDEA  C3BABA  		jmp	conout
 762: 4234+10	BDED  C9      		ret
 763:					
 764:     -	BDEE          		disks	1
 764:				;;	define nd disks
 764:     -	0001          	ndisks	set	1	;;for later reference
 764:     -	BDEE          	dpbase	equ	$	;base of disk parameter blocks
 764:				;;	generate the nd elements
 764:     -	0000          	dsknxt	set	0
 764:					rept	1
 764:     -	BDEE          		dskhdr	%dsknxt
 764:				;;	define a single disk header list
 764:     -	BDEE  0DBE0000	dpe0: dw	xlt0,0000h	;translate table
 764:     -	BDF2  00000000		dw	0000h,0000h	;scratch area
 764:     -	BDF6  63BFFEBD		dw	dirbuf,dpb0	;dir buff,parm block
 764:     -	BDFA  F4BFE3BF		dw	csv0,alv0	;check, alloc vectors
 764:     -	BDFE          		endm
 764:     -	0001          	dsknxt	set	dsknxt+1
 764:     -	BDFE          		endm
 764:     -	BDFE          		endm
 765:					;      dn,fsc,   lsc,[skf],bls   ,dks,dir,cks,ofs,[0]
 766:     -	BDFE          		diskdef 0,  1,cpmspt,1    ,blksiz,135,128,128,1
 766:				;;	generate the set statements for later tables
 766:     -	0000          		if	nul cpmspt
 766:					else
 766:     -	003F          	secmax	set	cpmspt-(1)	;;sectors 0...secmax
 766:     -	0040          	sectors set	secmax+1;;number of sectors
 766:     -	0010          	als0	set	(135)/8 ;;size of allocation vector
 766:     -	0001          		if	((135) mod 8) ne 0
 766:     -	0011          	als0	set	als0+1
 766:					endif
 766:     -	0020          	css0	set	(128)/4 ;;number of checksum elements
 766:				;;	generate the block shift value
 766:     -	0010          	blkval	set	blksiz/128 ;;number of sectors/block
 766:     -	0000          	blkshf	set	0	;;counts right 0's in blkval
 766:     -	0000          	blkmsk	set	0	;;fills with 1's from right
 766:					rept	16	;;once for each bit position
 766:     -	0000          		if	blkval eq 1
 766:					endif
 766:				;;	otherwise, high order 1 not found yet
 766:     -	0001          	blkshf	set	blkshf+1
 766:     -	0001          	blkmsk	set	(blkmsk shl 1) or 1
 766:     -	0008          	blkval	set	blkval/2
 766:     -	BDFE          		endm
 766:     -	0000          		if	blkval eq 1
 766:					endif
 766:				;;	otherwise, high order 1 not found yet
 766:     -	0002          	blkshf	set	blkshf+1
 766:     -	0003          	blkmsk	set	(blkmsk shl 1) or 1
 766:     -	0004          	blkval	set	blkval/2
 766:     -	BDFE          		endm
 766:     -	0000          		if	blkval eq 1
 766:					endif
 766:				;;	otherwise, high order 1 not found yet
 766:     -	0003          	blkshf	set	blkshf+1
 766:     -	0007          	blkmsk	set	(blkmsk shl 1) or 1
 766:     -	0002          	blkval	set	blkval/2
 766:     -	BDFE          		endm
 766:     -	0000          		if	blkval eq 1
 766:					endif
 766:				;;	otherwise, high order 1 not found yet
 766:     -	0004          	blkshf	set	blkshf+1
 766:     -	000F          	blkmsk	set	(blkmsk shl 1) or 1
 766:     -	0001          	blkval	set	blkval/2
 766:     -	BDFE          		endm
 766:     -	0001          		if	blkval eq 1
 766:					exitm
 766:				;;	generate the extent mask byte
 766:     -	0002          	blkval	set	blksiz/1024	;;number of kilobytes/block
 766:     -	0000          	extmsk	set	0	;;fill from right with 1's
 766:					rept	16
 766:     -	0000          		if	blkval eq 1
 766:					endif
 766:				;;	otherwise more to shift
 766:     -	0001          	extmsk	set	(extmsk shl 1) or 1
 766:     -	0001          	blkval	set	blkval/2
 766:     -	BDFE          		endm
 766:     -	0001          		if	blkval eq 1
 766:					exitm
 766:				;;	may be double byte allocation
 766:     -	0000          		if	(135) gt 256
 766:					endif
 766:				;;	may be optional [0] in last position
 766:     -	0000          		if	not nul 
 766:					endif
 766:				;;	now generate directory reservation bit vector
 766:     -	0080          	dirrem	set	128	;;# remaining to process
 766:     -	0040          	dirbks	set	blksiz/32	;;number of entries per block
 766:     -	0000          	dirblk	set	0	;;fill with 1's on each loop
 766:					rept	16
 766:     -	0000          		if	dirrem eq 0
 766:					endif
 766:				;;	not complete, iterate once again
 766:				;;	shift right and add 1 high order bit
 766:     -	8000          	dirblk	set	(dirblk shr 1) or 8000h
 766:     -	0001          		if	dirrem gt dirbks
 766:     -	0040          	dirrem	set	dirrem-dirbks
 766:					else
 766:					endif
 766:     -	BDFE          		endm
 766:     -	0000          		if	dirrem eq 0
 766:					endif
 766:				;;	not complete, iterate once again
 766:				;;	shift right and add 1 high order bit
 766:     -	C000          	dirblk	set	(dirblk shr 1) or 8000h
 766:     -	0000          		if	dirrem gt dirbks
 766:					else
 766:     -	0000          	dirrem	set	0
 766:					endif
 766:     -	BDFE          		endm
 766:     -	0001          		if	dirrem eq 0
 766:					exitm
 766:     -	BDFE          		dpbhdr	0	;;generate equ $
 766:     -	BDFE          	dpb0	equ	$		;disk parm block
 766:     -	BDFE          		endm
 766:     -	BDFE          		ddw	%sectors,<;sec per track>
 766:				;;	define a dw statement
 766:     -	BDFE  4000    		dw	64		;sec per track
 766:     -	BE00          		endm
 766:     -	BE00          		ddb	%blkshf,<;block shift>
 766:				;;	define a db statement
 766:     -	BE00  04      		db	4		;block shift
 766:     -	BE01          		endm
 766:     -	BE01          		ddb	%blkmsk,<;block mask>
 766:				;;	define a db statement
 766:     -	BE01  0F      		db	15		;block mask
 766:     -	BE02          		endm
 766:     -	BE02          		ddb	%extmsk,<;extnt mask>
 766:				;;	define a db statement
 766:     -	BE02  01      		db	1		;extnt mask
 766:     -	BE03          		endm
 766:     -	BE03          		ddw	%(135)-1,<;disk size-1>
 766:				;;	define a dw statement
 766:     -	BE03  8600    		dw	134		;disk size-1
 766:     -	BE05          		endm
 766:     -	BE05          		ddw	%(128)-1,<;directory max>
 766:				;;	define a dw statement
 766:     -	BE05  7F00    		dw	127		;directory max
 766:     -	BE07          		endm
 766:     -	BE07          		ddb	%dirblk shr 8,<;alloc0>
 766:				;;	define a db statement
 766:     -	BE07  C0      		db	192		;alloc0
 766:     -	BE08          		endm
 766:     -	BE08          		ddb	%dirblk and 0ffh,<;alloc1>
 766:				;;	define a db statement
 766:     -	BE08  00      		db	0		;alloc1
 766:     -	BE09          		endm
 766:     -	BE09          		ddw	%(128)/4,<;check size>
 766:				;;	define a dw statement
 766:     -	BE09  2000    		dw	32		;check size
 766:     -	BE0B          		endm
 766:     -	BE0B          		ddw	%1,<;offset>
 766:				;;	define a dw statement
 766:     -	BE0B  0100    		dw	1		;offset
 766:     -	BE0D          		endm
 766:				;;	generate the translate table, if requested
 766:     -	0000          		if	nul 1
 766:					else
 766:     -	0000          		if	1 eq 0
 766:					else
 766:				;;	generate the translate table
 766:     -	0000          	nxtsec	set	0	;;next sector to fill
 766:     -	0000          	nxtbas	set	0	;;moves by one on overflow
 766:     -	BE0D          		gcd	%sectors,1
 766:				;;	greatest common divisor of m,n
 766:				;;	produces value gcdn as result
 766:				;;	(used in sector translate table generation)
 766:     -	0040          	gcdm	set	64	;;variable for m
 766:     -	0001          	gcdn	set	1	;;variable for n
 766:     -	0000          	gcdr	set	0	;;variable for r
 766:					rept	65535
 766:     -	0040          	gcdx	set	gcdm/gcdn
 766:     -	0000          	gcdr	set	gcdm - gcdx*gcdn
 766:     -	0001          		if	gcdr eq 0
 766:					exitm
 766:     -	BE0D          		endm
 766:				;;	gcdn = gcd(sectors,skew)
 766:     -	0040          	neltst	set	sectors/gcdn
 766:				;;	neltst is number of elements to generate
 766:				;;	before we overlap previous elements
 766:     -	0040          	nelts	set	neltst	;;counter
 766:     -	BE0D          	xlt0	equ	$		;translate table
 766:					rept	sectors ;;once for each sector
 766:     -	0001          		if	sectors lt 256
 766:     -	BE0D          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE0D  01      		db	1		
 766:     -	BE0E          		endm
 766:					else
 766:					endif
 766:     -	0001          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	003F          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE0E          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE0E          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE0E  02      		db	2		
 766:     -	BE0F          		endm
 766:					else
 766:					endif
 766:     -	0002          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	003E          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE0F          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE0F          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE0F  03      		db	3		
 766:     -	BE10          		endm
 766:					else
 766:					endif
 766:     -	0003          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	003D          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE10          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE10          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE10  04      		db	4		
 766:     -	BE11          		endm
 766:					else
 766:					endif
 766:     -	0004          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	003C          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE11          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE11          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE11  05      		db	5		
 766:     -	BE12          		endm
 766:					else
 766:					endif
 766:     -	0005          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	003B          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE12          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE12          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE12  06      		db	6		
 766:     -	BE13          		endm
 766:					else
 766:					endif
 766:     -	0006          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	003A          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE13          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE13          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE13  07      		db	7		
 766:     -	BE14          		endm
 766:					else
 766:					endif
 766:     -	0007          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0039          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE14          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE14          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE14  08      		db	8		
 766:     -	BE15          		endm
 766:					else
 766:					endif
 766:     -	0008          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0038          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE15          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE15          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE15  09      		db	9		
 766:     -	BE16          		endm
 766:					else
 766:					endif
 766:     -	0009          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0037          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE16          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE16          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE16  0A      		db	10		
 766:     -	BE17          		endm
 766:					else
 766:					endif
 766:     -	000A          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0036          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE17          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE17          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE17  0B      		db	11		
 766:     -	BE18          		endm
 766:					else
 766:					endif
 766:     -	000B          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0035          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE18          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE18          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE18  0C      		db	12		
 766:     -	BE19          		endm
 766:					else
 766:					endif
 766:     -	000C          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0034          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE19          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE19          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE19  0D      		db	13		
 766:     -	BE1A          		endm
 766:					else
 766:					endif
 766:     -	000D          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0033          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE1A          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE1A          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE1A  0E      		db	14		
 766:     -	BE1B          		endm
 766:					else
 766:					endif
 766:     -	000E          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0032          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE1B          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE1B          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE1B  0F      		db	15		
 766:     -	BE1C          		endm
 766:					else
 766:					endif
 766:     -	000F          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0031          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE1C          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE1C          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE1C  10      		db	16		
 766:     -	BE1D          		endm
 766:					else
 766:					endif
 766:     -	0010          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0030          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE1D          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE1D          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE1D  11      		db	17		
 766:     -	BE1E          		endm
 766:					else
 766:					endif
 766:     -	0011          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	002F          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE1E          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE1E          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE1E  12      		db	18		
 766:     -	BE1F          		endm
 766:					else
 766:					endif
 766:     -	0012          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	002E          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE1F          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE1F          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE1F  13      		db	19		
 766:     -	BE20          		endm
 766:					else
 766:					endif
 766:     -	0013          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	002D          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE20          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE20          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE20  14      		db	20		
 766:     -	BE21          		endm
 766:					else
 766:					endif
 766:     -	0014          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	002C          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE21          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE21          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE21  15      		db	21		
 766:     -	BE22          		endm
 766:					else
 766:					endif
 766:     -	0015          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	002B          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE22          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE22          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE22  16      		db	22		
 766:     -	BE23          		endm
 766:					else
 766:					endif
 766:     -	0016          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	002A          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE23          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE23          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE23  17      		db	23		
 766:     -	BE24          		endm
 766:					else
 766:					endif
 766:     -	0017          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0029          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE24          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE24          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE24  18      		db	24		
 766:     -	BE25          		endm
 766:					else
 766:					endif
 766:     -	0018          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0028          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE25          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE25          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE25  19      		db	25		
 766:     -	BE26          		endm
 766:					else
 766:					endif
 766:     -	0019          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0027          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE26          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE26          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE26  1A      		db	26		
 766:     -	BE27          		endm
 766:					else
 766:					endif
 766:     -	001A          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0026          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE27          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE27          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE27  1B      		db	27		
 766:     -	BE28          		endm
 766:					else
 766:					endif
 766:     -	001B          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0025          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE28          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE28          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE28  1C      		db	28		
 766:     -	BE29          		endm
 766:					else
 766:					endif
 766:     -	001C          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0024          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE29          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE29          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE29  1D      		db	29		
 766:     -	BE2A          		endm
 766:					else
 766:					endif
 766:     -	001D          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0023          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE2A          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE2A          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE2A  1E      		db	30		
 766:     -	BE2B          		endm
 766:					else
 766:					endif
 766:     -	001E          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0022          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE2B          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE2B          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE2B  1F      		db	31		
 766:     -	BE2C          		endm
 766:					else
 766:					endif
 766:     -	001F          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0021          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE2C          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE2C          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE2C  20      		db	32		
 766:     -	BE2D          		endm
 766:					else
 766:					endif
 766:     -	0020          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0020          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE2D          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE2D          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE2D  21      		db	33		
 766:     -	BE2E          		endm
 766:					else
 766:					endif
 766:     -	0021          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	001F          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE2E          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE2E          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE2E  22      		db	34		
 766:     -	BE2F          		endm
 766:					else
 766:					endif
 766:     -	0022          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	001E          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE2F          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE2F          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE2F  23      		db	35		
 766:     -	BE30          		endm
 766:					else
 766:					endif
 766:     -	0023          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	001D          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE30          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE30          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE30  24      		db	36		
 766:     -	BE31          		endm
 766:					else
 766:					endif
 766:     -	0024          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	001C          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE31          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE31          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE31  25      		db	37		
 766:     -	BE32          		endm
 766:					else
 766:					endif
 766:     -	0025          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	001B          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE32          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE32          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE32  26      		db	38		
 766:     -	BE33          		endm
 766:					else
 766:					endif
 766:     -	0026          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	001A          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE33          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE33          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE33  27      		db	39		
 766:     -	BE34          		endm
 766:					else
 766:					endif
 766:     -	0027          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0019          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE34          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE34          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE34  28      		db	40		
 766:     -	BE35          		endm
 766:					else
 766:					endif
 766:     -	0028          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0018          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE35          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE35          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE35  29      		db	41		
 766:     -	BE36          		endm
 766:					else
 766:					endif
 766:     -	0029          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0017          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE36          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE36          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE36  2A      		db	42		
 766:     -	BE37          		endm
 766:					else
 766:					endif
 766:     -	002A          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0016          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE37          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE37          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE37  2B      		db	43		
 766:     -	BE38          		endm
 766:					else
 766:					endif
 766:     -	002B          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0015          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE38          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE38          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE38  2C      		db	44		
 766:     -	BE39          		endm
 766:					else
 766:					endif
 766:     -	002C          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0014          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE39          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE39          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE39  2D      		db	45		
 766:     -	BE3A          		endm
 766:					else
 766:					endif
 766:     -	002D          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0013          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE3A          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE3A          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE3A  2E      		db	46		
 766:     -	BE3B          		endm
 766:					else
 766:					endif
 766:     -	002E          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0012          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE3B          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE3B          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE3B  2F      		db	47		
 766:     -	BE3C          		endm
 766:					else
 766:					endif
 766:     -	002F          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0011          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE3C          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE3C          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE3C  30      		db	48		
 766:     -	BE3D          		endm
 766:					else
 766:					endif
 766:     -	0030          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0010          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE3D          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE3D          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE3D  31      		db	49		
 766:     -	BE3E          		endm
 766:					else
 766:					endif
 766:     -	0031          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	000F          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE3E          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE3E          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE3E  32      		db	50		
 766:     -	BE3F          		endm
 766:					else
 766:					endif
 766:     -	0032          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	000E          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE3F          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE3F          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE3F  33      		db	51		
 766:     -	BE40          		endm
 766:					else
 766:					endif
 766:     -	0033          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	000D          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE40          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE40          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE40  34      		db	52		
 766:     -	BE41          		endm
 766:					else
 766:					endif
 766:     -	0034          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	000C          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE41          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE41          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE41  35      		db	53		
 766:     -	BE42          		endm
 766:					else
 766:					endif
 766:     -	0035          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	000B          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE42          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE42          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE42  36      		db	54		
 766:     -	BE43          		endm
 766:					else
 766:					endif
 766:     -	0036          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	000A          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE43          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE43          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE43  37      		db	55		
 766:     -	BE44          		endm
 766:					else
 766:					endif
 766:     -	0037          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0009          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE44          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE44          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE44  38      		db	56		
 766:     -	BE45          		endm
 766:					else
 766:					endif
 766:     -	0038          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0008          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE45          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE45          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE45  39      		db	57		
 766:     -	BE46          		endm
 766:					else
 766:					endif
 766:     -	0039          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0007          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE46          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE46          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE46  3A      		db	58		
 766:     -	BE47          		endm
 766:					else
 766:					endif
 766:     -	003A          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0006          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE47          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE47          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE47  3B      		db	59		
 766:     -	BE48          		endm
 766:					else
 766:					endif
 766:     -	003B          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0005          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE48          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE48          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE48  3C      		db	60		
 766:     -	BE49          		endm
 766:					else
 766:					endif
 766:     -	003C          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0004          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE49          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE49          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE49  3D      		db	61		
 766:     -	BE4A          		endm
 766:					else
 766:					endif
 766:     -	003D          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0003          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE4A          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE4A          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE4A  3E      		db	62		
 766:     -	BE4B          		endm
 766:					else
 766:					endif
 766:     -	003E          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0002          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE4B          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE4B          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE4B  3F      		db	63		
 766:     -	BE4C          		endm
 766:					else
 766:					endif
 766:     -	003F          	nxtsec	set	nxtsec+(1)
 766:     -	0000          		if	nxtsec ge sectors
 766:					endif
 766:     -	0001          	nelts	set	nelts-1
 766:     -	0000          		if	nelts eq 0
 766:					endif
 766:     -	BE4C          		endm
 766:     -	0001          		if	sectors lt 256
 766:     -	BE4C          		ddb	%nxtsec+(1)
 766:				;;	define a db statement
 766:     -	BE4C  40      		db	64		
 766:     -	BE4D          		endm
 766:					else
 766:					endif
 766:     -	0040          	nxtsec	set	nxtsec+(1)
 766:     -	0001          		if	nxtsec ge sectors
 766:     -	0000          	nxtsec	set	nxtsec-sectors
 766:					endif
 766:     -	0000          	nelts	set	nelts-1
 766:     -	0001          		if	nelts eq 0
 766:     -	0001          	nxtbas	set	nxtbas+1
 766:     -	0001          	nxtsec	set	nxtbas
 766:     -	0040          	nelts	set	neltst
 766:					endif
 766:     -	BE4D          		endm
 766:					endif	;;end of nul fac test
 766:					endif	;;end of nul bls test
 766:					endif	;; BUG for end of repeat last defn.
 766:     -	BE4D          		endm
 767:				;
 768:				;	the remainder of the cbios is reserved uninitialized
 769:				;	data area, and does not need to be a Part of the
 770:				;	system	memory image (the space must be available,
 771:				;	however, between"begdat" and"enddat").
 772:				;
 773:     -	BE4D          	sekdsk:	ds	1		;seek disk number
 774:     -	BE4E          	sektrk:	ds	2		;seek track number
 775:     -	BE50          	seksec:	ds	1		;seek sector number
 776:				;
 777:     -	BE51          	hstdsk:	ds	1		;host disk number
 778:     -	BE52          	hsttrk:	ds	2		;host track number
 779:     -	BE54          	hstsec:	ds	1		;host sector number
 780:				;
 781:     -	BE55          	sekhst:	ds	1		;seek shr secshf
 782:     -	BE56          	hstact:	ds	1		;host active flag
 783:     -	BE57          	hstwrt:	ds	1		;host written flag
 784:				;
 785:     -	BE58          	unacnt:	ds	1		;unalloc rec cnt
 786:     -	BE59          	unadsk:	ds	1		;last unalloc disk
 787:     -	BE5A          	unatrk:	ds	2		;last unalloc track
 788:     -	BE5C          	unasec:	ds	1		;last unalloc sector
 789:				;
 790:     -	BE5D          	erflag:	ds	1		;error reporting
 791:     -	BE5E          	rsflag:	ds	1		;read sector flag
 792:     -	BE5F          	readop:	ds	1		;1 if read operation
 793:     -	BE60          	wrtype:	ds	1		;write operation type
 794:     -	BE61          	dmaadr:	ds	2		;last dma address
 795:     -	BE63          	hstbuf:	ds	hstsiz		;host buffer
 796:     -	BF63          		endef
 796:				;;	generate the necessary ram data areas
 796:     -	BF63          	begdat	equ	$
 796:     -	BF63          	dirbuf: ds	128	;directory access buffer
 796:     -	0000          	dsknxt	set	0
 796:					rept	ndisks	;;once for each disk
 796:     -	BFE3          		lds	alv,%dsknxt,als
 796:     -	BFE3          	alv0:	ds	als0
 796:     -	BFF4          		endm
 796:     -	BFF4          		lds	csv,%dsknxt,css
 796:     -	BFF4          	csv0:	ds	css0
 796:     -	C014          		endm
 796:     -	0001          	dsknxt	set	dsknxt+1
 796:     -	C014          		endm
 796:     -	C014          	enddat	equ	$
 796:     -	00B1          	datsiz	equ	$-begdat
 796:				;;	db 0 at this point forces hex record
 796:     -	C014          		endm
 797:					
 798:					rept	(0C1C0h - $)
 800:     -	C014  00      		db	0
 800:     -	C015          		endm
 800:     -	C015  00      		db	0
 800:     -	C016          		endm
 800:     -	C016  00      		db	0
 800:     -	C017          		endm
 800:     -	C017  00      		db	0
 800:     -	C018          		endm
 800:     -	C018  00      		db	0
 800:     -	C019          		endm
 800:     -	C019  00      		db	0
 800:     -	C01A          		endm
 800:     -	C01A  00      		db	0
 800:     -	C01B          		endm
 800:     -	C01B  00      		db	0
 800:     -	C01C          		endm
 800:     -	C01C  00      		db	0
 800:     -	C01D          		endm
 800:     -	C01D  00      		db	0
 800:     -	C01E          		endm
 800:     -	C01E  00      		db	0
 800:     -	C01F          		endm
 800:     -	C01F  00      		db	0
 800:     -	C020          		endm
 800:     -	C020  00      		db	0
 800:     -	C021          		endm
 800:     -	C021  00      		db	0
 800:     -	C022          		endm
 800:     -	C022  00      		db	0
 800:     -	C023          		endm
 800:     -	C023  00      		db	0
 800:     -	C024          		endm
 800:     -	C024  00      		db	0
 800:     -	C025          		endm
 800:     -	C025  00      		db	0
 800:     -	C026          		endm
 800:     -	C026  00      		db	0
 800:     -	C027          		endm
 800:     -	C027  00      		db	0
 800:     -	C028          		endm
 800:     -	C028  00      		db	0
 800:     -	C029          		endm
 800:     -	C029  00      		db	0
 800:     -	C02A          		endm
 800:     -	C02A  00      		db	0
 800:     -	C02B          		endm
 800:     -	C02B  00      		db	0
 800:     -	C02C          		endm
 800:     -	C02C  00      		db	0
 800:     -	C02D          		endm
 800:     -	C02D  00      		db	0
 800:     -	C02E          		endm
 800:     -	C02E  00      		db	0
 800:     -	C02F          		endm
 800:     -	C02F  00      		db	0
 800:     -	C030          		endm
 800:     -	C030  00      		db	0
 800:     -	C031          		endm
 800:     -	C031  00      		db	0
 800:     -	C032          		endm
 800:     -	C032  00      		db	0
 800:     -	C033          		endm
 800:     -	C033  00      		db	0
 800:     -	C034          		endm
 800:     -	C034  00      		db	0
 800:     -	C035          		endm
 800:     -	C035  00      		db	0
 800:     -	C036          		endm
 800:     -	C036  00      		db	0
 800:     -	C037          		endm
 800:     -	C037  00      		db	0
 800:     -	C038          		endm
 800:     -	C038  00      		db	0
 800:     -	C039          		endm
 800:     -	C039  00      		db	0
 800:     -	C03A          		endm
 800:     -	C03A  00      		db	0
 800:     -	C03B          		endm
 800:     -	C03B  00      		db	0
 800:     -	C03C          		endm
 800:     -	C03C  00      		db	0
 800:     -	C03D          		endm
 800:     -	C03D  00      		db	0
 800:     -	C03E          		endm
 800:     -	C03E  00      		db	0
 800:     -	C03F          		endm
 800:     -	C03F  00      		db	0
 800:     -	C040          		endm
 800:     -	C040  00      		db	0
 800:     -	C041          		endm
 800:     -	C041  00      		db	0
 800:     -	C042          		endm
 800:     -	C042  00      		db	0
 800:     -	C043          		endm
 800:     -	C043  00      		db	0
 800:     -	C044          		endm
 800:     -	C044  00      		db	0
 800:     -	C045          		endm
 800:     -	C045  00      		db	0
 800:     -	C046          		endm
 800:     -	C046  00      		db	0
 800:     -	C047          		endm
 800:     -	C047  00      		db	0
 800:     -	C048          		endm
 800:     -	C048  00      		db	0
 800:     -	C049          		endm
 800:     -	C049  00      		db	0
 800:     -	C04A          		endm
 800:     -	C04A  00      		db	0
 800:     -	C04B          		endm
 800:     -	C04B  00      		db	0
 800:     -	C04C          		endm
 800:     -	C04C  00      		db	0
 800:     -	C04D          		endm
 800:     -	C04D  00      		db	0
 800:     -	C04E          		endm
 800:     -	C04E  00      		db	0
 800:     -	C04F          		endm
 800:     -	C04F  00      		db	0
 800:     -	C050          		endm
 800:     -	C050  00      		db	0
 800:     -	C051          		endm
 800:     -	C051  00      		db	0
 800:     -	C052          		endm
 800:     -	C052  00      		db	0
 800:     -	C053          		endm
 800:     -	C053  00      		db	0
 800:     -	C054          		endm
 800:     -	C054  00      		db	0
 800:     -	C055          		endm
 800:     -	C055  00      		db	0
 800:     -	C056          		endm
 800:     -	C056  00      		db	0
 800:     -	C057          		endm
 800:     -	C057  00      		db	0
 800:     -	C058          		endm
 800:     -	C058  00      		db	0
 800:     -	C059          		endm
 800:     -	C059  00      		db	0
 800:     -	C05A          		endm
 800:     -	C05A  00      		db	0
 800:     -	C05B          		endm
 800:     -	C05B  00      		db	0
 800:     -	C05C          		endm
 800:     -	C05C  00      		db	0
 800:     -	C05D          		endm
 800:     -	C05D  00      		db	0
 800:     -	C05E          		endm
 800:     -	C05E  00      		db	0
 800:     -	C05F          		endm
 800:     -	C05F  00      		db	0
 800:     -	C060          		endm
 800:     -	C060  00      		db	0
 800:     -	C061          		endm
 800:     -	C061  00      		db	0
 800:     -	C062          		endm
 800:     -	C062  00      		db	0
 800:     -	C063          		endm
 800:     -	C063  00      		db	0
 800:     -	C064          		endm
 800:     -	C064  00      		db	0
 800:     -	C065          		endm
 800:     -	C065  00      		db	0
 800:     -	C066          		endm
 800:     -	C066  00      		db	0
 800:     -	C067          		endm
 800:     -	C067  00      		db	0
 800:     -	C068          		endm
 800:     -	C068  00      		db	0
 800:     -	C069          		endm
 800:     -	C069  00      		db	0
 800:     -	C06A          		endm
 800:     -	C06A  00      		db	0
 800:     -	C06B          		endm
 800:     -	C06B  00      		db	0
 800:     -	C06C          		endm
 800:     -	C06C  00      		db	0
 800:     -	C06D          		endm
 800:     -	C06D  00      		db	0
 800:     -	C06E          		endm
 800:     -	C06E  00      		db	0
 800:     -	C06F          		endm
 800:     -	C06F  00      		db	0
 800:     -	C070          		endm
 800:     -	C070  00      		db	0
 800:     -	C071          		endm
 800:     -	C071  00      		db	0
 800:     -	C072          		endm
 800:     -	C072  00      		db	0
 800:     -	C073          		endm
 800:     -	C073  00      		db	0
 800:     -	C074          		endm
 800:     -	C074  00      		db	0
 800:     -	C075          		endm
 800:     -	C075  00      		db	0
 800:     -	C076          		endm
 800:     -	C076  00      		db	0
 800:     -	C077          		endm
 800:     -	C077  00      		db	0
 800:     -	C078          		endm
 800:     -	C078  00      		db	0
 800:     -	C079          		endm
 800:     -	C079  00      		db	0
 800:     -	C07A          		endm
 800:     -	C07A  00      		db	0
 800:     -	C07B          		endm
 800:     -	C07B  00      		db	0
 800:     -	C07C          		endm
 800:     -	C07C  00      		db	0
 800:     -	C07D          		endm
 800:     -	C07D  00      		db	0
 800:     -	C07E          		endm
 800:     -	C07E  00      		db	0
 800:     -	C07F          		endm
 800:     -	C07F  00      		db	0
 800:     -	C080          		endm
 800:     -	C080  00      		db	0
 800:     -	C081          		endm
 800:     -	C081  00      		db	0
 800:     -	C082          		endm
 800:     -	C082  00      		db	0
 800:     -	C083          		endm
 800:     -	C083  00      		db	0
 800:     -	C084          		endm
 800:     -	C084  00      		db	0
 800:     -	C085          		endm
 800:     -	C085  00      		db	0
 800:     -	C086          		endm
 800:     -	C086  00      		db	0
 800:     -	C087          		endm
 800:     -	C087  00      		db	0
 800:     -	C088          		endm
 800:     -	C088  00      		db	0
 800:     -	C089          		endm
 800:     -	C089  00      		db	0
 800:     -	C08A          		endm
 800:     -	C08A  00      		db	0
 800:     -	C08B          		endm
 800:     -	C08B  00      		db	0
 800:     -	C08C          		endm
 800:     -	C08C  00      		db	0
 800:     -	C08D          		endm
 800:     -	C08D  00      		db	0
 800:     -	C08E          		endm
 800:     -	C08E  00      		db	0
 800:     -	C08F          		endm
 800:     -	C08F  00      		db	0
 800:     -	C090          		endm
 800:     -	C090  00      		db	0
 800:     -	C091          		endm
 800:     -	C091  00      		db	0
 800:     -	C092          		endm
 800:     -	C092  00      		db	0
 800:     -	C093          		endm
 800:     -	C093  00      		db	0
 800:     -	C094          		endm
 800:     -	C094  00      		db	0
 800:     -	C095          		endm
 800:     -	C095  00      		db	0
 800:     -	C096          		endm
 800:     -	C096  00      		db	0
 800:     -	C097          		endm
 800:     -	C097  00      		db	0
 800:     -	C098          		endm
 800:     -	C098  00      		db	0
 800:     -	C099          		endm
 800:     -	C099  00      		db	0
 800:     -	C09A          		endm
 800:     -	C09A  00      		db	0
 800:     -	C09B          		endm
 800:     -	C09B  00      		db	0
 800:     -	C09C          		endm
 800:     -	C09C  00      		db	0
 800:     -	C09D          		endm
 800:     -	C09D  00      		db	0
 800:     -	C09E          		endm
 800:     -	C09E  00      		db	0
 800:     -	C09F          		endm
 800:     -	C09F  00      		db	0
 800:     -	C0A0          		endm
 800:     -	C0A0  00      		db	0
 800:     -	C0A1          		endm
 800:     -	C0A1  00      		db	0
 800:     -	C0A2          		endm
 800:     -	C0A2  00      		db	0
 800:     -	C0A3          		endm
 800:     -	C0A3  00      		db	0
 800:     -	C0A4          		endm
 800:     -	C0A4  00      		db	0
 800:     -	C0A5          		endm
 800:     -	C0A5  00      		db	0
 800:     -	C0A6          		endm
 800:     -	C0A6  00      		db	0
 800:     -	C0A7          		endm
 800:     -	C0A7  00      		db	0
 800:     -	C0A8          		endm
 800:     -	C0A8  00      		db	0
 800:     -	C0A9          		endm
 800:     -	C0A9  00      		db	0
 800:     -	C0AA          		endm
 800:     -	C0AA  00      		db	0
 800:     -	C0AB          		endm
 800:     -	C0AB  00      		db	0
 800:     -	C0AC          		endm
 800:     -	C0AC  00      		db	0
 800:     -	C0AD          		endm
 800:     -	C0AD  00      		db	0
 800:     -	C0AE          		endm
 800:     -	C0AE  00      		db	0
 800:     -	C0AF          		endm
 800:     -	C0AF  00      		db	0
 800:     -	C0B0          		endm
 800:     -	C0B0  00      		db	0
 800:     -	C0B1          		endm
 800:     -	C0B1  00      		db	0
 800:     -	C0B2          		endm
 800:     -	C0B2  00      		db	0
 800:     -	C0B3          		endm
 800:     -	C0B3  00      		db	0
 800:     -	C0B4          		endm
 800:     -	C0B4  00      		db	0
 800:     -	C0B5          		endm
 800:     -	C0B5  00      		db	0
 800:     -	C0B6          		endm
 800:     -	C0B6  00      		db	0
 800:     -	C0B7          		endm
 800:     -	C0B7  00      		db	0
 800:     -	C0B8          		endm
 800:     -	C0B8  00      		db	0
 800:     -	C0B9          		endm
 800:     -	C0B9  00      		db	0
 800:     -	C0BA          		endm
 800:     -	C0BA  00      		db	0
 800:     -	C0BB          		endm
 800:     -	C0BB  00      		db	0
 800:     -	C0BC          		endm
 800:     -	C0BC  00      		db	0
 800:     -	C0BD          		endm
 800:     -	C0BD  00      		db	0
 800:     -	C0BE          		endm
 800:     -	C0BE  00      		db	0
 800:     -	C0BF          		endm
 800:     -	C0BF  00      		db	0
 800:     -	C0C0          		endm
 800:     -	C0C0  00      		db	0
 800:     -	C0C1          		endm
 800:     -	C0C1  00      		db	0
 800:     -	C0C2          		endm
 800:     -	C0C2  00      		db	0
 800:     -	C0C3          		endm
 800:     -	C0C3  00      		db	0
 800:     -	C0C4          		endm
 800:     -	C0C4  00      		db	0
 800:     -	C0C5          		endm
 800:     -	C0C5  00      		db	0
 800:     -	C0C6          		endm
 800:     -	C0C6  00      		db	0
 800:     -	C0C7          		endm
 800:     -	C0C7  00      		db	0
 800:     -	C0C8          		endm
 800:     -	C0C8  00      		db	0
 800:     -	C0C9          		endm
 800:     -	C0C9  00      		db	0
 800:     -	C0CA          		endm
 800:     -	C0CA  00      		db	0
 800:     -	C0CB          		endm
 800:     -	C0CB  00      		db	0
 800:     -	C0CC          		endm
 800:     -	C0CC  00      		db	0
 800:     -	C0CD          		endm
 800:     -	C0CD  00      		db	0
 800:     -	C0CE          		endm
 800:     -	C0CE  00      		db	0
 800:     -	C0CF          		endm
 800:     -	C0CF  00      		db	0
 800:     -	C0D0          		endm
 800:     -	C0D0  00      		db	0
 800:     -	C0D1          		endm
 800:     -	C0D1  00      		db	0
 800:     -	C0D2          		endm
 800:     -	C0D2  00      		db	0
 800:     -	C0D3          		endm
 800:     -	C0D3  00      		db	0
 800:     -	C0D4          		endm
 800:     -	C0D4  00      		db	0
 800:     -	C0D5          		endm
 800:     -	C0D5  00      		db	0
 800:     -	C0D6          		endm
 800:     -	C0D6  00      		db	0
 800:     -	C0D7          		endm
 800:     -	C0D7  00      		db	0
 800:     -	C0D8          		endm
 800:     -	C0D8  00      		db	0
 800:     -	C0D9          		endm
 800:     -	C0D9  00      		db	0
 800:     -	C0DA          		endm
 800:     -	C0DA  00      		db	0
 800:     -	C0DB          		endm
 800:     -	C0DB  00      		db	0
 800:     -	C0DC          		endm
 800:     -	C0DC  00      		db	0
 800:     -	C0DD          		endm
 800:     -	C0DD  00      		db	0
 800:     -	C0DE          		endm
 800:     -	C0DE  00      		db	0
 800:     -	C0DF          		endm
 800:     -	C0DF  00      		db	0
 800:     -	C0E0          		endm
 800:     -	C0E0  00      		db	0
 800:     -	C0E1          		endm
 800:     -	C0E1  00      		db	0
 800:     -	C0E2          		endm
 800:     -	C0E2  00      		db	0
 800:     -	C0E3          		endm
 800:     -	C0E3  00      		db	0
 800:     -	C0E4          		endm
 800:     -	C0E4  00      		db	0
 800:     -	C0E5          		endm
 800:     -	C0E5  00      		db	0
 800:     -	C0E6          		endm
 800:     -	C0E6  00      		db	0
 800:     -	C0E7          		endm
 800:     -	C0E7  00      		db	0
 800:     -	C0E8          		endm
 800:     -	C0E8  00      		db	0
 800:     -	C0E9          		endm
 800:     -	C0E9  00      		db	0
 800:     -	C0EA          		endm
 800:     -	C0EA  00      		db	0
 800:     -	C0EB          		endm
 800:     -	C0EB  00      		db	0
 800:     -	C0EC          		endm
 800:     -	C0EC  00      		db	0
 800:     -	C0ED          		endm
 800:     -	C0ED  00      		db	0
 800:     -	C0EE          		endm
 800:     -	C0EE  00      		db	0
 800:     -	C0EF          		endm
 800:     -	C0EF  00      		db	0
 800:     -	C0F0          		endm
 800:     -	C0F0  00      		db	0
 800:     -	C0F1          		endm
 800:     -	C0F1  00      		db	0
 800:     -	C0F2          		endm
 800:     -	C0F2  00      		db	0
 800:     -	C0F3          		endm
 800:     -	C0F3  00      		db	0
 800:     -	C0F4          		endm
 800:     -	C0F4  00      		db	0
 800:     -	C0F5          		endm
 800:     -	C0F5  00      		db	0
 800:     -	C0F6          		endm
 800:     -	C0F6  00      		db	0
 800:     -	C0F7          		endm
 800:     -	C0F7  00      		db	0
 800:     -	C0F8          		endm
 800:     -	C0F8  00      		db	0
 800:     -	C0F9          		endm
 800:     -	C0F9  00      		db	0
 800:     -	C0FA          		endm
 800:     -	C0FA  00      		db	0
 800:     -	C0FB          		endm
 800:     -	C0FB  00      		db	0
 800:     -	C0FC          		endm
 800:     -	C0FC  00      		db	0
 800:     -	C0FD          		endm
 800:     -	C0FD  00      		db	0
 800:     -	C0FE          		endm
 800:     -	C0FE  00      		db	0
 800:     -	C0FF          		endm
 800:     -	C0FF  00      		db	0
 800:     -	C100          		endm
 800:     -	C100  00      		db	0
 800:     -	C101          		endm
 800:     -	C101  00      		db	0
 800:     -	C102          		endm
 800:     -	C102  00      		db	0
 800:     -	C103          		endm
 800:     -	C103  00      		db	0
 800:     -	C104          		endm
 800:     -	C104  00      		db	0
 800:     -	C105          		endm
 800:     -	C105  00      		db	0
 800:     -	C106          		endm
 800:     -	C106  00      		db	0
 800:     -	C107          		endm
 800:     -	C107  00      		db	0
 800:     -	C108          		endm
 800:     -	C108  00      		db	0
 800:     -	C109          		endm
 800:     -	C109  00      		db	0
 800:     -	C10A          		endm
 800:     -	C10A  00      		db	0
 800:     -	C10B          		endm
 800:     -	C10B  00      		db	0
 800:     -	C10C          		endm
 800:     -	C10C  00      		db	0
 800:     -	C10D          		endm
 800:     -	C10D  00      		db	0
 800:     -	C10E          		endm
 800:     -	C10E  00      		db	0
 800:     -	C10F          		endm
 800:     -	C10F  00      		db	0
 800:     -	C110          		endm
 800:     -	C110  00      		db	0
 800:     -	C111          		endm
 800:     -	C111  00      		db	0
 800:     -	C112          		endm
 800:     -	C112  00      		db	0
 800:     -	C113          		endm
 800:     -	C113  00      		db	0
 800:     -	C114          		endm
 800:     -	C114  00      		db	0
 800:     -	C115          		endm
 800:     -	C115  00      		db	0
 800:     -	C116          		endm
 800:     -	C116  00      		db	0
 800:     -	C117          		endm
 800:     -	C117  00      		db	0
 800:     -	C118          		endm
 800:     -	C118  00      		db	0
 800:     -	C119          		endm
 800:     -	C119  00      		db	0
 800:     -	C11A          		endm
 800:     -	C11A  00      		db	0
 800:     -	C11B          		endm
 800:     -	C11B  00      		db	0
 800:     -	C11C          		endm
 800:     -	C11C  00      		db	0
 800:     -	C11D          		endm
 800:     -	C11D  00      		db	0
 800:     -	C11E          		endm
 800:     -	C11E  00      		db	0
 800:     -	C11F          		endm
 800:     -	C11F  00      		db	0
 800:     -	C120          		endm
 800:     -	C120  00      		db	0
 800:     -	C121          		endm
 800:     -	C121  00      		db	0
 800:     -	C122          		endm
 800:     -	C122  00      		db	0
 800:     -	C123          		endm
 800:     -	C123  00      		db	0
 800:     -	C124          		endm
 800:     -	C124  00      		db	0
 800:     -	C125          		endm
 800:     -	C125  00      		db	0
 800:     -	C126          		endm
 800:     -	C126  00      		db	0
 800:     -	C127          		endm
 800:     -	C127  00      		db	0
 800:     -	C128          		endm
 800:     -	C128  00      		db	0
 800:     -	C129          		endm
 800:     -	C129  00      		db	0
 800:     -	C12A          		endm
 800:     -	C12A  00      		db	0
 800:     -	C12B          		endm
 800:     -	C12B  00      		db	0
 800:     -	C12C          		endm
 800:     -	C12C  00      		db	0
 800:     -	C12D          		endm
 800:     -	C12D  00      		db	0
 800:     -	C12E          		endm
 800:     -	C12E  00      		db	0
 800:     -	C12F          		endm
 800:     -	C12F  00      		db	0
 800:     -	C130          		endm
 800:     -	C130  00      		db	0
 800:     -	C131          		endm
 800:     -	C131  00      		db	0
 800:     -	C132          		endm
 800:     -	C132  00      		db	0
 800:     -	C133          		endm
 800:     -	C133  00      		db	0
 800:     -	C134          		endm
 800:     -	C134  00      		db	0
 800:     -	C135          		endm
 800:     -	C135  00      		db	0
 800:     -	C136          		endm
 800:     -	C136  00      		db	0
 800:     -	C137          		endm
 800:     -	C137  00      		db	0
 800:     -	C138          		endm
 800:     -	C138  00      		db	0
 800:     -	C139          		endm
 800:     -	C139  00      		db	0
 800:     -	C13A          		endm
 800:     -	C13A  00      		db	0
 800:     -	C13B          		endm
 800:     -	C13B  00      		db	0
 800:     -	C13C          		endm
 800:     -	C13C  00      		db	0
 800:     -	C13D          		endm
 800:     -	C13D  00      		db	0
 800:     -	C13E          		endm
 800:     -	C13E  00      		db	0
 800:     -	C13F          		endm
 800:     -	C13F  00      		db	0
 800:     -	C140          		endm
 800:     -	C140  00      		db	0
 800:     -	C141          		endm
 800:     -	C141  00      		db	0
 800:     -	C142          		endm
 800:     -	C142  00      		db	0
 800:     -	C143          		endm
 800:     -	C143  00      		db	0
 800:     -	C144          		endm
 800:     -	C144  00      		db	0
 800:     -	C145          		endm
 800:     -	C145  00      		db	0
 800:     -	C146          		endm
 800:     -	C146  00      		db	0
 800:     -	C147          		endm
 800:     -	C147  00      		db	0
 800:     -	C148          		endm
 800:     -	C148  00      		db	0
 800:     -	C149          		endm
 800:     -	C149  00      		db	0
 800:     -	C14A          		endm
 800:     -	C14A  00      		db	0
 800:     -	C14B          		endm
 800:     -	C14B  00      		db	0
 800:     -	C14C          		endm
 800:     -	C14C  00      		db	0
 800:     -	C14D          		endm
 800:     -	C14D  00      		db	0
 800:     -	C14E          		endm
 800:     -	C14E  00      		db	0
 800:     -	C14F          		endm
 800:     -	C14F  00      		db	0
 800:     -	C150          		endm
 800:     -	C150  00      		db	0
 800:     -	C151          		endm
 800:     -	C151  00      		db	0
 800:     -	C152          		endm
 800:     -	C152  00      		db	0
 800:     -	C153          		endm
 800:     -	C153  00      		db	0
 800:     -	C154          		endm
 800:     -	C154  00      		db	0
 800:     -	C155          		endm
 800:     -	C155  00      		db	0
 800:     -	C156          		endm
 800:     -	C156  00      		db	0
 800:     -	C157          		endm
 800:     -	C157  00      		db	0
 800:     -	C158          		endm
 800:     -	C158  00      		db	0
 800:     -	C159          		endm
 800:     -	C159  00      		db	0
 800:     -	C15A          		endm
 800:     -	C15A  00      		db	0
 800:     -	C15B          		endm
 800:     -	C15B  00      		db	0
 800:     -	C15C          		endm
 800:     -	C15C  00      		db	0
 800:     -	C15D          		endm
 800:     -	C15D  00      		db	0
 800:     -	C15E          		endm
 800:     -	C15E  00      		db	0
 800:     -	C15F          		endm
 800:     -	C15F  00      		db	0
 800:     -	C160          		endm
 800:     -	C160  00      		db	0
 800:     -	C161          		endm
 800:     -	C161  00      		db	0
 800:     -	C162          		endm
 800:     -	C162  00      		db	0
 800:     -	C163          		endm
 800:     -	C163  00      		db	0
 800:     -	C164          		endm
 800:     -	C164  00      		db	0
 800:     -	C165          		endm
 800:     -	C165  00      		db	0
 800:     -	C166          		endm
 800:     -	C166  00      		db	0
 800:     -	C167          		endm
 800:     -	C167  00      		db	0
 800:     -	C168          		endm
 800:     -	C168  00      		db	0
 800:     -	C169          		endm
 800:     -	C169  00      		db	0
 800:     -	C16A          		endm
 800:     -	C16A  00      		db	0
 800:     -	C16B          		endm
 800:     -	C16B  00      		db	0
 800:     -	C16C          		endm
 800:     -	C16C  00      		db	0
 800:     -	C16D          		endm
 800:     -	C16D  00      		db	0
 800:     -	C16E          		endm
 800:     -	C16E  00      		db	0
 800:     -	C16F          		endm
 800:     -	C16F  00      		db	0
 800:     -	C170          		endm
 800:     -	C170  00      		db	0
 800:     -	C171          		endm
 800:     -	C171  00      		db	0
 800:     -	C172          		endm
 800:     -	C172  00      		db	0
 800:     -	C173          		endm
 800:     -	C173  00      		db	0
 800:     -	C174          		endm
 800:     -	C174  00      		db	0
 800:     -	C175          		endm
 800:     -	C175  00      		db	0
 800:     -	C176          		endm
 800:     -	C176  00      		db	0
 800:     -	C177          		endm
 800:     -	C177  00      		db	0
 800:     -	C178          		endm
 800:     -	C178  00      		db	0
 800:     -	C179          		endm
 800:     -	C179  00      		db	0
 800:     -	C17A          		endm
 800:     -	C17A  00      		db	0
 800:     -	C17B          		endm
 800:     -	C17B  00      		db	0
 800:     -	C17C          		endm
 800:     -	C17C  00      		db	0
 800:     -	C17D          		endm
 800:     -	C17D  00      		db	0
 800:     -	C17E          		endm
 800:     -	C17E  00      		db	0
 800:     -	C17F          		endm
 800:     -	C17F  00      		db	0
 800:     -	C180          		endm
 800:     -	C180  00      		db	0
 800:     -	C181          		endm
 800:     -	C181  00      		db	0
 800:     -	C182          		endm
 800:     -	C182  00      		db	0
 800:     -	C183          		endm
 800:     -	C183  00      		db	0
 800:     -	C184          		endm
 800:     -	C184  00      		db	0
 800:     -	C185          		endm
 800:     -	C185  00      		db	0
 800:     -	C186          		endm
 800:     -	C186  00      		db	0
 800:     -	C187          		endm
 800:     -	C187  00      		db	0
 800:     -	C188          		endm
 800:     -	C188  00      		db	0
 800:     -	C189          		endm
 800:     -	C189  00      		db	0
 800:     -	C18A          		endm
 800:     -	C18A  00      		db	0
 800:     -	C18B          		endm
 800:     -	C18B  00      		db	0
 800:     -	C18C          		endm
 800:     -	C18C  00      		db	0
 800:     -	C18D          		endm
 800:     -	C18D  00      		db	0
 800:     -	C18E          		endm
 800:     -	C18E  00      		db	0
 800:     -	C18F          		endm
 800:     -	C18F  00      		db	0
 800:     -	C190          		endm
 800:     -	C190  00      		db	0
 800:     -	C191          		endm
 800:     -	C191  00      		db	0
 800:     -	C192          		endm
 800:     -	C192  00      		db	0
 800:     -	C193          		endm
 800:     -	C193  00      		db	0
 800:     -	C194          		endm
 800:     -	C194  00      		db	0
 800:     -	C195          		endm
 800:     -	C195  00      		db	0
 800:     -	C196          		endm
 800:     -	C196  00      		db	0
 800:     -	C197          		endm
 800:     -	C197  00      		db	0
 800:     -	C198          		endm
 800:     -	C198  00      		db	0
 800:     -	C199          		endm
 800:     -	C199  00      		db	0
 800:     -	C19A          		endm
 800:     -	C19A  00      		db	0
 800:     -	C19B          		endm
 800:     -	C19B  00      		db	0
 800:     -	C19C          		endm
 800:     -	C19C  00      		db	0
 800:     -	C19D          		endm
 800:     -	C19D  00      		db	0
 800:     -	C19E          		endm
 800:     -	C19E  00      		db	0
 800:     -	C19F          		endm
 800:     -	C19F  00      		db	0
 800:     -	C1A0          		endm
 800:     -	C1A0  00      		db	0
 800:     -	C1A1          		endm
 800:     -	C1A1  00      		db	0
 800:     -	C1A2          		endm
 800:     -	C1A2  00      		db	0
 800:     -	C1A3          		endm
 800:     -	C1A3  00      		db	0
 800:     -	C1A4          		endm
 800:     -	C1A4  00      		db	0
 800:     -	C1A5          		endm
 800:     -	C1A5  00      		db	0
 800:     -	C1A6          		endm
 800:     -	C1A6  00      		db	0
 800:     -	C1A7          		endm
 800:     -	C1A7  00      		db	0
 800:     -	C1A8          		endm
 800:     -	C1A8  00      		db	0
 800:     -	C1A9          		endm
 800:     -	C1A9  00      		db	0
 800:     -	C1AA          		endm
 800:     -	C1AA  00      		db	0
 800:     -	C1AB          		endm
 800:     -	C1AB  00      		db	0
 800:     -	C1AC          		endm
 800:     -	C1AC  00      		db	0
 800:     -	C1AD          		endm
 800:     -	C1AD  00      		db	0
 800:     -	C1AE          		endm
 800:     -	C1AE  00      		db	0
 800:     -	C1AF          		endm
 800:     -	C1AF  00      		db	0
 800:     -	C1B0          		endm
 800:     -	C1B0  00      		db	0
 800:     -	C1B1          		endm
 800:     -	C1B1  00      		db	0
 800:     -	C1B2          		endm
 800:     -	C1B2  00      		db	0
 800:     -	C1B3          		endm
 800:     -	C1B3  00      		db	0
 800:     -	C1B4          		endm
 800:     -	C1B4  00      		db	0
 800:     -	C1B5          		endm
 800:     -	C1B5  00      		db	0
 800:     -	C1B6          		endm
 800:     -	C1B6  00      		db	0
 800:     -	C1B7          		endm
 800:     -	C1B7  00      		db	0
 800:     -	C1B8          		endm
 800:     -	C1B8  00      		db	0
 800:     -	C1B9          		endm
 800:     -	C1B9  00      		db	0
 800:     -	C1BA          		endm
 800:     -	C1BA  00      		db	0
 800:     -	C1BB          		endm
 800:     -	C1BB  00      		db	0
 800:     -	C1BC          		endm
 800:     -	C1BC  00      		db	0
 800:     -	C1BD          		endm
 800:     -	C1BD  00      		db	0
 800:     -	C1BE          		endm
 800:     -	C1BE  00      		db	0
 800:     -	C1BF          		endm
 800:     -	C1BF  00      		db	0
 800:     -	C1C0          		endm
 801:					
 802:     -	C1C0          		end



Statistics:

     4	passes
     0	jr promotions
   152	symbols
  1529	bytes

   626	macro calls
  8859	macro bytes
     0	invented symbols



Symbol Table:

@x             =01        1
@y             =01        1
BC             =00        0
DE             =02        2
HL             =04        4
IX             =04        4
IY             =04        4
_fdr1           BD50      48464
_fdr2           BD56      48470
alloc           BBD6      48086
als0           =11        17
alv0            BFE3      49123
bdos           =AC06      44038
begdat         =BF63      48995
bias           =7000      28672
bios           =BA00      47616
blkmsk         =0F        15
blkshf         =04        4
blksiz         = 800      2048
blkval         =01        1
boot            BA33      47667
bs             =08        8
buffer         =00        0
ccp            =A400      41984
cdisk          =04        4
chkuna          BB97      48023
cmda           =32        50
cmdb           =33        51
concr           BAE7      47847
conin           BAB7      47799
conlf           BAF0      47856
conout          BABA      47802
conout1         BACB      47819
consc          =08        8
consd          =00        0
conss          =08        8
const           BAB5      47797
cpmspt         =40        64
cr             =0D        13
crlf            BDAA      48554
css0           =20        32
csv0            BFF4      49140
cursor          BB27      47911
datsiz         =B1        177
dchrn           BD02      48386
devack         =04        4
dirbks         =40        64
dirblk         =C000      49152
dirbuf          BF63      48995
dirrem         =00        0
dmaadr          BE61      48737
dpb0           =BDFE      48638
dpbase         =BDEE      48622
dpe0            BDEE      48622
dsknxt         =01        1
enddat         =C014      49172
endlin          BB1B      47899
erflag          BE5D      48733
extmsk         =01        1
fdcctrl        =0A        10
fdcdata        =0B        11
fdcio           BD72      48498
fdcio1          BD84      48516
fdcret          BCBA      48314
fdcrst          BD40      48448
fdcstat        =0C        12
fdctc           BD88      48520
fdcwait         BD67      48487
fdcwl1          BD73      48499
filhst          BC18      48152
gcdm           =40        64
gcdn           =01        1
gcdr           =00        0
gcdx           =40        64
gocpm           BA94      47764
home            BB29      47913
homed           BB33      47923
hstact          BE56      48726
hstblk         =02        2
hstbuf          BE63      48739
hstdsk          BE51      48721
hsthpc         =02        2
hstsec          BE54      48724
hstsiz         = 100      256
hstsph         =10        16
hstspt         =20        32
hsttrk          BE52      48722
hstwrt          BE57      48727
iobyte         =03        3
irqstat        =31        49
lf             =0A        10
list            BB20      47904
listst          BB21      47905
match           BC35      48181
mesg            BD9E      48542
msize          =30        48
ndisks         =01        1
nelts          =40        64
neltst         =40        64
nomatch         BC11      48145
noovf           BBCF      48079
nsects         =2C        44
nxtbas         =01        1
nxtsec         =01        1
phex            BDD1      48593
phex1           BDE1      48609
porta          =30        48
portb          =31        49
print           BD93      48531
punch           BB23      47907
rdloop          BA6F      47727
read            BB5F      47967
reader          BB24      47908
readhst         BC8B      48267
readl           BCAB      48299
readop          BE5F      48735
rsflag          BE5E      48734
rwmove          BC5B      48219
rwoper          BBDE      48094
rxd            =01        1
scrll           BB02      47874
scroll          BAF7      47863
secmax         =3F        63
secmsk         =01        1
secshf         =01        1
sectors        =40        64
sectran         BB5C      47964
seektrk         BCE3      48355
sekdsk          BE4D      48717
sekhst          BE55      48725
seksec          BE50      48720
sektrk          BE4E      48718
sektrkcmp       BC79      48249
seldsk          BB3A      47930
setdma          BB56      47958
setsec          BB51      47953
settrk          BB4A      47946
stack           BDD1      48593
txd            =02        2
unacnt          BE58      48728
unadsk          BE59      48729
unasec          BE5C      48732
unatrk          BE5A      48730
wboot           BA51      47697
wboote          BA03      47619
wrall          =00        0
wrdir          =01        1
write           BB73      47987
writehst        BC85      48261
wrtype          BE60      48736
wrual          =02        2
xlt0           =BE0D      48653
